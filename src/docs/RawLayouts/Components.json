[
    {
        "name": "Accordion",
        "tag": "accordion",
        "description": "A vertically stacked set of interactive headings that each reveal a section of content.",
        "refImplementation": "/accordion Is it accessible?\n  Yes. It adheres to the WAI-ARIA design pattern.\n/accordion Is it styled?\n  Yes. It comes with default styles that matches the other components' aesthetic.\n/accordion Is it animated?\n  Yes. It's animated by default, but you can disable it if you prefer.",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "type",
                "required": true,
                "type": "\"single\" | \"multiple\"",
                "typeSimple": "enum",
                "description": "Determines whether one or multiple items can be opened at the same time.",
                "descriptionMdx": "<span>\n          Determines whether one or multiple items can be opened at the same\n          time.\n        </span>"
            },
            {
                "name": "value",
                "required": true,
                "type": "string",
                "description": "A unique value for the item.",
                "descriptionMdx": "A unique value for the item."
            },
            {
                "name": "defaultValue",
                "required": false,
                "default": "[]",
                "type": "string[]",
                "description": "The value of the item to expand when initially rendered when{' '} `type` is `\"multiple\"`. Use when you do not need to control the state of the items.",
                "descriptionMdx": "<span>\n          The value of the item to expand when initially rendered when{' '}\n          <Code>type</Code> is <Code>\"multiple\"</Code>. Use when you do not need\n          to control the state of the items.\n        </span>"
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "(value: string[]) => void",
                "typeSimple": "function",
                "description": "Event handler called when the expanded state of an item changes and{' '} `type` is `\"multiple\"`.",
                "descriptionMdx": "<span>\n          Event handler called when the expanded state of an item changes and{' '}\n          <Code>type</Code> is <Code>\"multiple\"</Code>.\n        </span>"
            },
            {
                "name": "collapsible",
                "required": false,
                "default": "false",
                "type": "boolean",
                "description": "When `type` is `\"single\"`, allows closing content when clicking trigger for an open item.",
                "descriptionMdx": "<span>\n          When <Code>type</Code> is <Code>\"single\"</Code>, allows closing\n          content when clicking trigger for an open item.\n        </span>"
            },
            {
                "name": "disabled",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "When `true`, prevents the user from interacting with the item.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "default": "\"ltr\"",
                "description": "The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode."
            },
            {
                "name": "orientation",
                "required": false,
                "type": "\"horizontal\" | \"vertical\"",
                "typeSimple": "enum",
                "default": "\"vertical\"",
                "description": "The orientation of the accordion.",
                "descriptionMdx": "The orientation of the accordion."
            }
        ],
        "subComponents": [
            {
                "name": "AccordionContent",
                "tag": "content",
                "description": "Contains the collapsible content for an item.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AccordionTrigger",
                "tag": "trigger",
                "description": "Toggles the collapsed state of its associated item. It should be nested inside of an `Accordion.Header`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/accordion Title\n\tContent"
            },
            {
                "title": "Composable syntax",
                "code": "/accordion\n\t/trigger Title\n\t/content Content"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Alert",
        "tag": "alert",
        "description": "Displays a callout for user attention",
        "refImplementation": "/alert %default Heads up!\n    /icon Alert circle\n    /text There's something very important you should know.",
        "props": [],
        "subComponents": [
            {
                "name": "AlertDescription",
                "tag": "description",
                "description": "Provides additional context or information about the alert.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AlertTitle",
                "tag": "title",
                "description": "The title or main heading of the alert.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/alert Hello\n\tThis is a description"
            },
            {
                "title": "Short sytax with icon",
                "code": "/alert Hello\n\tThis is a description\n\t/icon Info"
            },
            {
                "title": "Composable syntax",
                "code": "/alert\n\t/title Hello\n\t/description This is a description\n\t/icon Info"
            }
        ],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Alert Dialog",
        "tag": "alert-dialog",
        "description": "A modal dialog that interrupts the user with important content and expects a response",
        "refImplementation": "/button %outline Show Dialog\n\t/alert-dialog\n\t\t/header\n\t\t\t/title Are you absolutely sure?\n\t\t\t/description This action cannot be undone. This will permanently delete your account and remove your data from our servers.\n\t\t/footer\n\t\t\t/cancel Cancel\n\t\t\t/action Continue",
        "props": [
            {
                "name": "defaultOpen",
                "type": "boolean",
                "description": "The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.",
                "descriptionMdx": "The open state of the dialog when it is initially rendered. Use when you do not need to control its open state."
            },
            {
                "name": "open",
                "type": "boolean",
                "description": "The controlled open state of the dialog. Must be used in conjunction with `onOpenChange`.",
                "descriptionMdx": "<span>\n          The controlled open state of the dialog. Must be used in conjunction\n          with <Code>onOpenChange</Code>.\n        </span>"
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the dialog changes.",
                "descriptionMdx": "Event handler called when the open state of the dialog changes."
            }
        ],
        "subComponents": [
            {
                "name": "AlertDialogAction",
                "tag": "action",
                "description": "A button that closes the dialog. These buttons should be distinguished visually from the `AlertDialog.Cancel` button.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AlertDialogCancel",
                "tag": "close",
                "description": "A button that closes the dialog. This button should be distinguished visually from `AlertDialog.Action` buttons.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AlertDialogInnerContent",
                "tag": "content",
                "description": "Contains content to be rendered when the dialog is open.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `AlertDialog.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>AlertDialog.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "onOpenAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves to the destructive action after opening. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves to the destructive action after\n          opening. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onCloseAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves to the trigger after closing. It\n          can be prevented by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AlertDialogDescription",
                "tag": "description",
                "description": "An accessible description to be announced when the dialog is opened. Alternatively, you can provide `aria-describedby` to `AlertDialog.Content` and exclude this component.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AlertDialogFooter",
                "tag": "footer",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AlertDialogHeader",
                "tag": "header",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AlertDialogTitle",
                "tag": "title",
                "description": "An accessible name to be announced when the dialog is opened. Alternatively, you can provide `aria-label` or `aria-labelledby` to `AlertDialog.Content` and exclude this component.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/button Open\n\t/alert-dialog \n\t\t# Title here \n\t\t-- Description here\n\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close\n\t\t\t\t/button Close\n\t\t\t/action\n\t\t\t\t/button Do action"
            },
            {
                "title": "Composable syntax",
                "code": "/button Open\n\t/alert-dialog\n\t\t/header\n\t\t\t/title Title here\n\t\t\t/description Description here\n\t\t/content\n\t\t\tAny content here\n\t\t/footer\n\t\t\t/close\n\t\t\t\t/button %outline Click me to Close\n\t\t\t/action\n\t\t\t\t/button Click me to trigger action"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Aspect Ratio",
        "tag": "aspect-ratio",
        "description": "Displays content within a desired ratio",
        "refImplementation": "/div w-1/4\n\t  /aspect-ratio %video\n        /image size-full object-cover rounded-md Night full of stars",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "ratio",
                "type": "number",
                "default": "1",
                "description": "The desired ratio",
                "descriptionMdx": "The desired ratio"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Using ratio from variants",
                "code": "/div w-1/4\n\t/aspect-ratio %video\n\t\t/image size-full object-cover rounded-md Night full of stars"
            },
            {
                "title": "Using custom ratio (fraction)",
                "code": "/div w-1/4\n\t/aspect-ratio 4/3\n\t\t/image size-full object-cover rounded-md Night full of stars"
            },
            {
                "title": "Using custom ratio (decimal)",
                "code": "/div w-1/4\n\t/aspect-ratio 1.33\n\t\t/image size-full object-cover rounded-md Night full of stars"
            }
        ],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Auto-complete",
        "tag": "auto-complete",
        "description": "Autocomplete input and command palette with a list of suggestions",
        "refImplementation": "/auto-complete Select an action...\n    # Suggestions\n        Calendar\n        Search Emoji\n            /icon smiley\n        Calculator\n    ---\n    # Settings\n        Profile\n            /icon User profile\n        Billing\n            /icon Credit card\n        Settings",
        "props": [
            {
                "name": "defaultValue",
                "required": false,
                "type": "string",
                "description": "The initial value of the autocomplete input."
            },
            {
                "name": "value",
                "required": false,
                "type": "string",
                "description": "The controlled value of the autocomplete input."
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "(val: string) => void",
                "description": "Callback function called when the value changes."
            },
            {
                "name": "placeholder",
                "required": true,
                "type": "string",
                "description": "The placeholder text displayed in the autocomplete input."
            },
            {
                "name": "emptyText",
                "required": false,
                "type": "string",
                "description": "Text to display when there are no suggestions."
            }
        ],
        "subComponents": [],
        "examples": [],
        "sources": [
            "Shadcn",
            "Cmdk"
        ]
    },
    {
        "name": "Auto-layout",
        "tag": "auto-layout",
        "description": "A configurable stack component for people used to Figma auto-layout frames.",
        "refImplementation": "/auto-layout %vertical-bottom-right p-2 gap-2 rounded-xl size-56 border border-slate-300\n\t/center bg-slate-200 size-1/3 rounded-lg text-slate-700 font-bold A\n\t/center bg-slate-200 size-1/3 rounded-lg text-slate-700 font-bold B",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Avatar",
        "tag": "avatar",
        "description": "An image element with a fallback for representing the user",
        "refImplementation": "/avatar https://github.com/creative-robots.png\n    @fallback=\"CR\"",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            }
        ],
        "subComponents": [
            {
                "name": "AvatarFallback",
                "tag": "fallback",
                "description": "An element that renders when the image hasn't loaded. This means whilst it's loading, or if there was an error. If you notice a flash during loading, you can provide a `delayMs` prop to delay its rendering so it only renders for those with slower connections. For more control, use the `onLoadingStatusChange` handler on `Avatar.Image`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "delayMs",
                        "type": "number",
                        "description": "Useful for delaying rendering so it only appears for those with slower connections.",
                        "descriptionMdx": "Useful for delaying rendering so it only appears for those with slower connections."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "AvatarImage",
                "tag": "image",
                "description": "The image to render. By default it will only render when it has loaded. You can use the `onLoadingStatusChange` handler if you need more control.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "onLoadingStatusChange",
                        "type": "(status: \"idle\" | \"loading\" | \"loaded\" | \"error\") => void",
                        "typeSimple": "function",
                        "description": "A callback providing information about the loading status of the image. This is useful in case you want to control more precisely what to render as the image is loading.",
                        "descriptionMdx": "A callback providing information about the loading status of the image. This is useful in case you want to control more precisely what to render as the image is loading."
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Get an image from unsplash",
                        "code": "/image w-40 %unsplash Tiger w-40"
                    },
                    {
                        "title": "Get an image from google",
                        "code": "/image w-40 %google Tiger w-40"
                    },
                    {
                        "title": "Get an image by URL",
                        "code": "/image w-40 https://w7.pngwing.com/pngs/293/485/png-transparent-tailwind-css-hd-logo.png My image description here"
                    },
                    {
                        "title": "Apply transforms to the image",
                        "code": "/image w-40 %google Lion | remove-bg"
                    },
                    {
                        "title": "Create an image with the right aspect ratio",
                        "code": "/div w-40\n\t/aspect-ratio %video\n\t\t/image Tiger size-full object-cover"
                    },
                    {
                        "title": "Generate an image via AI",
                        "code": "/image w-40 %ai/flat-illustration Calendar"
                    },
                    {
                        "title": "Apply transforms to the illustration",
                        "code": "/image w-40 %ai/flat-illustration Calendar | remove-bg | vectorize"
                    }
                ],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "With image URL",
                "code": "/avatar https://pbs.twimg.com/profile_images/485060580760252416/th788aXP_400x400.jpeg"
            },
            {
                "title": "With initial letters",
                "code": "/avatar Severin MARCOMBES"
            },
            {
                "title": "With gravatar image",
                "code": "/avatar severin-m@rcombes.fr"
            },
            {
                "title": "With fallback",
                "code": "/avatar https://pbs.twimg.com/profile_images/485060580760252416/th788aXP_400x400.jpeg\n\t@fallback=Severin MARCOMBES"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Badge",
        "tag": "badge",
        "description": "Displays a badge",
        "refImplementation": "/badge %default Badge content here",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Background Mesh Gradient",
        "tag": "bg-mesh",
        "description": "A background gradient to use for the page.",
        "refImplementation": "/div size-40 rounded-lg\n        /bg-mesh Any seed text here for reproductability!",
        "props": [
            {
                "name": "seed",
                "required": true,
                "type": "number",
                "description": "The seed used to generate the mesh gradient, ensuring reproducibility of the gradient pattern.",
                "default": 1
            },
            {
                "name": "length",
                "required": false,
                "type": "number",
                "description": "The number of colors or segments in the gradient.",
                "default": 1
            },
            {
                "name": "opacity",
                "required": false,
                "type": "number",
                "description": "The opacity level of the gradient, expressed as a percentage.",
                "default": 100
            },
            {
                "name": "baseColor",
                "required": false,
                "type": "string",
                "description": "The base color for the gradient, defined using a color code or a named color.",
                "default": "transparent"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/div size-40\n\t/bg-mesh Write any text to generate a unique seed here"
            },
            {
                "title": "🔴 Props-based syntax",
                "code": "/div size-40\n\t/bg-mesh\n\t\t@seed=546\n\t\t@length=3\n\t\t@opacity=70\n\t\t@baseColor=teal-500"
            }
        ],
        "sources": []
    },
    {
        "name": "Background Pattern",
        "tag": "bg-pattern",
        "description": "A background pattern to use for the page.",
        "refImplementation": "/bg-pattern %light-gradrient-1",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Background video",
        "tag": "bg-video",
        "description": "Add a background video to a component.",
        "refImplementation": "/center size-80 p-5 rounded-2xl shadow-xl\n        /bg-video https://motion.layouts.dev/colorful-gradient.mp4\n        Hello text-white text-3xl font-semibold",
        "props": [
            {
                "name": "src",
                "required": true,
                "type": "string",
                "description": "The source URL of the video. It can be passed via the `src` prop or as the text content of the component.",
                "default": null
            }
        ],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Bottom bar",
        "tag": "bottom-bar",
        "description": "Bottom navigation bar",
        "refImplementation": "/bottom-bar\n    News\n    Tags\n    Settings\n",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Button",
        "tag": "button",
        "description": "A button to trigger an action",
        "refImplementation": "/button %default\n    @action=\"Start a video meeting\"\n    /icon Visioconference\n    /text Start meeting",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior."
            },
            {
                "name": "size",
                "required": false,
                "type": "\"icon\" | \"default\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\" | \"5xl\" | \"6xl\"",
                "typeSimple": "enum",
                "description": "Defines the size of the button."
            },
            {
                "name": "action",
                "required": false,
                "type": "string",
                "description": "Defines a custom action to trigger when the button is clicked."
            },
            {
                "name": "href",
                "required": false,
                "type": "string",
                "description": "Specifies the URL the button should navigate to when clicked."
            },
            {
                "name": "to",
                "required": false,
                "type": "string",
                "description": "Specifies the route the button should navigate to when clicked in a React Router environment."
            },
            {
                "name": "onClick",
                "required": false,
                "type": "function",
                "description": "Function to call when the button is clicked."
            },
            {
                "name": "disabled",
                "required": false,
                "type": "boolean",
                "description": "Disables the button, preventing it from being clicked."
            },
            {
                "name": "type",
                "required": false,
                "type": "\"button\" | \"submit\" | \"reset\"",
                "typeSimple": "enum",
                "description": "Specifies the type of the button."
            },
            {
                "name": "aria-label",
                "required": false,
                "type": "string",
                "description": "Defines a string that labels the button for accessibility purposes."
            },
            {
                "name": "autoFocus",
                "required": false,
                "type": "boolean",
                "description": "Specifies if the button should automatically receive focus when the page loads."
            },
            {
                "name": "name",
                "required": false,
                "type": "string",
                "description": "Specifies the name of the button, used to reference form data after it is submitted."
            },
            {
                "name": "value",
                "required": false,
                "type": "string",
                "description": "Defines the value sent with the form when the button is submitted."
            },
            {
                "name": "tabIndex",
                "required": false,
                "type": "number",
                "description": "Specifies the tab order of an element."
            },
            {
                "name": "title",
                "required": false,
                "type": "string",
                "description": "Provides additional information about the button, displayed as a tooltip."
            },
            {
                "name": "role",
                "required": false,
                "type": "string",
                "description": "Defines a role for the button, useful for accessibility."
            },
            {
                "name": "accessKey",
                "required": false,
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus the button."
            },
            {
                "name": "id",
                "required": false,
                "type": "string",
                "description": "Specifies a unique id for the button."
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "With icon only",
                "code": "/button %outline @size=icon\n\t/icon %lucide chevron-right"
            },
            {
                "title": "With icon and text",
                "code": "/button\n\t/icon %lucide enveloppe open\n\tLogin with email"
            },
            {
                "title": "Loading",
                "code": "/button @disabled\n\t/icon rotate-cw animate-spin\n\tPlease wait"
            },
            {
                "title": "With redirect",
                "code": "/button %outline @to=\"https://creative-robots.ai\"\n\t/icon robot\n\tGo see robots"
            },
            {
                "title": "With javascript action",
                "code": "/button %outline \n\t@onClick={() => {\n\t\talert('👋🤖 Hello stranger!');\n\t}}\n\t/icon robot\n\tHello robots"
            },
            {
                "title": "With AI-generated action (private beta, via buttons.dev)",
                "code": "/button\n\t@action=\"Start a video meeting\"\n\t/icon Webcam\n\tStart meeting"
            }
        ],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Calendar",
        "tag": "calendar",
        "description": "Displays a month view calendar",
        "refImplementation": "/calendar rounded-md border 7th of March 2024",
        "props": [
            {
                "name": "value",
                "required": false,
                "type": "string | Date",
                "description": "The currently selected date. Falls back to the value of the `selected` prop if not provided."
            },
            {
                "name": "selected",
                "required": false,
                "type": "string | Date",
                "description": "Alias for `value`, representing the currently selected date."
            },
            {
                "name": "defaultValue",
                "required": false,
                "type": "string | Date",
                "description": "The default date selected when the component is first rendered."
            },
            {
                "name": "defaultMonth",
                "required": false,
                "type": "string | Date",
                "description": "The default month displayed when the calendar is first rendered."
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "With static date",
                "code": "/calendar 18th of March 2024"
            },
            {
                "title": "With static date (other example)",
                "code": "/calendar 2024-03-18"
            },
            {
                "title": "Bound to a variable",
                "code": "/vstack w-fit\n\t/input Write any date here $myDateVariable\n\t/calendar $myDateVariable"
            },
            {
                "title": "Showing a specific month",
                "code": "/calendar @defaultMonth=\"March 2024\""
            },
            {
                "title": "Range selector"
            }
        ],
        "sources": [
            "Shadcn",
            "ReactDayPicker"
        ]
    },
    {
        "name": "Card",
        "tag": "card",
        "description": "Displays a card with header, content, and footer.",
        "refImplementation": "/card w-[350px]\n    /header\n        /title Create project\n        /description Deploy your new project in one-click.\n    /content\n        /form\n            /div grid w-full items-center gap-4\n                /flex flex-col space-y-1.5\n                    /label Name\n                    /input Name of your project\n                /flex flex-col space-y-1.5\n                    /label Framework\n                    /select Select\n                        /item @value=\"next\" Next.js\n                        /item @value=\"sveltekit\" SvelteKit\n                        /item @value=\"astro\" Astro\n                        /item @value=\"nuxt\" Nuxt.js\n    /footer justify-between\n        /button %outline Cancel\n        /button Deploy",
        "props": [],
        "subComponents": [
            {
                "name": "CardContent",
                "tag": "content",
                "description": "The main content area of the card, typically containing the bulk of the card's content.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CardDescription",
                "tag": "description",
                "description": "A short description or subtitle, usually displayed in the header section below the title.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CardFooter",
                "tag": "footer",
                "description": "The footer section of the card, often containing actions like buttons.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CardHeader",
                "tag": "header",
                "description": "Represents the header section of the card, typically containing a title and a description.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CardTitle",
                "tag": "title",
                "description": "The title of the card, usually displayed in the header section.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/card Title here\n\t/description Description here\n\tContent here\n\t/footer\n\t\tFooter content here"
            },
            {
                "title": "Composable syntax",
                "code": "/card\n\t/header\n\t\t/title Title here\n\t\t/description Description here\n\t/content\n\t\tContent here\n\t/footer\n\t\tFooter content here"
            }
        ],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Carousel",
        "tag": "carousel",
        "description": "A carousel with motion and swipe",
        "refImplementation": "/carousel %horizontal @align=start @itemsPerSlide=3 mx-0 p-5 gap-3\n\t\t/image rounded-lg shadow-md aspect-video object-cover w-full bear\n\t\t/image rounded-lg shadow-md aspect-video object-cover w-full tiger\n\t\t/image rounded-lg shadow-md aspect-video object-cover w-full hippo\n\t\t/image rounded-lg shadow-md aspect-video object-cover w-full koala\n\t\t/image rounded-lg shadow-md aspect-video object-cover w-full flamingo\n\t\t/image rounded-lg shadow-md aspect-video object-cover w-full ostrich",
        "props": [
            {
                "name": "active",
                "required": false,
                "type": "boolean",
                "default": true,
                "description": "Determines if the carousel is active."
            },
            {
                "name": "align",
                "required": false,
                "type": "\"center\" | \"start\" | \"end\"",
                "default": "center",
                "description": "Defines the alignment of the carousel items."
            },
            {
                "name": "containScroll",
                "required": false,
                "type": "\"trimSnaps\" | \"keepSnaps\" | false",
                "description": "Specifies how the scroll container should handle snapping behavior."
            },
            {
                "name": "direction",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "description": "Sets the direction of the carousel, either left-to-right (ltr) or right-to-left (rtl)."
            },
            {
                "name": "dragFree",
                "required": false,
                "type": "boolean",
                "default": false,
                "description": "Allows the carousel to be dragged freely without snapping."
            },
            {
                "name": "dragThreshold",
                "required": false,
                "type": "number",
                "default": 10,
                "description": "Sets the threshold for dragging to the next slide."
            },
            {
                "name": "duration",
                "required": false,
                "type": "number",
                "default": 25,
                "description": "Specifies the duration of the transition animation."
            },
            {
                "name": "inViewThreshold",
                "required": false,
                "type": "number",
                "default": 0,
                "description": "Defines the threshold at which a slide is considered in view."
            },
            {
                "name": "loop",
                "required": false,
                "type": "boolean",
                "default": false,
                "description": "Enables looping of the carousel slides."
            },
            {
                "name": "skipSnaps",
                "required": false,
                "type": "boolean",
                "default": false,
                "description": "Skips snapping behavior during drag."
            },
            {
                "name": "slidesToScroll",
                "required": false,
                "type": "number",
                "default": 1,
                "description": "Sets the number of slides to scroll at a time."
            },
            {
                "name": "startIndex",
                "required": false,
                "type": "number",
                "default": 0,
                "description": "Defines the initial slide index."
            },
            {
                "name": "watchDrag",
                "required": false,
                "type": "boolean",
                "default": true,
                "description": "Watches for drag events to update the carousel."
            },
            {
                "name": "watchResize",
                "required": false,
                "type": "boolean",
                "default": true,
                "description": "Watches for resize events to update the carousel."
            },
            {
                "name": "watchSlides",
                "required": false,
                "type": "boolean",
                "default": true,
                "description": "Watches for changes in the number of slides to update the carousel."
            },
            {
                "name": "opts",
                "required": false,
                "type": "object",
                "description": "Additional configuration options for the carousel."
            },
            {
                "name": "plugins",
                "required": false,
                "type": "array",
                "description": "An array of plugins to enhance the carousel's functionality."
            },
            {
                "name": "orientation",
                "required": false,
                "type": "\"horizontal\" | \"vertical\"",
                "description": "Defines the orientation of the carousel."
            },
            {
                "name": "setApi",
                "required": false,
                "type": "function",
                "description": "A function to set the Embla carousel API."
            },
            {
                "name": "itemsPerSlide",
                "required": false,
                "type": "number | object",
                "description": "Specifies the number of items to display per slide. Can be a number or an object for responsive values."
            }
        ],
        "subComponents": [
            {
                "name": "CarouselContent",
                "tag": "content",
                "description": "A container for the carousel's content, managing the overflow and positioning of items.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CarouselItem",
                "tag": "item",
                "description": "An individual item within the carousel.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CarouselNext",
                "tag": "next",
                "description": "A button to scroll to the next slide.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "description": "If true, renders the button as a child element, inheriting the props of its parent."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CarouselPrevious",
                "tag": "previous",
                "description": "A button to scroll to the previous slide.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "description": "If true, renders the button as a child element, inheriting the props of its parent."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/carousel\n\t/center border border-slate-200 rounded size-32 1\n\t/center border border-slate-200 rounded size-32 2\n\t/center border border-slate-200 rounded size-32 3"
            },
            {
                "title": "Composable syntax",
                "code": "/carousel mx-0 p-5 gap-3\n\t/content bg-slate-800\n\t\t/center border border-slate-200 rounded size-32 1\n\t\t/center border border-slate-200 rounded size-32 2\n\t\t/center border border-slate-200 rounded size-32 3\n\t/previous bg-slate-100 rounded-none\n\t\t<\n\t/next bg-slate-100 rounded-none\n\t\t>"
            },
            {
                "title": "With a list of items",
                "code": "/carousel\n\t/list [1...10]\n\t\t/center border border-slate-200 rounded-lg size-32 $item"
            },
            {
                "title": "Controlling the number of items per slide",
                "code": "/carousel @itemsPerSlide=3\n\t/center border border-slate-200 rounded size-32 1\n\t/center border border-slate-200 rounded size-32 2\n\t/center border border-slate-200 rounded size-32 3\n\t/center border border-slate-200 rounded size-32 4\n\t/center border border-slate-200 rounded size-32 5\n\t/center border border-slate-200 rounded size-32 6"
            },
            {
                "title": "Controlling the number of items per slide, responsive",
                "code": "/carousel @itemsPerSlide={base: 1, md: 3}\n\t/center border border-slate-200 rounded size-32 1\n\t/center border border-slate-200 rounded size-32 2\n\t/center border border-slate-200 rounded size-32 3\n\t/center border border-slate-200 rounded size-32 4\n\t/center border border-slate-200 rounded size-32 5\n\t/center border border-slate-200 rounded size-32 6"
            },
            {
                "title": "Controlling space between items",
                "code": "/carousel %vertical gap-9\n\t/center border border-slate-200 rounded size-32 1\n\t/center border border-slate-200 rounded size-32 2\n\t/center border border-slate-200 rounded size-32 3"
            },
            {
                "title": "Other options",
                "code": "/carousel @itemsPerSlide={base: 1, md: 3} @align=start @loop gap-4\n\t/center border border-slate-200 rounded size-32 1\n\t/center border border-slate-200 rounded size-32 2\n\t/center border border-slate-200 rounded size-32 3\n\t/center border border-slate-200 rounded size-32 4\n\t/center border border-slate-200 rounded size-32 5\n\t/center border border-slate-200 rounded size-32 6"
            }
        ],
        "sources": [
            "Shadcn",
            "EmblaCarousel"
        ]
    },
    {
        "name": "Center",
        "tag": "center",
        "description": "A center-aligned flex container.",
        "refImplementation": "/center p-2 rounded-xl size-56 border border-slate-300\n        /div bg-slate-200 size-1/3 rounded-lg",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Chart",
        "tag": "chart",
        "description": "Chart component",
        "refImplementation": "/chart %bar [10, 20, 30, 50, 80, 110, 150] size-52",
        "props": [],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax / bar chart",
                "code": "/chart %bar [10, 20, 30, 50, 80, 110, 150] size-52"
            },
            {
                "title": "Short syntax / line chart",
                "code": "/chart %line [10, 20, 30, 50, 80, 110, 150] size-52"
            },
            {
                "title": "Bound to variable",
                "code": "/char %bar $invoices // Define dimensions here"
            },
            {
                "title": "Composable syntax",
                "code": "/chart @data=[{ product: 'unicorn', price: 12.99, sales: 3455 }, { product: 'narwal', price: 9.99, sales: 465 } ]\n\t/bar @dataKey=price opacity-80 bg-indigo-900\n\t/bar @dataKey=sales opacity-80 bg-indigo-900"
            }
        ],
        "sources": []
    },
    {
        "name": "Checkbox",
        "tag": "checkbox",
        "description": "A control that allows the user to toggle between checked and not checked",
        "refImplementation": " \n/checkbox Receive marketing emails ON\n",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultChecked",
                "type": "boolean | 'indeterminate'",
                "description": "The checked state of the checkbox when it is initially rendered. Use when you do not need to control its checked state.",
                "descriptionMdx": "The checked state of the checkbox when it is initially rendered. Use when you do not need to control its checked state."
            },
            {
                "name": "checked",
                "type": "boolean | 'indeterminate'",
                "description": "The controlled checked state of the checkbox. Must be used in conjunction with `onCheckedChange`.",
                "descriptionMdx": "<span>\n          The controlled checked state of the checkbox. Must be used in\n          conjunction with <Code>onCheckedChange</Code>.\n        </span>"
            },
            {
                "name": "onCheckedChange",
                "type": "(checked: boolean | 'indeterminate') => void",
                "typeSimple": "function",
                "description": "Event handler called when the checked state of the checkbox changes.",
                "descriptionMdx": "Event handler called when the checked state of the checkbox changes."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "When `true`, prevents the user from interacting with the checkbox.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          checkbox.\n        </span>"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "When `true`, indicates that the user must check the checkbox before the owning form can be submitted.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, indicates that the user must check the\n          checkbox before the owning form can be submitted.\n        </span>"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the checkbox. Submitted with its owning form as part of a name/value pair.",
                "descriptionMdx": "The name of the checkbox. Submitted with its owning form as part of a name/value pair."
            },
            {
                "name": "value",
                "type": "string",
                "default": "on",
                "description": "The value given as data when submitted with a `name`.",
                "descriptionMdx": "<span>\n          The value given as data when submitted with a <Code>name</Code>.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/checkbox Click me if you can @value={true}"
            },
            {
                "title": "Composable syntax",
                "code": "/checkbox rounded-none border-2 \n\t/indicator text-teal-500\n\t\t/icon %lucide check size-4 @strokeWidth=3"
            },
            {
                "title": "Controlled value",
                "code": "/hstack gap-2\n\t/checkbox @id=\"checkThisOut\" @value={true}\n\t/label @htmlFor=\"checkThisOut\" Check this out"
            },
            {
                "title": "Bound to a variable",
                "code": "/vstack\n\t/hstack gap-2 p-3\n\t\t/checkbox @id=\"checkThisOut\" $myVariable\n\t\t/label @htmlFor=\"checkThisOut\" Check this out\n\t/separator %horizontal\n\t/hstack gap-2 p-3\n\t\t/label Value: \n\t\t/pre $myVariable"
            },
            {
                "title": "Disabled",
                "code": "/hstack gap-2 opacity-70\n\t/checkbox @id=\"checkThisOut\" @disabled\n\t/label @htmlFor=\"checkThisOut\" Check this out"
            },
            {
                "title": "With text",
                "code": "/label @htmlFor=\"terms1\"\n\t/hstack gap-2 items-start p-2 rounded-md border p-4 shadow\n\t\t/checkbox @id=terms1 peer\n\t\t/div grid gap-1.5 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\n\t\t\t/p text-sm font-medium leading-none\n\t\t\t\tAccept terms and conditions\n\t\t\t/p text-sm text-muted-foreground\n\t\t\t\tYou agree to our Terms of Service and Privacy Policy."
            },
            {
                "title": "Form",
                "code": "// TODO"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Collapsible",
        "tag": "collapsible",
        "description": "An interactive component which expands/collapses a panel",
        "refImplementation": "/collapsible p-3.5 border rounded-lg flex flex-col items-stretch gap-3.5\n\t\t\t/trigger font-semibold text-left Can I use this in my project?\n\t\t\t/content bg-gray-100 p-3.5 Yes. Free to use for personal and commercial projects. No attribution required.",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultOpen",
                "type": "boolean",
                "description": "The open state of the collapsible when it is initially rendered. Use when you do not need to control its open state.",
                "descriptionMdx": "The open state of the collapsible when it is initially rendered. Use when you do not need to control its open state."
            },
            {
                "name": "open",
                "type": "boolean",
                "description": "The controlled open state of the collapsible. Must be used in conjunction with `onOpenChange`.",
                "descriptionMdx": "<span>\n          The controlled open state of the collapsible. Must be used in\n          conjunction with <Code>onOpenChange</Code>.\n        </span>"
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the collapsible changes.",
                "descriptionMdx": "Event handler called when the open state of the collapsible changes."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "When `true`, prevents the user from interacting with the collapsible.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          collapsible.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "CollapsibleContent",
                "tag": "content",
                "description": "The component that contains the collapsible content.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
                        "descriptionMdx": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CollapsibleTrigger",
                "tag": "trigger",
                "description": "The button that toggles the collapsible.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/collapsible p-3.5 Can I use this in my project?\n\tYes. Free to use for personal and commercial projects. No attribution required. p-3.5 bg-slate-100 mt-3.5"
            },
            {
                "title": "Composable syntax",
                "code": "/collapsible p-3.5 border rounded-lg flex flex-col items-stretch gap-3.5\n\t/trigger font-semibold text-left Can I use this in my project?\n\t/content bg-gray-100 p-3.5 Yes. Free to use for personal and commercial projects. No attribution required."
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Command",
        "tag": "command",
        "description": "Fast, composable, unstyled command menu for React.",
        "refImplementation": "/command Type a command or search...\n        # Suggestions\n            Calendar\n            Search Emoji\n                /icon smiley\n            Calculator\n        ---\n        # Settings\n            Profile <Cmd + P>\n                /icon User profile\n            Billing <Cmd + B>\n                /icon Credit card\n            Settings <Space + S + shift>",
        "props": [
            {
                "name": "label",
                "type": "string",
                "description": "Accessible label for this command menu. Not shown visibly."
            },
            {
                "name": "shouldFilter",
                "type": "boolean",
                "description": "Turn off the automatic filtering and sorting when set to false."
            },
            {
                "name": "filter",
                "type": "function",
                "description": "Custom filter function for whether each command menu item matches the search query."
            },
            {
                "name": "defaultValue",
                "type": "string",
                "description": "Optional default item value when initially rendered."
            },
            {
                "name": "value",
                "type": "string",
                "description": "Controlled state of the selected command menu item."
            },
            {
                "name": "onValueChange",
                "type": "function",
                "description": "Event handler called when the selected item of the menu changes."
            },
            {
                "name": "loop",
                "type": "boolean",
                "description": "Enables looping around when using arrow keys."
            },
            {
                "name": "disablePointerSelection",
                "type": "boolean",
                "description": "Disables selection via pointer events."
            },
            {
                "name": "vimBindings",
                "type": "boolean",
                "description": "Disables ctrl+n/j/p/k shortcuts when set to false."
            }
        ],
        "subComponents": [
            {
                "name": "CommandEmpty",
                "tag": "empty",
                "description": "Automatically renders when there are no results for the search query.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CommandGroup",
                "tag": "group",
                "description": "Groups command menu items together with a heading.",
                "props": [
                    {
                        "name": "heading",
                        "type": "ReactNode",
                        "description": "Optional heading to render for the group."
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "description": "Unique value for identifying the group."
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Forces the group to be rendered regardless of filtering."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CommandInput",
                "tag": "input",
                "description": "Command menu input. All props are forwarded to the underlying input element.",
                "props": [
                    {
                        "name": "value",
                        "type": "string",
                        "description": "Controlled state for the value of the search input."
                    },
                    {
                        "name": "onValueChange",
                        "type": "function",
                        "description": "Event handler called when the search value changes."
                    },
                    {
                        "name": "noBottomBorder",
                        "type": "boolean",
                        "description": "Disables the bottom border of the input field."
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "🔴 Markdown syntax",
                        "code": "[Placeholder :: inputType = defaultValue]"
                    },
                    {
                        "title": "Short syntax",
                        "code": "/input This is the placeholder @type=\"email\""
                    },
                    {
                        "title": "Complete syntax",
                        "code": "/input \n\t@placeholder=\"This is the placeholder\"\n\t@type=\"email\"\n\t@defaultValue=\"severin@creative-robots.ai\""
                    },
                    {
                        "title": "With static value",
                        "code": "/input @value=\"This is my value\""
                    },
                    {
                        "title": "Bound to a variable",
                        "code": "/vstack gap-4\n\t/input What's your name ? $myNameVariable\n\t/h1 Hello $myNameVariable"
                    }
                ],
                "sources": []
            },
            {
                "name": "CommandItem",
                "tag": "item",
                "description": "A command menu item that becomes active on pointer enter or keyboard navigation.",
                "props": [
                    {
                        "name": "value",
                        "type": "string",
                        "description": "Unique value for the item. Inferred from children or textContent if not provided."
                    },
                    {
                        "name": "onSelect",
                        "type": "function",
                        "description": "Event handler called when the item is selected."
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "Disables the item when set to true."
                    },
                    {
                        "name": "keywords",
                        "type": "array",
                        "description": "Optional keywords for matching against during filtering."
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Forces the item to be rendered regardless of filtering."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CommandList",
                "tag": "list",
                "description": "Contains items, groups, and separators.",
                "props": [
                    {
                        "name": "label",
                        "type": "string",
                        "description": "Accessible label for the list of suggestions."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "CommandSeparator",
                "tag": "separator",
                "description": "A visual and semantic separator between items or groups.",
                "props": [
                    {
                        "name": "alwaysRender",
                        "type": "boolean",
                        "description": "Always renders the separator when set to true, even when filtering."
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Horizontal",
                        "code": "/vstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %horizontal\n\t/center B size-full"
                    },
                    {
                        "title": "Vertical",
                        "code": "/hstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %vertical\n\t/center B size-full"
                    }
                ],
                "sources": []
            },
            {
                "name": "CommandShortcut",
                "tag": "shortcut",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/command Type a command or search...\n\t# Suggestions\n\t\tCalendar\n\t\tSearch Emoji\n\t\t\t/icon smiley\n\t\tCalculator\n\t---\n\t# Settings\n\t\tProfile <Cmd + P>\n\t\t\t/icon User profile\n\t\tBilling <Cmd + B>\n\t\t\t/icon Credit card\n\t\tSettings <Space + S + shift>"
            },
            {
                "title": "Composable syntax",
                "code": "/command Type a command or search\n\t/group @heading=\"Suggestions\"\n\t\t/item gap-2\n\t\t\t/icon size-4 Calendar\n\t\t\t/span Calendar\n\t\t/item gap-2\n\t\t\t/icon size-4 smiley\n\t\t\t/span Search Emoji\n\t\t/item gap-2\n\t\t\t/icon size-4 Calculator\n\t\t\t/span Calculator\n\t/separator\n\t/group @heading=\"Settings\"\n\t\t/item gap-2\n\t\t\t/icon size-4 User profile\n\t\t\t/span Profile\n\t\t\t/shortcut ⌘P\n\t\t/item gap-2\n\t\t\t/icon size-4 Credit card\n\t\t\t/span Billing\n\t\t\t/shortcut ⌘B\n\t\t/item gap-2\n\t\t\t/icon size-4 Settings\n\t\t\t/span Settings\n\t\t\t/shortcut ␣⇧S\n\t/empty No settings found"
            }
        ],
        "sources": [
            "Shadcn",
            "Cmdk"
        ]
    },
    {
        "name": "Context Menu",
        "tag": "context-menu",
        "description": "Displays a menu to the user — such as a set of actions or functions — triggered by a button.",
        "refImplementation": "/div Right click here flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\n\t/context-menu w-64 \n\t\tBack <Cmd + [>\n\t\tForward <Cmd + ]>\n\t\tReload <Cmd + R>\n\t\tMore Tools w-48\n\t\t\tSave Page As... <Shift + Cmd + S>\n\t\t\tCreate Shortcut...\n\t\t\tName Window...\n\t\t\t---\n\t\t\tDeveloper Tools\n\t\t---\n\t\t[x] Show Bookmarks Bar <Cmd + Shift + B>\n\t\tShow Full URLs\n\t\t---\n\t\t# People\n\t\t---\n\t\t(x) Pedro Duarte\n\t\t() Colm Tuite",
        "props": [
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of submenus when applicable. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of submenus when applicable. If omitted,\n          inherits globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the context menu changes.",
                "descriptionMdx": "Event handler called when the open state of the context menu changes."
            },
            {
                "name": "modal",
                "required": false,
                "type": "boolean",
                "default": "true",
                "description": "The modality of the context menu. When set to `true`, interaction with outside elements will be disabled and only menu content will be visible to screen readers.",
                "descriptionMdx": "<span>\n          The modality of the context menu. When set to <Code>true</Code>,\n          interaction with outside elements will be disabled and only menu\n          content will be visible to screen readers.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "ContextMenuCheckboxItem",
                "tag": "checkbox",
                "description": "An item that can be controlled and rendered like a checkbox.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "checked",
                        "type": "boolean | 'indeterminate'",
                        "description": "The controlled checked state of the item. Must be used in conjunction with `onCheckedChange`.",
                        "descriptionMdx": "<span>\n          The controlled checked state of the item. Must be used in conjunction\n          with <Code>onCheckedChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onCheckedChange",
                        "type": "(checked: boolean) => void",
                        "typeSimple": "function",
                        "description": "",
                        "descriptionMdx": "<span>Event handler called when the checked state changes.</span>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the context menu from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the context menu from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Short syntax",
                        "code": "/checkbox Click me if you can @value={true}"
                    },
                    {
                        "title": "Composable syntax",
                        "code": "/checkbox rounded-none border-2 \n\t/indicator text-teal-500\n\t\t/icon %lucide check size-4 @strokeWidth=3"
                    },
                    {
                        "title": "Controlled value",
                        "code": "/hstack gap-2\n\t/checkbox @id=\"checkThisOut\" @value={true}\n\t/label @htmlFor=\"checkThisOut\" Check this out"
                    },
                    {
                        "title": "Bound to a variable",
                        "code": "/vstack\n\t/hstack gap-2 p-3\n\t\t/checkbox @id=\"checkThisOut\" $myVariable\n\t\t/label @htmlFor=\"checkThisOut\" Check this out\n\t/separator %horizontal\n\t/hstack gap-2 p-3\n\t\t/label Value: \n\t\t/pre $myVariable"
                    },
                    {
                        "title": "Disabled",
                        "code": "/hstack gap-2 opacity-70\n\t/checkbox @id=\"checkThisOut\" @disabled\n\t/label @htmlFor=\"checkThisOut\" Check this out"
                    },
                    {
                        "title": "With text",
                        "code": "/label @htmlFor=\"terms1\"\n\t/hstack gap-2 items-start p-2 rounded-md border p-4 shadow\n\t\t/checkbox @id=terms1 peer\n\t\t/div grid gap-1.5 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\n\t\t\t/p text-sm font-medium leading-none\n\t\t\t\tAccept terms and conditions\n\t\t\t/p text-sm text-muted-foreground\n\t\t\t\tYou agree to our Terms of Service and Privacy Policy."
                    },
                    {
                        "title": "Form",
                        "code": "// TODO"
                    }
                ],
                "sources": []
            },
            {
                "name": "ContextMenuCheckboxItem",
                "tag": "checkbox-item",
                "description": "An item that can be controlled and rendered like a checkbox.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "checked",
                        "type": "boolean | 'indeterminate'",
                        "description": "The controlled checked state of the item. Must be used in conjunction with `onCheckedChange`.",
                        "descriptionMdx": "<span>\n          The controlled checked state of the item. Must be used in conjunction\n          with <Code>onCheckedChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onCheckedChange",
                        "type": "(checked: boolean) => void",
                        "typeSimple": "function",
                        "description": "",
                        "descriptionMdx": "<span>Event handler called when the checked state changes.</span>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the context menu from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the context menu from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuContent",
                "tag": "content",
                "description": "The component that pops out in an open context menu.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "loop",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
                    },
                    {
                        "name": "onCloseAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves back after closing. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves back after closing. It can be\n          prevented by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onFocusOutside",
                        "type": "(event: FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `ContextMenu.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>ContextMenu.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "alignOffset",
                        "type": "number",
                        "default": "0",
                        "description": "",
                        "descriptionMdx": "<span>The vertical distance in pixels from the anchor.</span>"
                    },
                    {
                        "name": "avoidCollisions",
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
                    },
                    {
                        "name": "collisionBoundary",
                        "type": "Element | null | Array<Element | null>",
                        "typeSimple": "Boundary",
                        "default": "[]",
                        "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                        "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
                    },
                    {
                        "name": "collisionPadding",
                        "type": "number | Partial<Record<Side, number>>",
                        "typeSimple": "number | Padding",
                        "default": "0",
                        "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                        "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
                    },
                    {
                        "name": "sticky",
                        "type": "\"partial\" | \"always\"",
                        "typeSimple": "enum",
                        "default": "\"partial\"",
                        "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                        "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
                    },
                    {
                        "name": "hideWhenDetached",
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuItem",
                "tag": "item",
                "description": "The component that contains the context menu items.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the context menu from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the context menu from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuLabel",
                "tag": "label",
                "description": "Used to render a label. It won't be focusable using arrow keys.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenu",
                "tag": "menu",
                "description": "Contains all the parts of a context menu.",
                "props": [
                    {
                        "name": "dir",
                        "required": false,
                        "type": "\"ltr\" | \"rtl\"",
                        "typeSimple": "enum",
                        "description": "The reading direction of submenus when applicable. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                        "descriptionMdx": "<span>\n          The reading direction of submenus when applicable. If omitted,\n          inherits globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
                    },
                    {
                        "name": "onOpenChange",
                        "type": "(open: boolean) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the open state of the context menu changes.",
                        "descriptionMdx": "Event handler called when the open state of the context menu changes."
                    },
                    {
                        "name": "modal",
                        "required": false,
                        "type": "boolean",
                        "default": "true",
                        "description": "The modality of the context menu. When set to `true`, interaction with outside elements will be disabled and only menu content will be visible to screen readers.",
                        "descriptionMdx": "<span>\n          The modality of the context menu. When set to <Code>true</Code>,\n          interaction with outside elements will be disabled and only menu\n          content will be visible to screen readers.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuRadioGroup",
                "tag": "radio-group",
                "description": "Used to group multiple `ContextMenu.RadioItem`s.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "description": "The value of the selected item in the group.",
                        "descriptionMdx": "The value of the selected item in the group."
                    },
                    {
                        "name": "onValueChange",
                        "type": "(value: string) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the value changes.",
                        "descriptionMdx": "Event handler called when the value changes."
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Short syntax",
                        "code": "/radio-group\n\t() Bacon\n\t() Miso soup\n\t() Pizza"
                    },
                    {
                        "title": "Composable syntax",
                        "code": "/radio-group @defaultValue=bacon @name=foodPreferences\n\t/radio Bacon @value=\"bacon\"\n\t/radio Miso soup @value=\"miso-soup\"\n\t/radio Pizza @value=\"pizza\""
                    }
                ],
                "sources": []
            },
            {
                "name": "ContextMenuRadioItem",
                "tag": "radio-item",
                "description": "An item that can be controlled and rendered like a radio.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "required": true,
                        "description": "The unique value of the item.",
                        "descriptionMdx": "The unique value of the item."
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the context menu from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the context menu from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuSeparator",
                "tag": "separator",
                "description": "Used to visually separate items in the context menu.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Horizontal",
                        "code": "/vstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %horizontal\n\t/center B size-full"
                    },
                    {
                        "title": "Vertical",
                        "code": "/hstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %vertical\n\t/center B size-full"
                    }
                ],
                "sources": []
            },
            {
                "name": "ContextMenuShortcut",
                "tag": "shortcut",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuSub",
                "tag": "sub",
                "description": "Contains all the parts of a submenu.",
                "props": [
                    {
                        "name": "defaultOpen",
                        "type": "boolean",
                        "description": "The open state of the submenu when it is initially rendered. Use when you do not need to control its open state.",
                        "descriptionMdx": "<span>\n          The open state of the submenu when it is initially rendered. Use when\n          you do not need to control its open state.\n        </span>"
                    },
                    {
                        "name": "open",
                        "type": "boolean",
                        "description": "The controlled open state of the submenu. Must be used in conjunction with `onOpenChange`.",
                        "descriptionMdx": "<span>\n          The controlled open state of the submenu. Must be used in conjunction\n          with <Code>onOpenChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onOpenChange",
                        "type": "(open: boolean) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the open state of the submenu changes.",
                        "descriptionMdx": "<span>\n          Event handler called when the open state of the submenu changes.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuSubContent",
                "tag": "sub-content",
                "description": "The component that pops out when a submenu is open. Must be rendered inside `ContextMenu.Sub`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "loop",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onFocusOutside",
                        "type": "(event: FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `ContextMenu.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>ContextMenu.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "sideOffset",
                        "type": "number",
                        "default": "0",
                        "description": "",
                        "descriptionMdx": "<span>The distance in pixels from the trigger.</span>"
                    },
                    {
                        "name": "alignOffset",
                        "type": "number",
                        "default": "0",
                        "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                        "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
                    },
                    {
                        "name": "avoidCollisions",
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
                    },
                    {
                        "name": "collisionBoundary",
                        "type": "Element | null | Array<Element | null>",
                        "typeSimple": "Boundary",
                        "default": "[]",
                        "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                        "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
                    },
                    {
                        "name": "collisionPadding",
                        "type": "number | Partial<Record<Side, number>>",
                        "typeSimple": "number | Padding",
                        "default": "0",
                        "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                        "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
                    },
                    {
                        "name": "arrowPadding",
                        "type": "number",
                        "default": "0",
                        "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                        "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
                    },
                    {
                        "name": "sticky",
                        "type": "\"partial\" | \"always\"",
                        "typeSimple": "enum",
                        "default": "\"partial\"",
                        "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                        "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
                    },
                    {
                        "name": "hideWhenDetached",
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuSubTrigger",
                "tag": "sub-trigger",
                "description": "An item that opens a submenu. Must be rendered inside `ContextMenu.Sub`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ContextMenuTrigger",
                "tag": "trigger",
                "description": "The area that opens the context menu. Wrap it around the target you want the context menu to open from when right-clicking (or using the relevant keyboard shortcuts).",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "disabled",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, the context menu won't open when right-clicking. Note that this will also restore the native context menu.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, the context menu won't open when\n          right-clicking. Note that this will also restore the native context\n          menu.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/div Right click here flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\n\t/context-menu w-64 \n\t\tBack <Cmd + [>\n\t\tForward <Cmd + ]>\n\t\tReload <Cmd + R>\n\t\tMore Tools w-48\n\t\t\tSave Page As... <Shift + Cmd + S>\n\t\t\tCreate Shortcut...\n\t\t\tName Window...\n\t\t\t---\n\t\t\tDeveloper Tools\n\t\t---\n\t\t[x] Show Bookmarks Bar <Cmd + Shift + B>\n\t\tShow Full URLs\n\t\t---\n\t\t# People\n\t\t---\n\t\t(x) Pedro Duarte\n\t\t() Colm Tuite"
            },
            {
                "title": "Composable syntax",
                "code": "/div Right click here flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\n\t/context-menu w-64 \n\t\t/item Back\n\t\t\t/shortcut \n\t\t\t\t⌘\n\t\t/item Forward\n\t\t\t/shortcut ⌘]\n\t\t/item Reload\n\t\t\t/shortcut ⌘R\n\t\t/sub\t\n\t\t\t/sub-trigger \n\t\t\t\tMore Tools\n\t\t\t/sub-content w-48\n\t\t\t\t/item \n\t\t\t\t\tSave Page As...\n\t\t\t\t\t/shortcut ⇧⌘S\n\t\t\t\t/item \n\t\t\t\t\tCreate Shortcut...\n\t\t\t\t/item \n\t\t\t\t\tName Window...\n\t\t\t\t/separator\n\t\t\t\t/item Developer Tools\n\t\t/separator\n\t\t/checkbox-item Show Bookmarks Bar @value={true}\n\t\t/checkbox-item Show Full URLs \n\t\t/separator\n\t\t/radio-group @value=\"pedro\"\n\t\t\t/label People\n\t\t\t/separator\n\t\t\t/radio-item Pedro Duarte @value=\"pedro\"\n\t\t\t/radio-item Colm Tuite @value=\"colm\""
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Data source",
        "tag": "data",
        "description": "A component that fetches data from a remote data source.",
        "refImplementation": "/data $movies = mock://movies with title and poster\n/div w-full overflow-x-scroll\n\t/hstack bg-slate-950 gap-5 p-4 text-white items-start w-fit\n\t\t/foreach $movies\n\t\t\t/vstack gap-3 %center justify-start\n\t\t\t\t/div w-32\n\t\t\t\t\t/aspect-ratio %video-portrait overflow-hidden\n\t\t\t\t\t\t/image $item.poster size-full object-cover rounded hover:scale-105 cursor-pointer\n\t\t\t\t/center $item.title w-full text-center text-sm",
        "props": [],
        "subComponents": [],
        "examples": [
            {
                "title": "Fetch fake data from out AI-based mockup API",
                "code": "/data $movies = mock://A list of movies with title and poster"
            }
        ],
        "sources": []
    },
    {
        "name": "DatePicker",
        "tag": "date-picker",
        "description": "Displays a month view date-picker",
        "refImplementation": "/date-picker @value=\"7th of March 2024\" Pick a date",
        "props": [
            {
                "name": "placeholder",
                "type": "string",
                "description": "Placeholder text shown when no date is selected."
            },
            {
                "name": "value",
                "type": "string",
                "description": "The currently selected date in the format YYYY-MM-DD."
            },
            {
                "name": "defaultValue",
                "type": "string",
                "description": "The initial date value when the component is first rendered, in the format YYYY-MM-DD."
            },
            {
                "name": "onValueChange",
                "type": "(value?: string) => void",
                "description": "Callback triggered when the selected date changes."
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Static value",
                "code": "/date-picker @value=\"7th of March 2024\""
            },
            {
                "title": "Bound to a variable",
                "code": "/vstack\n\t/date-picker $date Pick a date\n\t/p Picked value: $date"
            }
        ],
        "sources": [
            "Shadcn",
            "ReactDayPicker"
        ]
    },
    {
        "name": "Dialog",
        "tag": "dialog",
        "description": "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert",
        "refImplementation": "\n  /button %outline Edit Profile\n    /dialog sm:max-w-[425px]\n      /header\n        /title Edit profile\n        /description Make changes to your profile here. Click save when you're done.\n      /content \n        /div grid gap-4 py-4\n          /div grid grid-cols-4 items-center gap-4\n            /label Name text-right\n            /input @defaultValue=\"Alex McKee\" col-span-3\n          /div grid grid-cols-4 items-center gap-4\n            /label Username text-right\n            /input @defaultValue=\"@McKeeAlex_\" col-span-3\n      /footer\n        /close\n          /button @type=submit Save changes\n  ",
        "props": [
            {
                "name": "defaultOpen",
                "type": "boolean",
                "description": "The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.",
                "descriptionMdx": "<span>\n          The open state of the dialog when it is initially rendered. Use when\n          you do not need to control its open state.\n        </span>"
            },
            {
                "name": "open",
                "type": "boolean",
                "description": "The controlled open state of the dialog. Must be used in conjunction with `onOpenChange`.",
                "descriptionMdx": "<span>\n          The controlled open state of the dialog. Must be used in conjunction\n          with <Code>onOpenChange</Code>.\n        </span>"
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the dialog changes.",
                "descriptionMdx": "<span>\n          Event handler called when the open state of the dialog changes.\n        </span>"
            },
            {
                "name": "modal",
                "required": false,
                "type": "boolean",
                "default": "true",
                "description": "The modality of the dialog. When set to `true`, interaction with outside elements will be disabled and only dialog content will be visible to screen readers.",
                "descriptionMdx": "<span>\n          The modality of the dialog. When set to <Code>true</Code>, interaction\n          with outside elements will be disabled and only dialog content will be\n          visible to screen readers.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "DialogClose",
                "tag": "close",
                "description": "The button that closes the dialog.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DialogInnerContent",
                "tag": "content",
                "description": "Contains content to be rendered in the open dialog.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `Dialog.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>Dialog.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "onOpenAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves into the component after opening. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves into the component after\n          opening. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onCloseAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves to the trigger after closing. It\n          can be prevented by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: React.FocusEvent | MouseEvent | TouchEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DialogDescription",
                "tag": "description",
                "description": "An optional accessible description to be announced when the dialog is opened.\n\nIf you want to hide the description, wrap it inside our [Visually Hidden](../utilities/visually-hidden) utility like this `<VisuallyHidden asChild>`. If you want to remove the description entirely, remove this part and pass `aria-describedby={undefined}` to `Dialog.Content`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DialogFooter",
                "tag": "footer",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DialogHeader",
                "tag": "header",
                "description": "The header of the dialog",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DialogTitle",
                "tag": "title",
                "description": "An accessible title to be announced when the dialog is opened.\n\nIf you want to hide the title, wrap it inside our [Visually Hidden](../utilities/visually-hidden) utility like this `<VisuallyHidden asChild>`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/button Open\n\t/dialog Title here \n\t\t-- Description here\n\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close\n\t\t\t\t/button Click me to Close"
            },
            {
                "title": "Short syntax (alternative)",
                "code": "/button Open\n\t/dialog \n\t\t# Title here \n\t\t-- Description here\n\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close\n\t\t\t\t/button Click me to Close"
            },
            {
                "title": "Composable syntax",
                "code": "/button Open\n\t/dialog\n\t\t/header\n\t\t\t/title Title here\n\t\t\t/description Description here\n\t\t/content\n\t\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close @asChild \n\t\t\t\t/button %outline Click me to Close"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Drawer",
        "tag": "drawer",
        "description": "Shows a drawer popping from the bottom of the screen",
        "refImplementation": "/button %outline Open Drawer\n\t/drawer \n\t\t/header mx-auto w-full max-w-sm\n\t\t\t/title Move Goal\n\t\t\t/description Set your daily activity goal.\n\t\t/content p-4 pb-0 mx-auto w-full max-w-sm\n\t\t\t/div flex items-center justify-center gap-2\n\t\t\t\t/button %outline h-8 w-8 shrink-0 rounded-full @size=\"icon\"\n\t\t\t\t\t/icon minus size-4\n\t\t\t\t\t/span sr-only Decrease\n\t\t\t\t/div flex-1 text-center\n\t\t\t\t\t/div text-7xl font-bold tracking-tighter 350\n\t\t\t\t\t/div text-[0.70rem] uppercase text-muted-foreground Calories/day\n\t\t\t\t/button %outline h-8 w-8 shrink-0 rounded-full @size=icon\n\t\t\t\t\t/icon plus size-4\n\t\t\t\t\t/span sr-only Increase\n\t\t\t/div mt-3 h-[120px]\n\t\t\t\t/chart %bar [10, 20, 30, 45, 90, 120]\n    /footer mx-auto w-full max-w-sm\n        /button Submit w-full\n        /close w-full @asChild\n            /button %outline Cancel",
        "props": [],
        "subComponents": [
            {
                "name": "DrawerClose",
                "tag": "close",
                "description": "The button used to close the drawer.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DrawerInnerContent",
                "tag": "content",
                "description": "The content container for the drawer.",
                "props": [
                    {
                        "name": "onAnimationEnd",
                        "type": "(open: boolean) => void",
                        "description": "Callback function called when the drawer animation ends."
                    },
                    {
                        "name": "asChild",
                        "type": "boolean",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior."
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Forces the content to be mounted regardless of the drawer state."
                    },
                    {
                        "name": "onOpenAutoFocus",
                        "type": "(event: React.FocusEvent<HTMLDivElement>) => void",
                        "description": "Callback function called when the drawer opens and the content is focused."
                    },
                    {
                        "name": "onCloseAutoFocus",
                        "type": "(event: React.FocusEvent<HTMLDivElement>) => void",
                        "description": "Callback function called when the drawer closes and the content is focused."
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: React.KeyboardEvent<HTMLDivElement>) => void",
                        "description": "Callback function called when the escape key is pressed."
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: React.PointerEvent<HTMLDivElement>) => void",
                        "description": "Callback function called when a pointer down event occurs outside the content."
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: React.PointerEvent<HTMLDivElement>) => void",
                        "description": "Callback function called when a pointer down event occurs outside the content."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DrawerDescription",
                "tag": "description",
                "description": "The description of the drawer.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DrawerFooter",
                "tag": "footer",
                "description": "The footer of the drawer.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DrawerHeader",
                "tag": "header",
                "description": "The header of the drawer",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DrawerHeader",
                "tag": "header",
                "description": "The header of the drawer.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DrawerTitle",
                "tag": "title",
                "description": "The title of the drawer.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/button Open\n\t/drawer Title here \n\t\t-- Description here\n\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close\n\t\t\t\t/button Click me to Close"
            },
            {
                "title": "Short syntax (alternative)",
                "code": "/button Open\n\t/drawer \n\t\t# Title here \n\t\t-- Description here\n\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close\n\t\t\t\t/button Click me to Close"
            },
            {
                "title": "Composable syntax",
                "code": "/button Open\n\t/drawer\n\t\t/header\n\t\t\t/title Title here\n\t\t\t/description Description here\n\t\t/content\n\t\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close @asChild \n\t\t\t\t/button %outline Click me to Close"
            }
        ],
        "sources": [
            "Shadcn",
            "Vaul"
        ]
    },
    {
        "name": "Dropdown Menu",
        "tag": "dropdown-menu",
        "description": "Displays a menu to the user — such as a set of actions or functions — triggered by a button.",
        "refImplementation": "/button Open menu\n\t/dropdown-menu w-56\n\t\t# My account\n\t\t---\n\t\tProfile <Shift + Cmd + P>\n\t\t\t/icon Single user\n\t\tBilling <Cmd + B>\n\t\t\t/icon Credit card\n\t\tSettings <Cmd + S>\n\t\tKeyboard shortcuts <Cmd + K>\n\t\t---\n\t\tTeam\n\t\t\t/icon Multiple users\n\t\tInvite users text-blue-800\n\t\t\t/icon Add a user\n\t\t\tEmail\n\t\t\tMessage \n\t\t\t\t/icon Chat bubble\n\t\t\t---\n\t\t\tMore...\n\t\t\t\t/icon Plus in circle\n\t\tNew Team <Cmd + T>\n\t\t\t/icon Plus\n\t\t---\n\t\tGitHub\n\t\tSupport \n\t\t\t/icon life saving\n\t\tAPI @disabled\n\t\t\t/icon Cloud\n\t\t---\n\t\tLog out <Shift + Cmd + Q>",
        "props": [
            {
                "name": "defaultOpen",
                "type": "boolean",
                "description": "The open state of the dropdown menu when it is initially rendered. Use when you do not need to control its open state.",
                "descriptionMdx": "<span>\n          The open state of the dropdown menu when it is initially rendered. Use\n          when you do not need to control its open state.\n        </span>"
            },
            {
                "name": "open",
                "type": "boolean",
                "description": "The controlled open state of the dropdown menu. Must be used in conjunction with `onOpenChange`.",
                "descriptionMdx": "<span>\n          The controlled open state of the dropdown menu. Must be used in\n          conjunction with <Code>onOpenChange</Code>.\n        </span>"
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the dropdown menu changes.",
                "descriptionMdx": "<span>\n          Event handler called when the open state of the dropdown menu changes.\n        </span>"
            },
            {
                "name": "modal",
                "required": false,
                "type": "boolean",
                "default": "true",
                "description": "The modality of the dropdown menu. When set to `true`, interaction with outside elements will be disabled and only menu content will be visible to screen readers.",
                "descriptionMdx": "<span>\n          The modality of the dropdown menu. When set to <Code>true</Code>,\n          interaction with outside elements will be disabled and only menu\n          content will be visible to screen readers.\n        </span>"
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of submenus when applicable. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of submenus when applicable. If omitted,\n          inherits globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "DropdownMenuContent",
                "tag": "content",
                "description": "The component that pops out when the dropdown menu is open.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "loop",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
                    },
                    {
                        "name": "onCloseAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves to the trigger after closing. It\n          can be prevented by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onFocusOutside",
                        "type": "(event: FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `DropdownMenu.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>DropdownMenu.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "side",
                        "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                        "typeSimple": "enum",
                        "default": "\"bottom\"",
                        "description": "The preferred side of the trigger to render against when open. Will be reversed when collisions occur and `avoidCollisions` is enabled.",
                        "descriptionMdx": "<span>\n          The preferred side of the trigger to render against when open. Will be\n          reversed when collisions occur and <Code>avoidCollisions</Code> is\n          enabled.\n        </span>"
                    },
                    {
                        "name": "sideOffset",
                        "type": "number",
                        "default": "0",
                        "description": "",
                        "descriptionMdx": "<span>The distance in pixels from the trigger.</span>"
                    },
                    {
                        "name": "align",
                        "type": "\"start\" | \"center\" | \"end\"",
                        "typeSimple": "enum",
                        "default": "\"center\"",
                        "description": "The preferred alignment against the trigger. May change when collisions occur.",
                        "descriptionMdx": "<span>\n          The preferred alignment against the trigger. May change when\n          collisions occur.\n        </span>"
                    },
                    {
                        "name": "alignOffset",
                        "type": "number",
                        "default": "0",
                        "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                        "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
                    },
                    {
                        "name": "avoidCollisions",
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
                    },
                    {
                        "name": "collisionBoundary",
                        "type": "Element | null | Array<Element | null>",
                        "typeSimple": "Boundary",
                        "default": "[]",
                        "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                        "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
                    },
                    {
                        "name": "collisionPadding",
                        "type": "number | Partial<Record<Side, number>>",
                        "typeSimple": "number | Padding",
                        "default": "0",
                        "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                        "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
                    },
                    {
                        "name": "arrowPadding",
                        "type": "number",
                        "default": "0",
                        "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                        "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
                    },
                    {
                        "name": "sticky",
                        "type": "\"partial\" | \"always\"",
                        "typeSimple": "enum",
                        "default": "\"partial\"",
                        "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                        "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
                    },
                    {
                        "name": "hideWhenDetached",
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuGroup",
                "tag": "group",
                "description": "Used to group multiple `DropdownMenu.Item`s.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuItem",
                "tag": "item",
                "description": "The component that contains the dropdown menu items.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the dropdown menu from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the dropdown menu from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuLabel",
                "tag": "label",
                "description": "Used to render a label. It won't be focusable using arrow keys.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenu",
                "tag": "menu",
                "description": "Contains all the parts of a dropdown menu.",
                "props": [
                    {
                        "name": "defaultOpen",
                        "type": "boolean",
                        "description": "The open state of the dropdown menu when it is initially rendered. Use when you do not need to control its open state.",
                        "descriptionMdx": "<span>\n          The open state of the dropdown menu when it is initially rendered. Use\n          when you do not need to control its open state.\n        </span>"
                    },
                    {
                        "name": "open",
                        "type": "boolean",
                        "description": "The controlled open state of the dropdown menu. Must be used in conjunction with `onOpenChange`.",
                        "descriptionMdx": "<span>\n          The controlled open state of the dropdown menu. Must be used in\n          conjunction with <Code>onOpenChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onOpenChange",
                        "type": "(open: boolean) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the open state of the dropdown menu changes.",
                        "descriptionMdx": "<span>\n          Event handler called when the open state of the dropdown menu changes.\n        </span>"
                    },
                    {
                        "name": "modal",
                        "required": false,
                        "type": "boolean",
                        "default": "true",
                        "description": "The modality of the dropdown menu. When set to `true`, interaction with outside elements will be disabled and only menu content will be visible to screen readers.",
                        "descriptionMdx": "<span>\n          The modality of the dropdown menu. When set to <Code>true</Code>,\n          interaction with outside elements will be disabled and only menu\n          content will be visible to screen readers.\n        </span>"
                    },
                    {
                        "name": "dir",
                        "required": false,
                        "type": "\"ltr\" | \"rtl\"",
                        "typeSimple": "enum",
                        "description": "The reading direction of submenus when applicable. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                        "descriptionMdx": "<span>\n          The reading direction of submenus when applicable. If omitted,\n          inherits globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuPortal",
                "tag": "portal",
                "description": "When used, portals the content part into the `body`.",
                "props": [
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. If used on this part, it will be inherited by `DropdownMenu.Content` and{' '} `DropdownMenu.SubContent` respectively.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. If used on this\n          part, it will be inherited by <Code>DropdownMenu.Content</Code> and{' '}\n          <Code>DropdownMenu.SubContent</Code> respectively.\n        </span>"
                    },
                    {
                        "name": "container",
                        "type": "HTMLElement",
                        "default": "document.body",
                        "description": "Specify a container element to portal the content into.",
                        "descriptionMdx": "Specify a container element to portal the content into."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuSeparator",
                "tag": "separator",
                "description": "Used to visually separate items in the dropdown menu.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Horizontal",
                        "code": "/vstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %horizontal\n\t/center B size-full"
                    },
                    {
                        "title": "Vertical",
                        "code": "/hstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %vertical\n\t/center B size-full"
                    }
                ],
                "sources": []
            },
            {
                "name": "DropdownMenuShortcut",
                "tag": "shortcut",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuSub",
                "tag": "sub",
                "description": "Contains all the parts of a submenu.",
                "props": [
                    {
                        "name": "defaultOpen",
                        "type": "boolean",
                        "description": "The open state of the submenu when it is initially rendered. Use when you do not need to control its open state.",
                        "descriptionMdx": "<span>\n          The open state of the submenu when it is initially rendered. Use when\n          you do not need to control its open state.\n        </span>"
                    },
                    {
                        "name": "open",
                        "type": "boolean",
                        "description": "The controlled open state of the submenu. Must be used in conjunction with `onOpenChange`.",
                        "descriptionMdx": "<span>\n          The controlled open state of the submenu. Must be used in conjunction\n          with <Code>onOpenChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onOpenChange",
                        "type": "(open: boolean) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the open state of the submenu changes.",
                        "descriptionMdx": "<span>\n          Event handler called when the open state of the submenu changes.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuSubContent",
                "tag": "sub-content",
                "description": "The component that pops out when a submenu is open. Must be rendered inside `DropdownMenu.Sub`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "loop",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onFocusOutside",
                        "type": "(event: FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `DropdownMenu.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>DropdownMenu.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "sideOffset",
                        "type": "number",
                        "default": "0",
                        "description": "",
                        "descriptionMdx": "<span>The distance in pixels from the trigger.</span>"
                    },
                    {
                        "name": "alignOffset",
                        "type": "number",
                        "default": "0",
                        "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                        "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
                    },
                    {
                        "name": "avoidCollisions",
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
                    },
                    {
                        "name": "collisionBoundary",
                        "type": "Element | null | Array<Element | null>",
                        "typeSimple": "Boundary",
                        "default": "[]",
                        "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                        "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
                    },
                    {
                        "name": "collisionPadding",
                        "type": "number | Partial<Record<Side, number>>",
                        "typeSimple": "number | Padding",
                        "default": "0",
                        "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                        "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
                    },
                    {
                        "name": "arrowPadding",
                        "type": "number",
                        "default": "0",
                        "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                        "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
                    },
                    {
                        "name": "sticky",
                        "type": "\"partial\" | \"always\"",
                        "typeSimple": "enum",
                        "default": "\"partial\"",
                        "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                        "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
                    },
                    {
                        "name": "hideWhenDetached",
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuSubTrigger",
                "tag": "sub-trigger",
                "description": "An item that opens a submenu. Must be rendered inside `DropdownMenu.Sub`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "DropdownMenuTrigger",
                "tag": "trigger",
                "description": "The button that toggles the dropdown menu. By default, the `DropdownMenu.Content` will position itself against the trigger.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Font-pair",
        "tag": "font-pair",
        "description": "Add a pre-selected font pair to the theme. Should be use as childen of the theme component.",
        "refImplementation": "/font-pair %amulya-bold_synonym-regular",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "For each",
        "tag": "foreach",
        "description": "A component that iterates over a list of items.",
        "refImplementation": "/hstack gap-3\n\t/foreach [1...10]\n\t\t/center bg-slate-200 size-11 text-slate-700 rounded-lg $item",
        "props": [
            {
                "name": "filter",
                "required": false,
                "type": "string",
                "description": "Applies a filter to the data being iterated over."
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "With static array",
                "code": "/grid gap-2\n\t/foreach [apple, orange, pineapple]\n\t\t/center p-6 bg-slate-200 $item"
            },
            {
                "title": "With static array of objects",
                "code": "/grid gap-2\n\t/foreach [{ name: apple }, { name:orange }, { name: pineapple }]\n\t\t/center p-6 bg-slate-200 $item.name"
            },
            {
                "title": "With static number series",
                "code": "/grid gap-2\n\t/foreach [3...8]\n\t\t/center p-6 bg-slate-200 $item"
            },
            {
                "title": "With dynamic data",
                "code": "/data $movies = mock://A list of movies with title and poster\n/grid gap-2\n\t/foreach $movies\n\t\t/center p-6 bg-slate-200 $item.title"
            }
        ],
        "sources": []
    },
    {
        "name": "Form",
        "tag": "form",
        "description": "A Form component.",
        "refImplementation": "/form\n            # Email\n            [Your email]\n            -- This will help us stay in touch. We don't spam!\n        \n            # Message\n            [> Enter any message here...]\n            -- Come on! You can write anything!\n        \n            <x> Send me important notifications\n            <> Send me marketing emails\n        \n            # What do you prefer?\n            [] Bacon\n            [] Miso soup\n            [] Pizza\n\n            /button Submit @type=submit",
        "props": [],
        "subComponents": [
            {
                "name": "FormControl",
                "tag": "control",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "FormDescription",
                "tag": "description",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "FormField",
                "tag": "field",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "FormField",
                "tag": "item",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "FormLabel",
                "tag": "label",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "FormMessage",
                "tag": "message",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "RadioGroup",
                "tag": "radio-group",
                "props": [],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Short syntax",
                        "code": "/radio-group\n\t() Bacon\n\t() Miso soup\n\t() Pizza"
                    },
                    {
                        "title": "Composable syntax",
                        "code": "/radio-group @defaultValue=bacon @name=foodPreferences\n\t/radio Bacon @value=\"bacon\"\n\t/radio Miso soup @value=\"miso-soup\"\n\t/radio Pizza @value=\"pizza\""
                    }
                ],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/form\n\t# Email\n\t[Your email]\n\t-- This will help us stay in touch. We don't spam!\n\t# Message\n\t[> Enter any message here...]\n\t-- Come on! You can write anything!\n\t<x> Send me important notifications\n\t<> Send me marketing emails\n\t# What do you prefer?\n\t() Bacon\n\t() Miso soup\n\t() Pizza\n\t/button Submit @type=submit"
            },
            {
                "title": "Composable syntax",
                "code": "/form\n\t/field @name=email\n\t\t/label Email\n\t\t/input @placeholder=\"Your email\"\n\t\t/description This will help us stay in touch. We don't spam!\n\t/field @name=message\n\t\t/label Message\n\t\t/textarea Enter any message here...\n\t\t/description Come on! You can write anything!\n\t/field @name=sendImportantNotifications\n\t\t/switch Send me important notifications @defaultValue={true}\n\t/field @name=sendMarketingEmails\n\t\t/switch Send me marketing emails\n\t/field @name=foodPreferences\n\t\t/radio-group\n\t\t\t/radio Bacon @value=\"bacon\"\n\t\t\t/radio Miso soup @value=\"miso-soup\"\n\t\t\t/radio Pizza @value=\"pizza\"\n\t/button @type=submit Submit"
            }
        ],
        "sources": []
    },
    {
        "name": "Grid",
        "tag": "grid",
        "description": "A responsive grid layouts with pre-made column numbers",
        "refImplementation": "/grid %xs gap-4\n    /foreach [1...10]\n        /div bg-slate-200 p-4 text-slate-700 rounded-lg text-center $item",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Heading #1",
        "tag": "h1",
        "description": "Level 1 heading.",
        "refImplementation": "/h1 Hello, world!",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Heading #2",
        "tag": "h2",
        "description": "Level 2 heading.",
        "refImplementation": "/h2 Hello, world!",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Heading #3",
        "tag": "h3",
        "description": "Level 3 heading.",
        "refImplementation": "/h3 Hello, world!",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Hover Card",
        "tag": "hover-card",
        "description": "For sighted users to preview content available behind a link",
        "refImplementation": "/button %link \n      \"@nextjs\"\n      /hover-card w-80\n        /div flex justify-between space-x-4\n          /avatar https://github.com/vercel.png @fallback=\"VC\"\n          /div space-y-1\n            /h4 text-sm font-semibold \"@nextjs\"\n            /p text-sm\n              The React Framework – created and maintained by vercel.\n            /div flex items-center pt-2\n              /icon %lucide calendar-days size-4 opacity-70 mr-2\n              /span text-xs text-muted-foreground Joined December 2021",
        "props": [
            {
                "name": "openDelay",
                "type": "number",
                "default": 700,
                "description": "The duration from when the mouse enters the trigger until the hover card opens.",
                "descriptionMdx": "The duration from when the mouse enters the trigger until the hover card opens."
            },
            {
                "name": "closeDelay",
                "type": "number",
                "default": 300,
                "description": "The duration from when the mouse leaves the trigger or content until the hover card closes.",
                "descriptionMdx": "The duration from when the mouse leaves the trigger or content until the hover card closes."
            },
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "forceMount",
                "type": "boolean",
                "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `HoverCard.Portal`.",
                "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>HoverCard.Portal</Code>.\n        </span>"
            },
            {
                "name": "side",
                "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                "typeSimple": "enum",
                "default": "\"bottom\"",
                "description": "The preferred side of the trigger to render against when open. Will be reversed when collisions occur and `avoidCollisions` is enabled.",
                "descriptionMdx": "<span>\n          The preferred side of the trigger to render against when open. Will be\n          reversed when collisions occur and <Code>avoidCollisions</Code> is\n          enabled.\n        </span>"
            },
            {
                "name": "sideOffset",
                "type": "number",
                "default": "0",
                "description": "",
                "descriptionMdx": "<span>\n          <span>The distance in pixels from the trigger.</span>\n        </span>"
            },
            {
                "name": "align",
                "type": "\"start\" | \"center\" | \"end\"",
                "typeSimple": "enum",
                "default": "\"center\"",
                "description": "The preferred alignment against the trigger. May change when collisions occur.",
                "descriptionMdx": "<span>\n          The preferred alignment against the trigger. May change when\n          collisions occur.\n        </span>"
            },
            {
                "name": "alignOffset",
                "type": "number",
                "default": "0",
                "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
            },
            {
                "name": "avoidCollisions",
                "type": "boolean",
                "default": "true",
                "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
            },
            {
                "name": "collisionBoundary",
                "type": "Element | null | Array<Element | null>",
                "typeSimple": "Boundary",
                "default": "[]",
                "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
            },
            {
                "name": "collisionPadding",
                "type": "number | Partial<Record<Side, number>>",
                "typeSimple": "number | Padding",
                "default": "0",
                "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
            },
            {
                "name": "arrowPadding",
                "type": "number",
                "default": "0",
                "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
            },
            {
                "name": "sticky",
                "type": "\"partial\" | \"always\"",
                "typeSimple": "enum",
                "default": "\"partial\"",
                "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
            },
            {
                "name": "hideWhenDetached",
                "type": "boolean",
                "default": "false",
                "description": "Whether to hide the content when the trigger becomes fully occluded.",
                "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Change position",
                "code": "/center w-full h-52\n\t/button Positions\n\t\t/hover-card %left \n\t\t\tLeft\n\t\t/hover-card %top \n\t\t\tTop\n\t\t/hover-card %right \n\t\t\tRight\n\t\t/hover-card %bottom \n\t\t\tBottom"
            },
            {
                "title": "Change open and close delay",
                "code": "/button Hover me\n\t/hover-card @openDelay=10 @closeDelay=1000\n\t\tI pop and then slow down"
            },
            {
                "title": "Change offset from trigger bounds",
                "code": "/button Hover me\n\t/hover-card %right @sideOffset=50\n\t\tI'm far away"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "HStack",
        "tag": "hstack",
        "description": "A horizontal stack of elements.",
        "refImplementation": "/hstack p-2 gap-2 rounded-xl size-56 border border-slate-300\n\t/center bg-slate-200 w-16 h-full rounded-lg text-slate-700 font-bold A\n\t/center bg-slate-200 w-16 h-full rounded-lg text-slate-700 font-bold B",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Icon",
        "tag": "icon",
        "description": "An icon component that fetches an icon from your favorite asset libraries.",
        "refImplementation": "/icon %lucide calendar days size-8 text-teal-500",
        "props": [],
        "subComponents": [],
        "examples": [
            {
                "title": "Display an icon from one of the connected icon libraries",
                "code": "/icon %lucide Tiger"
            },
            {
                "title": "Add color to the icon",
                "code": "/icon %lucide Plant text-green-500"
            },
            {
                "title": "⚠️ Get an icon by URL",
                "code": "/icon https://www.creativefabrica.com/wp-content/uploads/2022/07/08/1657258262/Golden-Retriever-Surfing-silhouette-580x386.jpg"
            }
        ],
        "sources": []
    },
    {
        "name": "Illustration",
        "tag": "illustration",
        "description": "An illustration component that fetches an illustration from your favorite assets libraries or generates one via AI.",
        "refImplementation": "/illustration %kukla-angle size-8 Calendar",
        "props": [],
        "subComponents": [],
        "examples": [
            {
                "title": "Get an illustration from one of the inegrated libraries",
                "code": "/illustration w-40 %kukla-angle Calendar"
            }
        ],
        "sources": []
    },
    {
        "name": "Image",
        "tag": "image",
        "description": "An image component that fetches an image from the internet or your favorite assets libraries.",
        "refImplementation": "/image %lexica spaceship size-48 rounded-lg",
        "props": [],
        "subComponents": [],
        "examples": [
            {
                "title": "Get an image from unsplash",
                "code": "/image w-40 %unsplash Tiger w-40"
            },
            {
                "title": "Get an image from google",
                "code": "/image w-40 %google Tiger w-40"
            },
            {
                "title": "Get an image by URL",
                "code": "/image w-40 https://w7.pngwing.com/pngs/293/485/png-transparent-tailwind-css-hd-logo.png My image description here"
            },
            {
                "title": "Apply transforms to the image",
                "code": "/image w-40 %google Lion | remove-bg"
            },
            {
                "title": "Create an image with the right aspect ratio",
                "code": "/div w-40\n\t/aspect-ratio %video\n\t\t/image Tiger size-full object-cover"
            },
            {
                "title": "Generate an image via AI",
                "code": "/image w-40 %ai/flat-illustration Calendar"
            },
            {
                "title": "Apply transforms to the illustration",
                "code": "/image w-40 %ai/flat-illustration Calendar | remove-bg | vectorize"
            }
        ],
        "sources": []
    },
    {
        "name": "Image card",
        "tag": "image-card",
        "description": "Card with image or icon",
        "refImplementation": "",
        "props": [],
        "subComponents": [
            {
                "name": "description",
                "tag": "description",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "image",
                "tag": "image",
                "props": [],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Get an image from unsplash",
                        "code": "/image w-40 %unsplash Tiger w-40"
                    },
                    {
                        "title": "Get an image from google",
                        "code": "/image w-40 %google Tiger w-40"
                    },
                    {
                        "title": "Get an image by URL",
                        "code": "/image w-40 https://w7.pngwing.com/pngs/293/485/png-transparent-tailwind-css-hd-logo.png My image description here"
                    },
                    {
                        "title": "Apply transforms to the image",
                        "code": "/image w-40 %google Lion | remove-bg"
                    },
                    {
                        "title": "Create an image with the right aspect ratio",
                        "code": "/div w-40\n\t/aspect-ratio %video\n\t\t/image Tiger size-full object-cover"
                    },
                    {
                        "title": "Generate an image via AI",
                        "code": "/image w-40 %ai/flat-illustration Calendar"
                    },
                    {
                        "title": "Apply transforms to the illustration",
                        "code": "/image w-40 %ai/flat-illustration Calendar | remove-bg | vectorize"
                    }
                ],
                "sources": []
            },
            {
                "name": "title",
                "tag": "title",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": []
    },
    {
        "name": "Input",
        "tag": "input",
        "description": "A form input field",
        "refImplementation": "/input @type=email Enter your email",
        "props": [
            {
                "name": "type",
                "type": "string",
                "default": "text",
                "description": "Specifies the type of input element."
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "A short hint that describes the expected value of the input."
            },
            {
                "name": "value",
                "type": "string | number | readonly string[]",
                "description": "The current value of the input."
            },
            {
                "name": "defaultValue",
                "type": "string | number | readonly string[]",
                "description": "The initial value of the input when the component is first rendered."
            },
            {
                "name": "onValueChange",
                "type": "(value: string, event: ChangeEvent<HTMLInputElement>) => void",
                "description": "Event handler called when the input value changes."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that the input should be disabled."
            },
            {
                "name": "maxLength",
                "type": "number",
                "description": "Specifies the maximum number of characters allowed in the input."
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "description": "Specifies that the input is read-only."
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that the input field must be filled out before submitting the form."
            },
            {
                "name": "autoComplete",
                "type": "string",
                "description": "Specifies if the browser should provide autocompletion for the input."
            },
            {
                "name": "pattern",
                "type": "string",
                "description": "Specifies a regular expression the input's value must match."
            },
            {
                "name": "name",
                "type": "string",
                "description": "Name of the input element."
            },
            {
                "name": "id",
                "type": "string",
                "description": "The unique identifier for the input element."
            },
            {
                "name": "autoFocus",
                "type": "boolean",
                "description": "Specifies that the input should automatically have focus when the page loads."
            },
            {
                "name": "aria-label",
                "type": "string",
                "description": "Defines a string that labels the current element."
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "🔴 Markdown syntax",
                "code": "[Placeholder :: inputType = defaultValue]"
            },
            {
                "title": "Short syntax",
                "code": "/input This is the placeholder @type=\"email\""
            },
            {
                "title": "Complete syntax",
                "code": "/input \n\t@placeholder=\"This is the placeholder\"\n\t@type=\"email\"\n\t@defaultValue=\"severin@creative-robots.ai\""
            },
            {
                "title": "With static value",
                "code": "/input @value=\"This is my value\""
            },
            {
                "title": "Bound to a variable",
                "code": "/vstack gap-4\n\t/input What's your name ? $myNameVariable\n\t/h1 Hello $myNameVariable"
            }
        ],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Keyboard",
        "tag": "kbd",
        "description": "Represents a keyboard key",
        "refImplementation": "/kbd Cmd",
        "props": [],
        "subComponents": [],
        "examples": [
            {
                "title": "With key name parsing",
                "code": "/kbd Cmd + Up"
            },
            {
                "title": "With raw text",
                "code": "/kbd \n\tCmd + Up"
            },
            {
                "title": "Sizes",
                "code": "/hstack gap-2\n\t/kbd %xs Shift S\n\t/kbd %sm Shift S\n\t/kbd %md Shift S\n\t/kbd %lg Shift S\n\t/kbd %xl Shift S"
            }
        ],
        "sources": []
    },
    {
        "name": "Label",
        "tag": "label",
        "description": "Renders an accessible label associated with controls",
        "refImplementation": "/div flex items-center gap-2\n      /checkbox @id=\"terms\"\n      /label @htmlFor=\"terms\" Accept terms and conditions",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "htmlFor",
                "type": "string",
                "description": "The id of the element the label is associated with.",
                "descriptionMdx": "The id of the element the label is associated with."
            }
        ],
        "subComponents": [],
        "examples": [],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "List item card",
        "tag": "list-item-card",
        "description": "Card usable as a list-item",
        "refImplementation": "",
        "props": [],
        "subComponents": [
            {
                "name": "description",
                "tag": "description",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "image",
                "tag": "image",
                "props": [],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Get an image from unsplash",
                        "code": "/image w-40 %unsplash Tiger w-40"
                    },
                    {
                        "title": "Get an image from google",
                        "code": "/image w-40 %google Tiger w-40"
                    },
                    {
                        "title": "Get an image by URL",
                        "code": "/image w-40 https://w7.pngwing.com/pngs/293/485/png-transparent-tailwind-css-hd-logo.png My image description here"
                    },
                    {
                        "title": "Apply transforms to the image",
                        "code": "/image w-40 %google Lion | remove-bg"
                    },
                    {
                        "title": "Create an image with the right aspect ratio",
                        "code": "/div w-40\n\t/aspect-ratio %video\n\t\t/image Tiger size-full object-cover"
                    },
                    {
                        "title": "Generate an image via AI",
                        "code": "/image w-40 %ai/flat-illustration Calendar"
                    },
                    {
                        "title": "Apply transforms to the illustration",
                        "code": "/image w-40 %ai/flat-illustration Calendar | remove-bg | vectorize"
                    }
                ],
                "sources": []
            },
            {
                "name": "title",
                "tag": "title",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": []
    },
    {
        "name": "Logo",
        "tag": "logo",
        "description": "An image component that fetches the logo of a company from the internet.",
        "refImplementation": "/logo Tailwind CSS",
        "props": [],
        "subComponents": [],
        "examples": [
            {
                "title": "Get a company logo via google",
                "code": "/logo netflix"
            },
            {
                "title": "Apply transforms to a logo",
                "code": "/logo netflix | remove-bg"
            }
        ],
        "sources": []
    },
    {
        "name": "Menubar",
        "tag": "menubar",
        "description": "A visually persistent menu common in desktop applications that provides quick access to a consistent set of commands",
        "refImplementation": "/menubar\n\tFile\n\t\tNew Tab <Cmd + T>\n\t\tNew Window <Cmd + N>\n\t\tNew Incognito Window\n\t\t---\n\t\tShare\n\t\t\tEmail link\n\t\t\tMessages\n\t\t\tNotes\n\t\t---\n\t\tPrint... <Cmd + P>\n\tEdit\n\t\tUndo <Cmd + Z>\n\t\tRedo <Shift + Cmd + Z>\n\t\t---\n\t\tFind\n\t\t\tSearch the web\n\t\t\t---\n\t\t\tFind...\n\t\t\tFind Next\n\t\t\tFind Previous\n\t\t---\n\t\tCut\n\t\tCopy\n\t\tPaste\n\tView\n\t\t[ ] Always Show Bookmarks Bar\n\t\t[ ] Always Show Full URLs\n\t\t---\n\t\tReload <Cmd + R>\n\t\tForce Reload <Shift + Cmd + R>\n\t\t---\n\t\tToggle Fullscreen\n\t\t---\n\t\tHide Sidebar\n\tProfiles\n\t\t( ) Andy\n\t\t(x) Benoit\n\t\t( ) Luis\n\t\t---\n\t\tEdit...\n\t\t---\n\t\tAdd Profile...",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultValue",
                "required": false,
                "type": "string",
                "description": "The value of the menu that should be open when initially rendered. Use when you do not need to control the value state.",
                "descriptionMdx": "<span>\n          The value of the menu that should be open when initially rendered. Use\n          when you do not need to control the value state.\n        </span>"
            },
            {
                "name": "value",
                "required": false,
                "type": "string",
                "description": "The controlled value of the menu to open. Should be used in conjunction with `onValueChange`.",
                "descriptionMdx": "<span>\n          The controlled value of the menu to open. Should be used in\n          conjunction with <Code>onValueChange</Code>.\n        </span>"
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "(value: string) => void",
                "typeSimple": "function",
                "description": "Event handler called when the value changes.",
                "descriptionMdx": "Event handler called when the value changes."
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction. If omitted, inherits globally from{' '} `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction. If omitted, inherits globally from{' '}\n          <Code>DirectionProvider</Code> or assumes LTR (left-to-right) reading\n          mode.\n        </span>"
            },
            {
                "name": "loop",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "MenubarCheckboxItem",
                "tag": "checkbox",
                "description": "An item that can be controlled and rendered like a checkbox.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "checked",
                        "type": "boolean | 'indeterminate'",
                        "description": "The controlled checked state of the item. Must be used in conjunction with `onCheckedChange`.",
                        "descriptionMdx": "<span>\n          The controlled checked state of the item. Must be used in conjunction\n          with <Code>onCheckedChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onCheckedChange",
                        "type": "(checked: boolean) => void",
                        "typeSimple": "function",
                        "description": "",
                        "descriptionMdx": "<span>Event handler called when the checked state changes.</span>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the menubar from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the menubar from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Short syntax",
                        "code": "/checkbox Click me if you can @value={true}"
                    },
                    {
                        "title": "Composable syntax",
                        "code": "/checkbox rounded-none border-2 \n\t/indicator text-teal-500\n\t\t/icon %lucide check size-4 @strokeWidth=3"
                    },
                    {
                        "title": "Controlled value",
                        "code": "/hstack gap-2\n\t/checkbox @id=\"checkThisOut\" @value={true}\n\t/label @htmlFor=\"checkThisOut\" Check this out"
                    },
                    {
                        "title": "Bound to a variable",
                        "code": "/vstack\n\t/hstack gap-2 p-3\n\t\t/checkbox @id=\"checkThisOut\" $myVariable\n\t\t/label @htmlFor=\"checkThisOut\" Check this out\n\t/separator %horizontal\n\t/hstack gap-2 p-3\n\t\t/label Value: \n\t\t/pre $myVariable"
                    },
                    {
                        "title": "Disabled",
                        "code": "/hstack gap-2 opacity-70\n\t/checkbox @id=\"checkThisOut\" @disabled\n\t/label @htmlFor=\"checkThisOut\" Check this out"
                    },
                    {
                        "title": "With text",
                        "code": "/label @htmlFor=\"terms1\"\n\t/hstack gap-2 items-start p-2 rounded-md border p-4 shadow\n\t\t/checkbox @id=terms1 peer\n\t\t/div grid gap-1.5 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\n\t\t\t/p text-sm font-medium leading-none\n\t\t\t\tAccept terms and conditions\n\t\t\t/p text-sm text-muted-foreground\n\t\t\t\tYou agree to our Terms of Service and Privacy Policy."
                    },
                    {
                        "title": "Form",
                        "code": "// TODO"
                    }
                ],
                "sources": []
            },
            {
                "name": "MenubarContent",
                "tag": "content",
                "description": "The component that pops out when a menu is open.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "loop",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
                    },
                    {
                        "name": "onCloseAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves to the trigger after closing. It\n          can be prevented by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onFocusOutside",
                        "type": "(event: FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `Menubar.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>Menubar.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "side",
                        "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                        "typeSimple": "enum",
                        "default": "\"bottom\"",
                        "description": "The preferred side of the trigger to render against when open. Will be reversed when collisions occur and `avoidCollisions` is enabled.",
                        "descriptionMdx": "<span>\n          The preferred side of the trigger to render against when open. Will be\n          reversed when collisions occur and <Code>avoidCollisions</Code> is\n          enabled.\n        </span>"
                    },
                    {
                        "name": "sideOffset",
                        "type": "number",
                        "default": "0",
                        "description": "",
                        "descriptionMdx": "<span>The distance in pixels from the trigger.</span>"
                    },
                    {
                        "name": "align",
                        "type": "\"start\" | \"center\" | \"end\"",
                        "typeSimple": "enum",
                        "default": "\"center\"",
                        "description": "The preferred alignment against the trigger. May change when collisions occur.",
                        "descriptionMdx": "<span>\n          The preferred alignment against the trigger. May change when\n          collisions occur.\n        </span>"
                    },
                    {
                        "name": "alignOffset",
                        "type": "number",
                        "default": "0",
                        "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                        "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
                    },
                    {
                        "name": "avoidCollisions",
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
                    },
                    {
                        "name": "collisionBoundary",
                        "type": "Element | null | Array<Element | null>",
                        "typeSimple": "Boundary",
                        "default": "[]",
                        "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                        "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
                    },
                    {
                        "name": "collisionPadding",
                        "type": "number | Partial<Record<Side, number>>",
                        "typeSimple": "number | Padding",
                        "default": "0",
                        "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                        "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
                    },
                    {
                        "name": "arrowPadding",
                        "type": "number",
                        "default": "0",
                        "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                        "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
                    },
                    {
                        "name": "sticky",
                        "type": "\"partial\" | \"always\"",
                        "typeSimple": "enum",
                        "default": "\"partial\"",
                        "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                        "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
                    },
                    {
                        "name": "hideWhenDetached",
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarItem",
                "tag": "item",
                "description": "The component that contains the menubar items.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the menubar from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the menubar from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarMenu",
                "tag": "menu",
                "description": "A top level menu item, contains a trigger with content combination.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "required": false,
                        "type": "string",
                        "description": "A unique value that associates the item with an active value when the navigation menu is controlled. This prop is managed automatically when uncontrolled.",
                        "descriptionMdx": "<span>\n          A unique value that associates the item with an active value when the\n          navigation menu is controlled. This prop is managed automatically when\n          uncontrolled.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarRadioGroup",
                "tag": "radio-group",
                "description": "Used to group multiple `Menubar.RadioItem`s.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "description": "The value of the selected item in the group.",
                        "descriptionMdx": "The value of the selected item in the group."
                    },
                    {
                        "name": "onValueChange",
                        "type": "(value: string) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the value changes.",
                        "descriptionMdx": "Event handler called when the value changes."
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Short syntax",
                        "code": "/radio-group\n\t() Bacon\n\t() Miso soup\n\t() Pizza"
                    },
                    {
                        "title": "Composable syntax",
                        "code": "/radio-group @defaultValue=bacon @name=foodPreferences\n\t/radio Bacon @value=\"bacon\"\n\t/radio Miso soup @value=\"miso-soup\"\n\t/radio Pizza @value=\"pizza\""
                    }
                ],
                "sources": []
            },
            {
                "name": "MenubarRadioItem",
                "tag": "radio-item",
                "description": "An item that can be controlled and rendered like a radio.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "required": true,
                        "description": "The unique value of the item.",
                        "descriptionMdx": "The unique value of the item."
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects an item (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the menubar from closing when selecting that item.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects an item (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the menubar from closing when selecting that item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarSeparator",
                "tag": "separator",
                "description": "Used to visually separate items in a menubar menu.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Horizontal",
                        "code": "/vstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %horizontal\n\t/center B size-full"
                    },
                    {
                        "title": "Vertical",
                        "code": "/hstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %vertical\n\t/center B size-full"
                    }
                ],
                "sources": []
            },
            {
                "name": "MenubarShortcut",
                "tag": "shortcut",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarSub",
                "tag": "sub",
                "description": "Contains all the parts of a submenu.",
                "props": [
                    {
                        "name": "defaultOpen",
                        "type": "boolean",
                        "description": "The open state of the submenu when it is initially rendered. Use when you do not need to control its open state.",
                        "descriptionMdx": "<span>\n          The open state of the submenu when it is initially rendered. Use when\n          you do not need to control its open state.\n        </span>"
                    },
                    {
                        "name": "open",
                        "type": "boolean",
                        "description": "The controlled open state of the submenu. Must be used in conjunction with `onOpenChange`.",
                        "descriptionMdx": "<span>\n          The controlled open state of the submenu. Must be used in conjunction\n          with <Code>onOpenChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onOpenChange",
                        "type": "(open: boolean) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the open state of the submenu changes.",
                        "descriptionMdx": "<span>\n          Event handler called when the open state of the submenu changes.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarSubContent",
                "tag": "sub-content",
                "description": "The component that pops out when a submenu is open. Must be rendered inside `Menubar.Sub`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "loop",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onFocusOutside",
                        "type": "(event: FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `Menubar.Portal`.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>Menubar.Portal</Code>.\n        </span>"
                    },
                    {
                        "name": "sideOffset",
                        "type": "number",
                        "default": "0",
                        "description": "",
                        "descriptionMdx": "<span>The distance in pixels from the trigger.</span>"
                    },
                    {
                        "name": "alignOffset",
                        "type": "number",
                        "default": "0",
                        "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                        "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
                    },
                    {
                        "name": "avoidCollisions",
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
                    },
                    {
                        "name": "collisionBoundary",
                        "type": "Element | null | Array<Element | null>",
                        "typeSimple": "Boundary",
                        "default": "[]",
                        "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                        "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
                    },
                    {
                        "name": "collisionPadding",
                        "type": "number | Partial<Record<Side, number>>",
                        "typeSimple": "number | Padding",
                        "default": "0",
                        "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                        "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
                    },
                    {
                        "name": "arrowPadding",
                        "type": "number",
                        "default": "0",
                        "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                        "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
                    },
                    {
                        "name": "sticky",
                        "type": "\"partial\" | \"always\"",
                        "typeSimple": "enum",
                        "default": "\"partial\"",
                        "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                        "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
                    },
                    {
                        "name": "hideWhenDetached",
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether to hide the content when the trigger becomes fully occluded.",
                        "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarSubTrigger",
                "tag": "sub-trigger",
                "description": "An item that opens a submenu. Must be rendered inside `Menubar.Sub`.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the item. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the item. Use this\n          when the content is complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "MenubarTrigger",
                "tag": "trigger",
                "description": "The button that toggles the content. By default, the `Menubar.Content` will position itself against the trigger.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/menubar\n\tFile\n\t\tNew Tab <Cmd + T>\n\t\tNew Window <Cmd + N>\n\t\tNew Incognito Window\n\t\t---\n\t\tShare\n\t\t\tEmail link\n\t\t\tMessages\n\t\t\tNotes\n\t\t---\n\t\tPrint... <Cmd + P>\n\tEdit\n\t\tUndo <Cmd + Z>\n\t\tRedo <Shift + Cmd + Z>\n\t\t---\n\t\tFind\n\t\t\tSearch the web\n\t\t\t---\n\t\t\tFind...\n\t\t\tFind Next\n\t\t\tFind Previous\n\t\t---\n\t\tCut\n\t\tCopy\n\t\tPaste\n\tView\n\t\t[ ] Always Show Bookmarks Bar\n\t\t[ ] Always Show Full URLs\n\t\t---\n\t\tReload <Cmd + R>\n\t\tForce Reload <Shift + Cmd + R>\n\t\t---\n\t\tToggle Fullscreen\n\t\t---\n\t\tHide Sidebar\n\tProfiles\n\t\t( ) Andy\n\t\t(x) Benoit\n\t\t( ) Luis\n\t\t---\n\t\tEdit...\n\t\t---\n\t\tAdd Profile..."
            },
            {
                "title": "Composable syntax",
                "code": "/menubar\n\t/menu \n\t\t/trigger File\n\t\t/content \n\t\t\t/item\n\t\t\t\tNew Tab\n\t\t\t\t/shortcut ⌘T\n\t\t\t/item\n\t\t\t\tNew Window \n\t\t\t\t/shortcut ⌘N\n\t\t\t/item New Incognito Window\n\t\t\t/separator\n\t\t\t/sub\n\t\t\t\t/sub-trigger \n\t\t\t\t\tShare\n\t\t\t\t/sub-content\n\t\t\t\t\t/item Email link\n\t\t\t\t\t/item Messages\n\t\t\t\t\t/item Notes\n\t\t\t/separator\n\t\t\t/item \n\t\t\t\tPrint...\n\t\t\t\t/shortcut ⌘P\n\t/menu \n\t\t/trigger Edit\n\t\t/content \n\t\t\t/item\n\t\t\t\tUndo\n\t\t\t\t/shortcut ⌘Z\n\t\t\t/item\n\t\t\t\tRedo \n\t\t\t\t/shortcut ⇧⌘Z\n\t\t\t/separator\n\t\t\t/sub\n\t\t\t\t/sub-trigger \n\t\t\t\t\tFind\n\t\t\t\t/sub-content\n\t\t\t\t\t/item Search the web\n\t\t\t\t\t/separator\n\t\t\t\t\t/item Find...\n\t\t\t\t\t/item Find Next\n\t\t\t\t\t/item Find Previous\n\t\t\t/separator\n\t\t\t/item \n\t\t\t\tCut\n\t\t\t/item \n\t\t\t\tCopy\n\t\t\t/item \n\t\t\t\tPaste\n\t/menu \n\t\t/trigger View\n\t\t/content \n\t\t\t/checkbox @value={true}\n\t\t\t\tAlways Show Bookmarks Bar\n\t\t\t/checkbox\n\t\t\t\tAlways Show Full URLs\n\t\t\t/separator \n\t\t\t/item \n\t\t\t\tReload\n\t\t\t\t/shortcut ⌘R\n\t\t\t/item \n\t\t\t\tForce Reload\n\t\t\t\t/shortcut ⇧⌘R\n\t\t\t/separator \n\t\t\t/item \n\t\t\t\tToggle Fullscreen\n\t\t\t/separator \n\t\t\t/item \n\t\t\t\tHide Sidebar\n\t/menu \n\t\t/trigger Profiles\n\t\t/content \n\t\t\t/radio-group @value=\"Benoit\"\n\t\t\t\t/radio-item @value=\"Andy\"\n\t\t\t\t\tAndy\n\t\t\t\t/radio-item @value=\"Benoit\"\n\t\t\t\t\tBenoit\n\t\t\t\t/radio-item @value=\"Luis\"\n\t\t\t\t\tLuis\n\t\t\t/separator \n\t\t\t/item \n\t\t\t\tEdit...\n\t\t\t/separator \n\t\t\t/item \n\t\t\t\tAdd Profile..."
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Metric card",
        "tag": "metric-card",
        "description": "Card displaying a metric",
        "refImplementation": "",
        "props": [],
        "subComponents": [
            {
                "name": "description",
                "tag": "description",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "title",
                "tag": "title",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": []
    },
    {
        "name": "Navigation Menu",
        "tag": "navigation-menu",
        "description": "A collection of links for navigating websites.",
        "refImplementation": "/navigation-menu\n    Getting started lg:grid-cols-[.75fr_1fr]\n        /list-item row-span-3 size-full rounded-md justify-end flex flex-col bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none hover:bg-transparent focus:shadow-md cursor-pointer @href=#/list-item\n            /div text-slate-900 flex flex-col justify-end h-full\n                /icon logo h-6 w-6\n                /div mb-2 mt-4 text-lg font-medium \n                    shadcn/ui\n                /p text-sm leading-tight text-slate-700\n                    Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.\n        Introduction\n            Re-usable components built using Radix UI and Tailwind CSS.\n        Installation @href=#/docs/installation\n            How to install dependencies and structure your app. \n        Typography @href=#/docs/primitives/typography\n            Styles for headings, paragraphs, lists...etc   \n    Components\n          Alert Dialog\n              @href=#/docs/primitives/alert-dialog\n              @description=\"A modal dialog that interrupts the user with important content and expects a response.\"\n          Hover Card\n              @href=#/docs/primitives/hover-card\n              @description=\"For sighted users to preview content available behind a link.\"\n          Progress\n              @href=#/docs/primitives/progress\n              @description=\"Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.\"\n          Scroll-area\n              @href=#/docs/primitives/scroll-area\n              @description=\"Visually or semantically separates content.\"\n          Tabs\n              @href=#/docs/primitives/tabs\n              @description=\"A set of layered sections of content—known as tab panels—that are displayed one at a time.\"\n          Tooltip\n              @href=#/docs/primitives/tooltip\n              @description=\"A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\"\n    Documentation @href=\"#/docs\"",
        "props": [
            {
                "name": "defaultValue",
                "required": false,
                "type": "string",
                "description": "The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state.",
                "descriptionMdx": "The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state."
            },
            {
                "name": "value",
                "required": false,
                "type": "string",
                "description": "The controlled value of the menu item to activate. Should be used in conjunction with `onValueChange`.",
                "descriptionMdx": "<span>\n          The controlled value of the menu item to activate. Should be used in\n          conjunction with <Code>onValueChange</Code>.\n        </span>"
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "(value: string) => void",
                "typeSimple": "function",
                "description": "Event handler called when the value changes.",
                "descriptionMdx": "Event handler called when the value changes."
            },
            {
                "name": "delayDuration",
                "type": "number",
                "default": 200,
                "description": "The duration from when the mouse enters a trigger until the content opens.",
                "descriptionMdx": "The duration from when the mouse enters a trigger until the content opens."
            },
            {
                "name": "skipDelayDuration",
                "type": "number",
                "default": 300,
                "description": "How much time a user has to enter another trigger without incurring a delay again.",
                "descriptionMdx": "How much time a user has to enter another trigger without incurring a delay again."
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of the menu when applicable. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of the menu when applicable. If omitted,\n          inherits globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
            },
            {
                "name": "orientation",
                "required": false,
                "type": "\"horizontal\" | \"vertical\"",
                "typeSimple": "enum",
                "default": "\"horizontal\"",
                "description": "The orientation of the menu.",
                "descriptionMdx": "The orientation of the menu."
            }
        ],
        "subComponents": [
            {
                "name": "NavigationMenuContent",
                "tag": "content",
                "description": "Contains the content associated with each trigger.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onFocusOutside",
                        "type": "(event: FocusOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onInteractOutside",
                        "type": "(event: React.FocusEvent | MouseEvent | TouchEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ListItemDescription",
                "tag": "description",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "NavigationMenuItem",
                "tag": "item",
                "description": "A top level menu item, contains a link or trigger with content combination.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "required": false,
                        "type": "string",
                        "description": "A unique value that associates the item with an active value when the navigation menu is controlled. This prop is managed automatically when uncontrolled.",
                        "descriptionMdx": "<span>\n          A unique value that associates the item with an active value when the\n          navigation menu is controlled. This prop is managed automatically when\n          uncontrolled.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "NavigationMenuLink",
                "tag": "link",
                "description": "A navigational link.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "active",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Used to identify the link as the currently active page.",
                        "descriptionMdx": "Used to identify the link as the currently active page."
                    },
                    {
                        "name": "onSelect",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the user selects a link (via mouse or keyboard). Calling `event.preventDefault` in this handler will prevent the navigation menu from closing when selecting that link.",
                        "descriptionMdx": "<span>\n          Event handler called when the user selects a link (via mouse or\n          keyboard). Calling <Code>event.preventDefault</Code> in this handler\n          will prevent the navigation menu from closing when selecting that\n          link.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "NavigationMenuList",
                "tag": "list",
                "description": "Contains the top level menu items.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "NavigationMenuListItem",
                "tag": "list-item",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "NavigationMenu",
                "tag": "menu",
                "description": "Contains all the parts of a navigation menu.",
                "props": [
                    {
                        "name": "defaultValue",
                        "required": false,
                        "type": "string",
                        "description": "The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state.",
                        "descriptionMdx": "The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state."
                    },
                    {
                        "name": "value",
                        "required": false,
                        "type": "string",
                        "description": "The controlled value of the menu item to activate. Should be used in conjunction with `onValueChange`.",
                        "descriptionMdx": "<span>\n          The controlled value of the menu item to activate. Should be used in\n          conjunction with <Code>onValueChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onValueChange",
                        "required": false,
                        "type": "(value: string) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the value changes.",
                        "descriptionMdx": "Event handler called when the value changes."
                    },
                    {
                        "name": "delayDuration",
                        "type": "number",
                        "default": 200,
                        "description": "The duration from when the mouse enters a trigger until the content opens.",
                        "descriptionMdx": "The duration from when the mouse enters a trigger until the content opens."
                    },
                    {
                        "name": "skipDelayDuration",
                        "type": "number",
                        "default": 300,
                        "description": "How much time a user has to enter another trigger without incurring a delay again.",
                        "descriptionMdx": "How much time a user has to enter another trigger without incurring a delay again."
                    },
                    {
                        "name": "dir",
                        "required": false,
                        "type": "\"ltr\" | \"rtl\"",
                        "typeSimple": "enum",
                        "description": "The reading direction of the menu when applicable. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                        "descriptionMdx": "<span>\n          The reading direction of the menu when applicable. If omitted,\n          inherits globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
                    },
                    {
                        "name": "orientation",
                        "required": false,
                        "type": "\"horizontal\" | \"vertical\"",
                        "typeSimple": "enum",
                        "default": "\"horizontal\"",
                        "description": "The orientation of the menu.",
                        "descriptionMdx": "The orientation of the menu."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "RadixNavigationMenu.Sub",
                "tag": "sub",
                "description": "Signifies a submenu. Use it in place of the root part when nested to create a submenu.",
                "props": [
                    {
                        "name": "defaultValue",
                        "required": false,
                        "type": "string",
                        "description": "The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state.",
                        "descriptionMdx": "The value of the menu item that should be active when initially rendered. Use when you do not need to control the value state."
                    },
                    {
                        "name": "value",
                        "required": false,
                        "type": "string",
                        "description": "The controlled value of the sub menu item to activate. Should be used in conjunction with `onValueChange`.",
                        "descriptionMdx": "<span>\n          The controlled value of the sub menu item to activate. Should be used\n          in conjunction with <Code>onValueChange</Code>.\n        </span>"
                    },
                    {
                        "name": "onValueChange",
                        "required": false,
                        "type": "(value: string) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the value changes.",
                        "descriptionMdx": "Event handler called when the value changes."
                    },
                    {
                        "name": "orientation",
                        "required": false,
                        "type": "\"horizontal\" | \"vertical\"",
                        "typeSimple": "enum",
                        "default": "\"horizontal\"",
                        "description": "The orientation of the menu.",
                        "descriptionMdx": "The orientation of the menu."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ListItemTitle",
                "tag": "title",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "NavigationMenuTrigger",
                "tag": "trigger",
                "description": "The button that toggles the content.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Page",
        "tag": "page",
        "description": "Creates a page for your app",
        "refImplementation": "/button %link @to=\"about\" Open about page\n\t\t/page /about About page\n\t\t\t\t/div grid gap-4\n\t\t\t\t\t\t/h1 font-bold text-3xl \n\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t/p text-lg text-muted-foreground\n\t\t\t\t\t\t\tWelcome to the about page.\n\t\t\t\t\t\t/button %outline @to=\"/\" w-fit\n\t\t\t\t\t\t\t/icon chevron-left\n\t\t\t\t\t\t\tGo back",
        "props": [
            {
                "name": "path",
                "type": "string",
                "description": "Defines the URL path for the page."
            },
            {
                "name": "title",
                "type": "string",
                "description": "Specifies the title of the page."
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/page /about About page\n\tThis is the about page contents"
            },
            {
                "title": "Props-based syntax",
                "code": "/page @title=\"About page\" @path=\"/about\"\n\tThis is the about page contents"
            }
        ],
        "sources": []
    },
    {
        "name": "Pagination",
        "tag": "pagination",
        "description": "Pagination with page navigation, next and previous links.",
        "refImplementation": "/pagination 3 / 10",
        "props": [
            {
                "name": "currentPage",
                "type": "number",
                "description": "The current active page number in the pagination.",
                "required": false
            },
            {
                "name": "totalPages",
                "type": "number | null",
                "description": "The total number of pages. If null, the pagination is displayed without an end.",
                "required": false
            },
            {
                "name": "generatePageUrl",
                "type": "function",
                "description": "Function to generate the URL for each page number.",
                "required": false
            },
            {
                "name": "onPageChange",
                "type": "function",
                "description": "Callback function that gets called when the page changes.",
                "required": false
            },
            {
                "name": "redirectTo",
                "type": "string",
                "description": "URL template for redirecting to a specific page number. Use '{page}' as a placeholder for the page number.",
                "required": false
            }
        ],
        "subComponents": [
            {
                "name": "PaginationEllipsis",
                "tag": "ellipsis",
                "description": "An ellipsis indicating more pages in the pagination sequence.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "PaginationItem",
                "tag": "item",
                "description": "A single item in the pagination, which can be a page link, next/previous button, or ellipsis.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "PaginationLink",
                "tag": "link",
                "description": "A link to a specific page in the pagination.",
                "props": [
                    {
                        "name": "isActive",
                        "type": "boolean",
                        "description": "Indicates if the link is for the current active page.",
                        "required": false
                    },
                    {
                        "name": "size",
                        "type": "string",
                        "description": "The size of the pagination link. Defaults to 'icon'.",
                        "required": false
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "PaginationNext",
                "tag": "next",
                "description": "The button for navigating to the next page.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "PaginationPrevious",
                "tag": "previous",
                "description": "The button for navigating to the previous page.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/pagination 3"
            },
            {
                "title": "Short syntax, with total pages",
                "code": "/pagination 3 / 10"
            },
            {
                "title": "Props-based syntax",
                "code": "/pagination\n\t@currentPage=3\n\t@totalPages=10"
            },
            {
                "title": "With redirect URL template",
                "code": "/pagination\n\t@currentPage=3\n\t@totalPages=10\n\t@redirectTo=\"/some/path/{page}\""
            },
            {
                "title": "With redirect URL generation function",
                "code": "/pagination\n\t@currentPage=3\n\t@totalPages=10\n\t@generatePageUrl={(pageNumber) => ('/some/path/' + pageNumber)}"
            },
            {
                "title": "With JS click handler",
                "code": "/pagination 3 / 10\n\t@onPageChange={(pageNumber) => alert('Visiting page: /some/path/' + pageNumber)}"
            },
            {
                "title": "Bound to a variable",
                "code": "/pagination $items"
            },
            {
                "title": "Composable syntax",
                "code": "/pagination\n\t/item \n\t\t/previous @disabled\n\t/item \n\t\t/link @href=\"#/pages/1\"\n\t\t\t1\n\t/item \n\t\t/elipsis \n\t/item @isActive\n\t\t/link @href=\"#/pages/4\"\n\t/item \n\t\t/elipsis \n\t/item \n\t\t/next @href=\"#/pages/5\""
            }
        ],
        "sources": []
    },
    {
        "name": "Popover",
        "tag": "popover",
        "description": "Displays rich content in a portal, triggered by the parent button or link",
        "refImplementation": "/button Click to open popover\n\t\t/popover\n\t\t\t/div grid gap-4\n\t\t\t\t/div space-y-2\n\t\t\t\t\t/h4 font-medium leading-none Dimensions\n\t\t\t\t\t/p text-sm text-muted-foreground\n\t\t\t\t\t\tSet the dimensions for the layer.\n\t\t\t\t/div grid gap-2\n\t\t\t\t\t/div grid grid-cols-3 items-center gap-4\n\t\t\t\t\t\t/label Width\n\t\t\t\t\t\t/input @defaultValue=\"100%\" col-span-2 h-8\n\t\t\t\t\t/div grid grid-cols-3 items-center gap-4\n\t\t\t\t\t\t/label Max. width\n\t\t\t\t\t\t/input @defaultValue=\"300px\" col-span-2 h-8\n\t\t\t\t\t/div grid grid-cols-3 items-center gap-4\n\t\t\t\t\t\t/label Height\n\t\t\t\t\t\t/input @defaultValue=\"25px\" col-span-2 h-8\n\t\t\t\t\t/div grid grid-cols-3 items-center gap-4\n\t\t\t\t\t\t/label Max. height\n\t\t\t\t\t\t/input @defaultValue=\"none\" col-span-2 h-8",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "onOpenAutoFocus",
                "type": "(event: Event) => void",
                "typeSimple": "function",
                "description": "Event handler called when focus moves into the component after opening. It can be prevented by calling{' '} `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when focus moves into the component after\n          opening. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "onCloseAutoFocus",
                "type": "(event: Event) => void",
                "typeSimple": "function",
                "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when focus moves to the trigger after closing. It\n          can be prevented by calling <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "onEscapeKeyDown",
                "type": "(event: KeyboardEvent) => void",
                "typeSimple": "function",
                "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "onPointerDownOutside",
                "type": "(event: PointerDownOutsideEvent) => void",
                "typeSimple": "function",
                "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "onFocusOutside",
                "type": "(event: FocusOutsideEvent) => void",
                "typeSimple": "function",
                "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when focus moves outside the bounds of the\n          component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "onInteractOutside",
                "type": "(event: PointerDownOutsideEvent | FocusOutsideEvent) => void",
                "typeSimple": "function",
                "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when an interaction (pointer or focus event)\n          happens outside the bounds of the component. It can be prevented by\n          calling <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "forceMount",
                "type": "boolean",
                "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `Popover.Portal`.",
                "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>Popover.Portal</Code>.\n        </span>"
            },
            {
                "name": "side",
                "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                "typeSimple": "enum",
                "default": "\"bottom\"",
                "description": "The preferred side of the anchor to render against when open. Will be reversed when collisions occur and `avoidCollisions` is enabled.",
                "descriptionMdx": "<span>\n          The preferred side of the anchor to render against when open. Will be\n          reversed when collisions occur and <Code>avoidCollisions</Code> is\n          enabled.\n        </span>"
            },
            {
                "name": "sideOffset",
                "type": "number",
                "default": "0",
                "description": "",
                "descriptionMdx": "<span>The distance in pixels from the anchor.</span>"
            },
            {
                "name": "align",
                "type": "\"start\" | \"center\" | \"end\"",
                "typeSimple": "enum",
                "default": "\"center\"",
                "description": "The preferred alignment against the anchor. May change when collisions occur.",
                "descriptionMdx": "<span>\n          The preferred alignment against the anchor. May change when collisions\n          occur.\n        </span>"
            },
            {
                "name": "alignOffset",
                "type": "number",
                "default": "0",
                "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
            },
            {
                "name": "avoidCollisions",
                "type": "boolean",
                "default": "true",
                "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
            },
            {
                "name": "collisionBoundary",
                "type": "Element | null | Array<Element | null>",
                "typeSimple": "Boundary",
                "default": "[]",
                "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
            },
            {
                "name": "collisionPadding",
                "type": "number | Partial<Record<Side, number>>",
                "typeSimple": "number | Padding",
                "default": "0",
                "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
            },
            {
                "name": "arrowPadding",
                "type": "number",
                "default": "0",
                "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
            },
            {
                "name": "sticky",
                "type": "\"partial\" | \"always\"",
                "typeSimple": "enum",
                "default": "\"partial\"",
                "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
            },
            {
                "name": "hideWhenDetached",
                "type": "boolean",
                "default": "false",
                "description": "Whether to hide the content when the trigger becomes fully occluded.",
                "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Change position",
                "code": "/center w-full h-52 gap-2 p-4\n\t/button Left\n\t\t/popover %left \n\t\t\tLeft\n\t/button Top\n\t\t/popover %top \n\t\t\tTop\n\t/button Right\n\t\t/popover %right \n\t\t\tRight\n\t/button Bottom\n\t\t/popover %bottom \n\t\t\tBottom"
            },
            {
                "title": "Change offset from trigger bounds",
                "code": "/button Click me\n\t/popover @side=right @sideOffset=50\n\t\tI'm far away"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Progress bar",
        "tag": "progress",
        "description": "An indicator showing the completion progress of a task",
        "refImplementation": "/progress 30 w-[60%]",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "value",
                "type": "number | null",
                "description": "The progress value.",
                "descriptionMdx": "The progress value."
            },
            {
                "name": "max",
                "type": "number",
                "description": "The maximum progress value.",
                "descriptionMdx": "The maximum progress value."
            },
            {
                "name": "getValueLabel",
                "type": "(value: number, max: number) => string",
                "typeSimple": "function",
                "description": "A function to get the accessible label text representing the current value in a human-readable format. If not provided, the value label will be read as the numeric value as a percentage of the max value.",
                "descriptionMdx": "A function to get the accessible label text representing the current value in a human-readable format. If not provided, the value label will be read as the numeric value as a percentage of the max value."
            }
        ],
        "subComponents": [
            {
                "name": "ProgressIndicator",
                "tag": "indicator",
                "description": "Used to show the progress visually. It also makes progress accessible to assistive technologies.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/progress 30"
            },
            {
                "title": "Composable syntax",
                "code": "/progress @value={30} bg-blue-100\n\t/indicator bg-pink-300 rounded-lg"
            },
            {
                "title": "Bound to variable",
                "code": "/vstack\n\t/input $myVariable\n\t/progress $myVariable"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Radio",
        "tag": "radio",
        "description": "A radio item.",
        "refImplementation": "/radio Vegan\n/radio Vegetarian\n/radio Omnivore",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value given as data when submitted with a `name`.",
                "descriptionMdx": "<span>\n          The value given as data when submitted with a <Code>name</Code>.\n        </span>"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "When `true`, prevents the user from interacting with the radio item.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          radio item.\n        </span>"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "When `true`, indicates that the user must check the radio item before the owning form can be submitted.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, indicates that the user must check the radio\n          item before the owning form can be submitted.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Radio block",
        "tag": "radio-block-item",
        "description": "Clickable block serving as a radio group option",
        "refImplementation": "",
        "props": [],
        "subComponents": [
            {
                "name": "description",
                "tag": "description",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "title",
                "tag": "title",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": []
    },
    {
        "name": "Radio Group",
        "tag": "radio-group",
        "description": "A radio group.",
        "refImplementation": "/radio-group @defaultValue=vegan\n      /radio Vegan\n      /radio Vegetarian\n      /radio Omnivore",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultValue",
                "type": "string",
                "description": "The value of the radio item that should be checked when initially rendered. Use when you do not need to control the state of the radio items.",
                "descriptionMdx": "The value of the radio item that should be checked when initially rendered. Use when you do not need to control the state of the radio items."
            },
            {
                "name": "value",
                "type": "string",
                "description": "The controlled value of the radio item to check. Should be used in conjunction with `onValueChange`.",
                "descriptionMdx": "<span>\n          The controlled value of the radio item to check. Should be used in\n          conjunction with <Code>onValueChange</Code>.\n        </span>"
            },
            {
                "name": "onValueChange",
                "type": "(value: string) => void",
                "typeSimple": "function",
                "description": "Event handler called when the value changes.",
                "descriptionMdx": "Event handler called when the value changes."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "When `true`, prevents the user from interacting with radio items.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with radio\n          items.\n        </span>"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the group. Submitted with its owning form as part of a name/value pair.",
                "descriptionMdx": "The name of the group. Submitted with its owning form as part of a name/value pair."
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "When `true`, indicates that the user must check a radio item before the owning form can be submitted.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, indicates that the user must check a radio\n          item before the owning form can be submitted.\n        </span>"
            },
            {
                "name": "orientation",
                "required": false,
                "type": "\"horizontal\" | \"vertical\" | undefined",
                "typeSimple": "enum",
                "default": "undefined",
                "description": "The orientation of the component.",
                "descriptionMdx": "The orientation of the component."
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of the radio group. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of the radio group. If omitted, inherits\n          globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
            },
            {
                "name": "loop",
                "required": false,
                "type": "boolean",
                "default": "true",
                "description": "When `true`, keyboard navigation will loop from last item to first, and vice versa.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last item\n          to first, and vice versa.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/radio-group\n\t() Bacon\n\t() Miso soup\n\t() Pizza"
            },
            {
                "title": "Composable syntax",
                "code": "/radio-group @defaultValue=bacon @name=foodPreferences\n\t/radio Bacon @value=\"bacon\"\n\t/radio Miso soup @value=\"miso-soup\"\n\t/radio Pizza @value=\"pizza\""
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Resizable",
        "tag": "resizable",
        "description": "Accessible resizable panel groups and layouts with keyboard support.",
        "refImplementation": "/resizable @withHandle 25\n      /center size-full text-2xl font-semibold gap-5\n          1\n          /span text-sm text-slate-400 font-light defaultWidth: 25%\n      /resizable %vertical @withHandle 80 | 10,20,50\n          /center size-full text-2xl font-semibold gap-5\n              2\n              /span text-sm text-slate-400 font-light defaultHeight: 80%\n          /center size-full text-2xl font-semibold gap-5\n              3\n              /vstack\n                  /span text-sm text-slate-400 font-light minHeight: 10%\n                  /span text-sm text-slate-400 font-light defaultHeight: 20%\n                  /span text-sm text-slate-400 font-light maxHeight: 50%",
        "props": [
            {
                "name": "autoSaveId",
                "type": "string",
                "description": "Unique id used to auto-save group arrangement via localStorage.",
                "required": false
            },
            {
                "name": "direction",
                "type": "\"horizontal\" | \"vertical\"",
                "description": "Group orientation.",
                "required": true
            },
            {
                "name": "id",
                "type": "string",
                "description": "Group id; falls back to useId when not provided.",
                "required": false
            },
            {
                "name": "onLayout",
                "type": "(sizes: number[]) => void",
                "description": "Called when group layout changes.",
                "required": false
            },
            {
                "name": "tagName",
                "type": "string",
                "default": "div",
                "description": "HTML element tag name for root element.",
                "required": false
            },
            {
                "name": "withHandle",
                "type": "boolean",
                "description": "Enable or disable the display of resize handles between panels.",
                "required": false
            }
        ],
        "subComponents": [
            {
                "name": "ResizableHandle",
                "tag": "handle",
                "description": "A handle component for resizing panels within a panel group.",
                "props": [
                    {
                        "name": "hitAreaMargins",
                        "type": "{ coarse: number, fine: number }",
                        "default": "{ coarse: 15, fine: 5 }",
                        "description": "Allow this much margin when determining resizable handle hit detection.",
                        "required": false
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "Disable drag handle.",
                        "required": false
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "description": "Resize handle id (unique within group); falls back to useId when not provided.",
                        "required": false
                    },
                    {
                        "name": "onDragging",
                        "type": "(isDragging: boolean) => void",
                        "description": "Called when the group layout changes.",
                        "required": false
                    },
                    {
                        "name": "tagName",
                        "type": "string",
                        "default": "div",
                        "description": "HTML element tag name for root element.",
                        "required": false
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ResizablePanel",
                "tag": "panel",
                "description": "A resizable panel within the panel group.",
                "props": [
                    {
                        "name": "collapsedSize",
                        "type": "number",
                        "default": 0,
                        "description": "Panel should collapse to this size.",
                        "required": false
                    },
                    {
                        "name": "collapsible",
                        "type": "boolean",
                        "default": false,
                        "description": "Panel should collapse when resized beyond its minSize.",
                        "required": false
                    },
                    {
                        "name": "defaultSize",
                        "type": "number",
                        "description": "Initial size of panel (numeric value between 1-100).",
                        "required": false
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "description": "Panel id (unique within group); falls back to useId when not provided.",
                        "required": false
                    },
                    {
                        "name": "maxSize",
                        "type": "number",
                        "default": 100,
                        "description": "Maximum allowable size of panel (numeric value between 1-100); defaults to 100.",
                        "required": false
                    },
                    {
                        "name": "minSize",
                        "type": "number",
                        "default": 10,
                        "description": "Minimum allowable size of panel (numeric value between 1-100); defaults to 10.",
                        "required": false
                    },
                    {
                        "name": "onCollapse",
                        "type": "() => void",
                        "description": "Called when panel is collapsed.",
                        "required": false
                    },
                    {
                        "name": "onExpand",
                        "type": "() => void",
                        "description": "Called when panel is expanded.",
                        "required": false
                    },
                    {
                        "name": "onResize",
                        "type": "(size: number) => void",
                        "description": "Called when panel is resized; size parameter is a numeric value between 1-100.",
                        "required": false
                    },
                    {
                        "name": "order",
                        "type": "number",
                        "description": "Order of panel within group; required for groups with conditionally rendered panels.",
                        "required": false
                    },
                    {
                        "name": "tagName",
                        "type": "string",
                        "default": "div",
                        "description": "HTML element tag name for root element.",
                        "required": false
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Horizontal split",
                "code": "/resizable"
            },
            {
                "title": "Vertical split",
                "code": "/resizable %vertical\n\t/center A size-full\n\t/center B size-full"
            },
            {
                "title": "With handle",
                "code": "/resizable @withHandle\n\t/center A size-full\n\t/center B size-full"
            },
            {
                "title": "Defining default size of first panels",
                "code": "/resizable 25\n\t/center A size-full\n\t/center B size-full"
            },
            {
                "title": "Defining size of all panels",
                "code": "/resizable 25 | 75\n\t/center A size-full\n\t/center B size-full"
            },
            {
                "title": "Defining min, default, max sizes of panels",
                "code": "/resizable 25,50,80 | 20,75,75\n\t/center A size-full\n\t/center B size-full"
            },
            {
                "title": "Nesting panels",
                "code": "/resizable\n\t/center A size-full\n\t/resizable %vertical\n\t\t/center B size-full\n\t\t/center C size-full"
            },
            {
                "title": "🔴 Collapsable panels"
            },
            {
                "title": "Composable syntax"
            }
        ],
        "sources": [
            "Shadcn",
            "ReactResizablePanels"
        ]
    },
    {
        "name": "Scroll-area",
        "tag": "scroll-area",
        "description": "Augments native scroll functionality for custom, cross-browser styling.",
        "refImplementation": "/scroll h-72 w-48 rounded-md border gap-2 p-2\n    /foreach [1...1042]\n        /center p-4 bg-slate-100 w-full rounded $item",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "type",
                "type": "\"auto\" | \"always\" | \"scroll\" | \"hover\"",
                "typeSimple": "enum",
                "default": "\"hover\"",
                "description": "Describes the nature of scrollbar visibility, similar to how the scrollbar preferences in MacOS control visibility of native scrollbars. `\"auto\"` means that scrollbars are visible when content is overflowing on the corresponding orientation. `\"always\"` means that scrollbars are always visible regardless of whether the content is overflowing. `\"scroll\"` means that scrollbars are visible when the user is scrolling along its corresponding orientation. `\"hover\"` when the user is scrolling along its corresponding orientation and when the user is hovering over the scroll area.",
                "descriptionMdx": "<span>\n          Describes the nature of scrollbar visibility, similar to how the\n          scrollbar preferences in MacOS control visibility of native\n          scrollbars.\n          <br />\n          <br />\n          <Code>\"auto\"</Code> means that scrollbars are visible when content is overflowing\n          on the corresponding orientation.\n          <br />\n          <Code>\"always\"</Code> means that scrollbars are always visible regardless\n          of whether the content is overflowing.\n          <br />\n          <Code>\"scroll\"</Code> means that scrollbars are visible when the user is\n          scrolling along its corresponding orientation.\n          <br />\n          <Code>\"hover\"</Code> when the user is scrolling along its corresponding\n          orientation and when the user is hovering over the scroll area.\n        </span>"
            },
            {
                "name": "scrollHideDelay",
                "type": "number",
                "default": "600",
                "description": "If `type` is set to either `\"scroll\"` or{' '} `\"hover\"`, this prop determines the length of time, in milliseconds, before the scrollbars are hidden after the user stops interacting with scrollbars.",
                "descriptionMdx": "<span>\n          If <Code>type</Code> is set to either <Code>\"scroll\"</Code> or{' '}\n          <Code>\"hover\"</Code>, this prop determines the length of time, in\n          milliseconds, before the scrollbars are hidden after the user stops\n          interacting with scrollbars.\n        </span>"
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of the scroll area. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of the scroll area. If omitted, inherits\n          globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
            },
            {
                "name": "nonce",
                "required": false,
                "type": "string",
                "description": "An optional nonce attribute that is passed to the inline styles for use in CSP-enabled environments that use strict rules to enhance security.",
                "descriptionMdx": "<span>\n          An optional nonce attribute that is passed to the inline styles for\n          use in CSP-enabled environments that use strict rules to enhance\n          security.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Vertical scroll",
                "code": "/scroll %vertical-flex h-72 w-48 rounded-md border\n\t/foreach [1...256]\n\t\t/center p-4 bg-slate-100 h-full rounded $item"
            },
            {
                "title": "Horizontal scroll",
                "code": "/scroll %horizontal-flex w-48 rounded-md border\n\t/foreach [1...256]\n\t\t/center p-4 bg-slate-100 h-full rounded $item"
            },
            {
                "title": "Bare usage",
                "code": "/scroll %bare h-72 w-48 rounded-md border\n\t/vstack gap-4 w-full\n\t\t/foreach [1...10]\n\t\t\t/center p-4 bg-slate-100 w-full rounded \n\t\t\t\t$item"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Select",
        "tag": "select",
        "description": "Displays a list of options for the user to pick from—triggered by a button.",
        "refImplementation": "/select w-[180px] Select a fruit\n\t# Fruits\n\tApple\n\tBanana\n\tBlueberry\n\tGrapes\n\tPineapple\n\t---\n\t# Vegetables\n\tCarrot\n\tCucumber\n\tLettuce\n\tOnion\n\tPotato",
        "props": [
            {
                "name": "defaultValue",
                "required": false,
                "type": "string",
                "description": "The value of the select when initially rendered. Use when you do not need to control the state of the select.",
                "descriptionMdx": "The value of the select when initially rendered. Use when you do not need to control the state of the select."
            },
            {
                "name": "value",
                "required": false,
                "type": "string",
                "description": "The controlled value of the select. Should be used in conjunction with{' '} `onValueChange`.",
                "descriptionMdx": "<span>\n          The controlled value of the select. Should be used in conjunction with{' '}\n          <Code>onValueChange</Code>.\n        </span>"
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "(value: string) => void",
                "typeSimple": "function",
                "description": "Event handler called when the value changes.",
                "descriptionMdx": "Event handler called when the value changes."
            },
            {
                "name": "defaultOpen",
                "type": "boolean",
                "description": "The open state of the select when it is initially rendered. Use when you do not need to control its open state.",
                "descriptionMdx": "The open state of the select when it is initially rendered. Use when you do not need to control its open state."
            },
            {
                "name": "open",
                "type": "boolean",
                "description": "The controlled open state of the select. Must be used in conjunction with `onOpenChange`.",
                "descriptionMdx": "<span>\n          The controlled open state of the select. Must be used in conjunction\n          with <Code>onOpenChange</Code>.\n        </span>"
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the select changes.",
                "descriptionMdx": "<span>\n          Event handler called when the open state of the select changes.\n        </span>"
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of the select when applicable. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of the select when applicable. If omitted,\n          inherits globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the select. Submitted with its owning form as part of a name/value pair.",
                "descriptionMdx": "The name of the select. Submitted with its owning form as part of a name/value pair."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "When `true`, prevents the user from interacting with select.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with\n          select.\n        </span>"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "When `true`, indicates that the user must select a value before the owning form can be submitted.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, indicates that the user must select a value\n          before the owning form can be submitted.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "SelectContent",
                "tag": "content",
                "description": "The component that pops out when the select is open.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "onCloseAutoFocus",
                        "type": "(event: Event) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when focus moves to the trigger after closing. It\n          can be prevented by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onEscapeKeyDown",
                        "type": "(event: KeyboardEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "onPointerDownOutside",
                        "type": "(event: PointerDownOutsideEvent) => void",
                        "typeSimple": "function",
                        "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                        "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
                    },
                    {
                        "name": "position",
                        "type": "\"item-aligned\" | \"popper\"",
                        "typeSimple": "enum",
                        "default": "\"item-aligned\"",
                        "description": "The positioning mode to use, `item-aligned` is the default and behaves similarly to a native MacOS menu by positioning content relative to the active item. `popper` positions content in the same way as our other primitives, for example `Popover`{' '} or `DropdownMenu`.",
                        "descriptionMdx": "<span>\n          The positioning mode to use, <Code>item-aligned</Code> is the default\n          and behaves similarly to a native MacOS menu by positioning content\n          relative to the active item. <Code>popper</Code> positions content in\n          the same way as our other primitives, for example <Code>Popover</Code>{' '}\n          or <Code>DropdownMenu</Code>.\n        </span>"
                    },
                    {
                        "name": "side",
                        "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                        "typeSimple": "enum",
                        "default": "\"bottom\"",
                        "description": "The preferred side of the anchor to render against when open. Will be reversed when collisions occur and `avoidCollisions` is enabled. Only available when `position` is set to{' '} `popper`.",
                        "descriptionMdx": "<span>\n          The preferred side of the anchor to render against when open. Will be\n          reversed when collisions occur and <Code>avoidCollisions</Code> is\n          enabled. Only available when <Code>position</Code> is set to{' '}\n          <Code>popper</Code>.\n        </span>"
                    },
                    {
                        "name": "sideOffset",
                        "type": "number",
                        "default": "0",
                        "description": "The distance in pixels from the anchor. Only available when{' '} `position` is set to `popper`.",
                        "descriptionMdx": "<span>\n          The distance in pixels from the anchor. Only available when{' '}\n          <Code>position</Code> is set to <Code>popper</Code>.\n        </span>"
                    },
                    {
                        "name": "align",
                        "type": "\"start\" | \"center\" | \"end\"",
                        "typeSimple": "enum",
                        "default": "\"start\"",
                        "description": "The preferred alignment against the anchor. May change when collisions occur. Only available when `position` is set to{' '} `popper`.",
                        "descriptionMdx": "<span>\n          The preferred alignment against the anchor. May change when collisions\n          occur. Only available when <Code>position</Code> is set to{' '}\n          <Code>popper</Code>.\n        </span>"
                    },
                    {
                        "name": "alignOffset",
                        "type": "number",
                        "default": "0",
                        "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options. Only available when{' '} `position` is set to `popper`.",
                        "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options. Only available when{' '}\n          <Code>position</Code> is set to <Code>popper</Code>.\n        </span>"
                    },
                    {
                        "name": "avoidCollisions",
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges. Only available when `position` is set to ` popper `.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n          Only available when <Code>position</Code> is set to <Code>\n            popper\n          </Code>.\n        </span>"
                    },
                    {
                        "name": "collisionBoundary",
                        "type": "Element | null | Array<Element | null>",
                        "typeSimple": "Boundary",
                        "default": "[]",
                        "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check. Only available when `position` is set to{' '} `popper`.",
                        "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check. Only available when <Code>position</Code> is set to{' '}\n          <Code>popper</Code>.\n        </span>"
                    },
                    {
                        "name": "collisionPadding",
                        "type": "number | Partial<Record<Side, number>>",
                        "typeSimple": "number | Padding",
                        "default": "10",
                        "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` . Only available when `position` is set to ` popper `.",
                        "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          . Only available when <Code>position</Code> is set to <Code>\n            popper\n          </Code>.\n        </span>"
                    },
                    {
                        "name": "arrowPadding",
                        "type": "number",
                        "default": "0",
                        "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners. Only available when `position` is set to `popper`.",
                        "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners. Only available when <Code>position</Code> is\n          set to <Code>popper</Code>.\n        </span>"
                    },
                    {
                        "name": "sticky",
                        "type": "\"partial\" | \"always\"",
                        "typeSimple": "enum",
                        "default": "\"partial\"",
                        "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless. Only available when{' '} `position` is set to `popper`.",
                        "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless. Only available when{' '}\n          <Code>position</Code> is set to <Code>popper</Code>.\n        </span>"
                    },
                    {
                        "name": "hideWhenDetached",
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether to hide the content when the trigger becomes fully occluded. Only available when `position` is set to{' '} `popper`.",
                        "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n          Only available when <Code>position</Code> is set to{' '}\n          <Code>popper</Code>.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SelectGroup",
                "tag": "group",
                "description": "Used to group multiple items. use in conjunction with `Select.Label` to ensure good accessibility via automatic labelling.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SelectItem",
                "tag": "item",
                "description": "The component that contains the select items.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "required": true,
                        "type": "string",
                        "description": "The value given as data when submitted with a `name`.",
                        "descriptionMdx": "<span>\n          The value given as data when submitted with a <Code>name</Code>.\n        </span>"
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    },
                    {
                        "name": "textValue",
                        "type": "string",
                        "description": "Optional text used for typeahead purposes. By default the typeahead behavior will use the `.textContent` of the{' '} `Select.ItemText` part. Use this when the content is complex, or you have non-textual content inside.",
                        "descriptionMdx": "<span>\n          Optional text used for typeahead purposes. By default the typeahead\n          behavior will use the <Code>.textContent</Code> of the{' '}\n          <Code>Select.ItemText</Code> part. Use this when the content is\n          complex, or you have non-textual content inside.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SelectLabel",
                "tag": "label",
                "description": "Used to render the label of a group. It won't be focusable using arrow keys.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SelectScrollDownButton",
                "tag": "scroll-down-button",
                "description": "An optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling downwards.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SelectScrollUpButton",
                "tag": "scroll-up-button",
                "description": "An optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling upwards.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SelectSeparator",
                "tag": "separator",
                "description": "Used to visually separate items in the select.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Horizontal",
                        "code": "/vstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %horizontal\n\t/center B size-full"
                    },
                    {
                        "title": "Vertical",
                        "code": "/hstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %vertical\n\t/center B size-full"
                    }
                ],
                "sources": []
            },
            {
                "name": "SelectTrigger",
                "tag": "trigger",
                "description": "The button that toggles the select. The `Select.Content` will position itself by aligning over the trigger.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SelectValue",
                "tag": "value",
                "description": "The part that reflects the selected value. By default the selected item's text will be rendered. if you require more control, you can instead control the select and pass your own `children`. It should not be styled to ensure correct positioning. An optional `placeholder` prop is also available for when the select has no value.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "placeholder",
                        "required": false,
                        "type": "ReactNode",
                        "description": "The content that will be rendered inside the `Select.Value`{' '} when no `value` or `defaultValue` is set.",
                        "descriptionMdx": "<>\n          The content that will be rendered inside the <Code>Select.Value</Code>{' '}\n          when no <Code>value</Code> or <Code>defaultValue</Code> is set.\n        </>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/select w-[180px] Select a fruit\n\t# Fruits\n\tApple\n\tBanana\n\tBlueberry\n\tGrapes\n\tPineapple\n\t---\n\t# Vegetables\n\tCarrot\n\tCucumber\n\tLettuce\n\tOnion\n\tPotato"
            },
            {
                "title": "Composable syntax",
                "code": "/select w-[180px]\n\t/trigger \n\t\t/value @placeholder=\"Select a fruit\"\n\t/content\n\t\t/group \n\t\t\t/label Fruits\n\t\t\t/item @value=\"Apple\" Apple\n\t\t\t/item @value=\"Banana\" Banana\n\t\t\t/item @value=\"Blueberry\" Blueberry\n\t\t\t/item @value=\"Grapes\" Grapes\n\t\t\t/item @value=\"Pineapple\" Pineapple\n\t\t/separator\n\t\t/group\n\t\t\t/label Vegetables\n\t\t\t/item @value=\"Carrot\" Carrot\n\t\t\t/item @value=\"Cucumber\" Cucumber\n\t\t\t/item @value=\"Lettuce\" Lettuce\n\t\t\t/item @value=\"Onion\" Onion\n\t\t\t/item @value=\"Potato\" Potato"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Separator",
        "tag": "separator",
        "description": "Visually or semantically separates content",
        "refImplementation": "/div \n    /div space-y-1\n      /h4 text-sm font-medium leading-none Radix Primitives\n      /p text-sm text-muted-foreground An open-source UI component library.\n    /separator my-4\n    /div flex h-5 items-center space-x-4 text-sm\n      /div Blog \n      /separator %vertical\n      /div Docs\n      /separator %vertical\n      /div Source",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "orientation",
                "type": "\"horizontal\" | \"vertical\"",
                "typeSimple": "enum",
                "default": "\"horizontal\"",
                "description": "The orientation of the separator.",
                "descriptionMdx": "The orientation of the separator."
            },
            {
                "name": "decorative",
                "type": "boolean",
                "description": "When `true`, signifies that it is purely visual, carries no semantic meaning, and ensures it is not present in the accessibility tree.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, signifies that it is purely visual, carries no\n          semantic meaning, and ensures it is not present in the accessibility\n          tree.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Horizontal",
                "code": "/vstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %horizontal\n\t/center B size-full"
            },
            {
                "title": "Vertical",
                "code": "/hstack size-24 border rounded-lg\n\t/center A size-full\n\t/separator %vertical\n\t/center B size-full"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Sheet",
        "tag": "sheet",
        "description": "Extends the Dialog component to display content that complements the main content of the screen.",
        "refImplementation": "/button %outline Open\n\t/sheet\n\t\t/header\n\t\t\t/title Edit profile\n\t\t\t/description Make changes to your profile here. Click save when you're done.\n\t\t/div grid gap-4 py-4\n\t\t\t/div grid grid-cols-4 items-center gap-4\n\t\t\t\t/label @htmlFor=\"name\" text-right Name\n\t\t\t\t/input @id=\"name\" Severin Marcombes col-span-3\n      /div grid grid-cols-4 items-center gap-4\n          /label @htmlFor=\"username\" text-right Username\n          /input @id=\"username\" severin__ col-span-3\n    /footer\n      /close @asChild\n          /button @type=\"submit\" Save changes",
        "props": [
            {
                "name": "defaultOpen",
                "type": "boolean",
                "description": "The open state of the sheet when it is initially rendered. Use when you do not need to control its open state."
            },
            {
                "name": "open",
                "type": "boolean",
                "description": "The controlled open state of the sheet. Must be used in conjunction with `onOpenChange`."
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the sheet changes."
            },
            {
                "name": "modal",
                "required": false,
                "type": "boolean",
                "default": "true",
                "description": "The modality of the sheet. When set to `true`, interaction with outside elements will be disabled and only sheet content will be visible to screen readers."
            }
        ],
        "subComponents": [
            {
                "name": "SheetClose",
                "tag": "close",
                "description": "The button that closes the sheet.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "content",
                "tag": "content",
                "description": "The content of the sheet",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SheetDescription",
                "tag": "description",
                "description": "An optional accessible description to be announced when the sheet is opened.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SheetFooter",
                "tag": "footer",
                "description": "The footer of the sheet.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "header",
                "tag": "header",
                "description": "The header of the sheet",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "SheetTitle",
                "tag": "title",
                "description": "An accessible title to be announced when the sheet is opened.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/button Open\n\t/sheet Title here \n\t\t-- Description here\n\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close\n\t\t\t\t/button Click me to Close"
            },
            {
                "title": "Short syntax (alternative)",
                "code": "/button Open\n\t/sheet \n\t\t# Title here \n\t\t-- Description here\n\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close\n\t\t\t\t/button Click me to Close"
            },
            {
                "title": "Composable syntax",
                "code": "/button Open\n\t/sheet\n\t\t/header\n\t\t\t/title Title here\n\t\t\t/description Description here\n\t\t/content\n\t\t\tAny content here\n\t\t/footer\n\t\t\tFooter content here\n\t\t\t/close @asChild \n\t\t\t\t/button %outline Click me to Close"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Skeleton",
        "tag": "skeleton",
        "description": "Use to show a placeholder while content is loading.",
        "refImplementation": "/div flex items-center space-x-4\n    /skeleton h-12 w-12 rounded-full\n    /div space-y-2\n      /skeleton h-4 w-[250px]\n      /skeleton h-4 w-[200px]",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Slider",
        "tag": "slider",
        "description": "An input where the user selects a value from within a given range.",
        "refImplementation": "/slider 30 w-[60%]",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultValue",
                "required": false,
                "type": "number[]",
                "description": "The value of the slider when initially rendered. Use when you do not need to control the state of the slider.",
                "descriptionMdx": "The value of the slider when initially rendered. Use when you do not need to control the state of the slider."
            },
            {
                "name": "value",
                "required": false,
                "type": "number[]",
                "description": "The controlled value of the slider. Must be used in conjunction with{' '} `onValueChange`.",
                "descriptionMdx": "<span>\n          The controlled value of the slider. Must be used in conjunction with{' '}\n          <Code>onValueChange</Code>.\n        </span>"
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "onValueChange?(value: number[]): void",
                "typeSimple": "function",
                "description": "Event handler called when the value changes.",
                "descriptionMdx": "Event handler called when the value changes."
            },
            {
                "name": "onValueCommit",
                "required": false,
                "type": "onValueCommit?(value: number[]): void",
                "typeSimple": "function",
                "description": "Event handler called when the value changes at the end of an interaction. Useful when you only need to capture a final value e.g. to update a backend service.",
                "descriptionMdx": "Event handler called when the value changes at the end of an interaction. Useful when you only need to capture a final value e.g. to update a backend service."
            },
            {
                "name": "name",
                "required": false,
                "type": "string",
                "description": "The name of the slider. Submitted with its owning form as part of a name/value pair.",
                "descriptionMdx": "The name of the slider. Submitted with its owning form as part of a name/value pair."
            },
            {
                "name": "disabled",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "When `true`, prevents the user from interacting with the slider.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          slider.\n        </span>"
            },
            {
                "name": "orientation",
                "required": false,
                "type": "\"horizontal\" | \"vertical\"",
                "typeSimple": "enum",
                "default": "\"horizontal\"",
                "description": "The orientation of the slider.",
                "descriptionMdx": "The orientation of the slider."
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of the slider. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of the slider. If omitted, inherits globally\n          from <Code>DirectionProvider</Code> or assumes LTR (left-to-right)\n          reading mode.\n        </span>"
            },
            {
                "name": "inverted",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Whether the slider is visually inverted.",
                "descriptionMdx": "Whether the slider is visually inverted."
            },
            {
                "name": "min",
                "required": false,
                "type": "number",
                "default": "0",
                "description": "The minimum value for the range.",
                "descriptionMdx": "The minimum value for the range."
            },
            {
                "name": "max",
                "required": false,
                "type": "number",
                "default": "100",
                "description": "The maximum value for the range.",
                "descriptionMdx": "The maximum value for the range."
            },
            {
                "name": "step",
                "required": false,
                "type": "number",
                "default": "1",
                "description": "The stepping interval.",
                "descriptionMdx": "The stepping interval."
            },
            {
                "name": "minStepsBetweenThumbs",
                "required": false,
                "type": "number",
                "default": "0",
                "description": "The minimum permitted `step`s between multiple thumbs.",
                "descriptionMdx": "<span>\n          The minimum permitted <Code>step</Code>s between multiple thumbs.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/slider 30"
            },
            {
                "title": "Vertical slider",
                "code": "/slider %vertical 30 h-40"
            },
            {
                "title": "Bound to variable",
                "code": "/vstack gap-2\n\t/input $myVariable\n\t/slider $myVariable"
            },
            {
                "title": "With custom min, max, step values",
                "code": "/vstack gap-2\n\t/input $myVar\n\t/slider $myVar @min=10 @max=90 @step=10"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Style",
        "tag": "style",
        "description": "A style component that applies Tailwind classes to its parent's descendants.",
        "refImplementation": "\n/style\n    /h1 font-['Jersey_10'] text-8xl\n\n/h1 Hello, styles!\n    ",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    },
    {
        "name": "Switch",
        "tag": "switch",
        "description": "A control that allows the user to toggle between checked and not checked.",
        "refImplementation": "/switch Airplane mode ON",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultChecked",
                "type": "boolean",
                "description": "The state of the switch when it is initially rendered. Use when you do not need to control its state.",
                "descriptionMdx": "The state of the switch when it is initially rendered. Use when you do not need to control its state."
            },
            {
                "name": "checked",
                "type": "boolean",
                "description": "The controlled state of the switch. Must be used in conjunction with{' '} `onCheckedChange`.",
                "descriptionMdx": "<span>\n          The controlled state of the switch. Must be used in conjunction with{' '}\n          <Code>onCheckedChange</Code>.\n        </span>"
            },
            {
                "name": "onCheckedChange",
                "type": "(checked: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the state of the switch changes.",
                "descriptionMdx": "Event handler called when the state of the switch changes."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "When `true`, prevents the user from interacting with the switch.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          switch.\n        </span>"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "When `true`, indicates that the user must check the switch before the owning form can be submitted.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, indicates that the user must check the switch\n          before the owning form can be submitted.\n        </span>"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the switch. Submitted with its owning form as part of a name/value pair.",
                "descriptionMdx": "The name of the switch. Submitted with its owning form as part of a name/value pair."
            },
            {
                "name": "value",
                "type": "string",
                "default": "on",
                "description": "The value given as data when submitted with a `name`.",
                "descriptionMdx": "<span>\n          The value given as data when submitted with a <Code>name</Code>.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/vstack gap-2\n\t/switch Airplane mode ON\n\t/switch Airplane mode OFF"
            },
            {
                "title": "With static value",
                "code": "/vstack gap-2\n\t/switch Airplane mode\n\t\t@value\n\t/switch Airplane mode\n\t\t@value=false"
            },
            {
                "title": "Bound to variable",
                "code": "/vstack gap-2\n\t/input Enter value $myVariable\n\t/switch Airplane mode $myVariable"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Table",
        "tag": "table",
        "description": "A responsive table component.",
        "refImplementation": "/table 2020-08 | 2020-09 | 2020-10 | 2020-11 | 2020-12\n  GMV\t0\t39,34\t5874,48\t6479,9\t13462,5\n  COGS (tickets cost)\t0\t-33\t-5224\t-5751\t-11946\n  Purchase fee\t0\t0\t0\t0\t0\n  Payment fee\t0\t-2,92\t-296,35\t-332,14\t-692,94\n  Service fee\t0\t3,42\t355,33\t397,92\t826,57\n  /caption \"This is a table parsing CSV lines\"\n  \n/table invoice | status | amount\n  { invoice: 'INV001', status: 'Paid', method: 'Credit Card', amount: \"$250.00\" }\n  { invoice: 'INV002', status: 'Pending', method: 'PayPal', amount: \"$150.00\" }\n  { invoice: 'INV003', status: 'Unpaid', method: 'Bank Transfer', amount: \"$350.00\" }\n  { invoice: 'INV004', status: 'Paid', method: 'Credit Card', amount: \"$450.00\" }\n  { invoice: 'INV005', status: 'Paid', method: 'PayPal', amount: \"$550.00\" }\n  { invoice: 'INV006', status: 'Pending', method: 'Bank Transfer', amount: \"$200.00\" }\n  { invoice: 'INV007', status: 'Unpaid', method: 'Credit Card', amount: \"$300.00\" }\n  /caption \n    \"This is a table parsing JSONL content with selected columns\"\n  /footer \n    /row \n      /cell @colSpan=3 \"Table footer here\" w-full text-center",
        "props": [],
        "subComponents": [
            {
                "name": "TableBody",
                "tag": "body",
                "description": "Contains the table rows.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TableCaption",
                "tag": "caption",
                "description": "Provides a caption for the table.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TableCell",
                "tag": "cell",
                "description": "Represents a single cell in the table.",
                "props": [
                    {
                        "name": "colSpan",
                        "required": false,
                        "type": "number",
                        "description": "Defines the number of columns a cell should span."
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TableFooter",
                "tag": "footer",
                "description": "Contains the footer rows for the table.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TableHead",
                "tag": "head",
                "description": "Represents a header cell in the table.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TableHeader",
                "tag": "header",
                "description": "Contains the header row(s) for the table.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TableRow",
                "tag": "row",
                "description": "Represents a row of cells in the table.",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "CSV syntax",
                "code": "/table 2020-08 | 2020-09 | 2020-10 | 2020-11 | 2020-12\n\tGMV\t0\t39,34\t5874,48\t6479,9\t13462,5\n\tCOGS (tickets cost)\t0\t-33\t-5224\t-5751\t-11946\n\tPurchase fee\t0\t0\t0\t0\t0\n\tPayment fee\t0\t-2,92\t-296,35\t-332,14\t-692,94\n\tService fee\t0\t3,42\t355,33\t397,92\t826,57\n\t/caption \"This is a table parsing CSV lines\""
            },
            {
                "title": "JSON syntax",
                "code": "/table invoice | status | amount\n\t{ invoice: 'INV001', status: 'Paid', method: 'Credit Card', amount: \"$250.00\" }\n\t{ invoice: 'INV002', status: 'Pending', method: 'PayPal', amount: \"$150.00\" }\n\t{ invoice: 'INV003', status: 'Unpaid', method: 'Bank Transfer', amount: \"$350.00\" }\n\t{ invoice: 'INV004', status: 'Paid', method: 'Credit Card', amount: \"$450.00\" }\n\t{ invoice: 'INV005', status: 'Paid', method: 'PayPal', amount: \"$550.00\" }\n\t{ invoice: 'INV006', status: 'Pending', method: 'Bank Transfer', amount: \"$200.00\" }\n\t{ invoice: 'INV007', status: 'Unpaid', method: 'Credit Card', amount: \"$300.00\" }\n\t/caption \n\t\t\"This is a table parsing JSONL content with selected columns\"\n\t/footer \n\t\t/row \n\t\t\t/cell @colSpan=3 \"Table footer here\" w-full text-center"
            },
            {
                "title": "🔴 Markdown syntax"
            },
            {
                "title": "Composable syntax",
                "code": "/table\n\t/header\n\t\t/row\n\t\t\t/head A\n\t\t\t/head B\n\t\t\t/head C\n\t/body\n\t\t/row\n\t\t\t/cell 1\n\t\t\t/cell 2\n\t\t\t/cell 3\n\t\t/row\n\t\t\t/cell 4\n\t\t\t/cell 5\n\t\t\t/cell 6\n\t/footer \n\t\t/cell @colSpan=3\n\t\t\tThis is the footer\n\t/caption \n\t\tThis is the caption"
            },
            {
                "title": "Bound to variable",
                "code": "/data $myList = mock://A list of vegetables with name and calorieCountInKCal\n/table $myList"
            }
        ],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Tabs",
        "tag": "tabs",
        "description": "Displays rich content in a portal, triggered by the parent button or link",
        "refImplementation": "/tabs w-[400px]\n      /tab Account\n        /card\n          /header Account\n          /content\n            /label Name\n            /input @id=name @defaultValue=\"Pedro Duarte\"\n            /label Username\n            /input @id=username @defaultValue=\"@peduarte\"\n          /footer\n            /button Save changes\n      /tab Password\n        /card\n          /header Password\n          /content\n            /label Current password\n            /input @id=current @type=password\n            /label New password\n            /input @id=new @type=password\n          /footer\n            /button Save password",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultValue",
                "required": false,
                "type": "string",
                "description": "The value of the tab that should be active when initially rendered. Use when you do not need to control the state of the tabs.",
                "descriptionMdx": "The value of the tab that should be active when initially rendered. Use when you do not need to control the state of the tabs."
            },
            {
                "name": "value",
                "required": false,
                "type": "string",
                "description": "The controlled value of the tab to activate. Should be used in conjunction with `onValueChange`.",
                "descriptionMdx": "<span>\n          The controlled value of the tab to activate. Should be used in\n          conjunction with <Code>onValueChange</Code>.\n        </span>"
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "(value: string) => void",
                "typeSimple": "function",
                "description": "Event handler called when the value changes.",
                "descriptionMdx": "Event handler called when the value changes."
            },
            {
                "name": "orientation",
                "required": false,
                "type": "\"horizontal\" | \"vertical\" | undefined",
                "typeSimple": "enum",
                "default": "\"horizontal\"",
                "description": "The orientation of the component.",
                "descriptionMdx": "The orientation of the component."
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of the tabs. If omitted, inherits globally from{' '} `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of the tabs. If omitted, inherits globally from{' '}\n          <Code>DirectionProvider</Code> or assumes LTR (left-to-right) reading\n          mode.\n        </span>"
            },
            {
                "name": "activationMode",
                "required": false,
                "type": "\"automatic\" | \"manual\"",
                "typeSimple": "enum",
                "default": "\"automatic\"",
                "description": "When `automatic`, tabs are activated when receiving focus. When `manual`, tabs are activated when clicked.",
                "descriptionMdx": "<span>\n          When <Code>automatic</Code>, tabs are activated when receiving focus.\n          When <Code>manual</Code>, tabs are activated when clicked.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "TabsContent",
                "tag": "content",
                "description": "Contains the content associated with each trigger.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "required": true,
                        "type": "string",
                        "description": "A unique value that associates the content with a trigger.",
                        "descriptionMdx": "A unique value that associates the content with a trigger."
                    },
                    {
                        "name": "forceMount",
                        "type": "boolean",
                        "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
                        "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TabsList",
                "tag": "list",
                "description": "Contains the triggers that are aligned along the edge of the active content.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "loop",
                        "required": false,
                        "type": "boolean",
                        "default": "true",
                        "description": "When `true`, keyboard navigation will loop from last tab to first, and vice versa.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, keyboard navigation will loop from last tab to\n          first, and vice versa.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "TabsTrigger",
                "tag": "trigger",
                "description": "The button that activates its associated content.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "required": true,
                        "type": "string",
                        "description": "A unique value that associates the trigger with a content.",
                        "descriptionMdx": "A unique value that associates the trigger with a content."
                    },
                    {
                        "name": "disabled",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "When `true`, prevents the user from interacting with the tab.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          tab.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/tab Account\n\t/center size-full This is the accounts tab\n/tab Settings\n\t/center size-full This is the settings tab"
            },
            {
                "title": "Medium syntax",
                "code": "/tabs\n\t/tab Account\n\t\t/center size-full This is the accounts tab\n\t/tab Settings\n\t\t/center size-full This is the settings tab"
            },
            {
                "title": "Composable syntax",
                "code": "/tabs\n\t/tab\n\t\t/trigger Accounts\n\t\t/content This is the accounts tab\n\t/tab\n\t\t/trigger Settings\n\t\t/content This is the settings tab"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Template",
        "tag": "template",
        "description": "Enables you to instanciate templated UI patterns",
        "props": [],
        "subComponents": [
            {
                "name": "p",
                "tag": "description",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "img",
                "tag": "image",
                "props": [],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Get an image from unsplash",
                        "code": "/image w-40 %unsplash Tiger w-40"
                    },
                    {
                        "title": "Get an image from google",
                        "code": "/image w-40 %google Tiger w-40"
                    },
                    {
                        "title": "Get an image by URL",
                        "code": "/image w-40 https://w7.pngwing.com/pngs/293/485/png-transparent-tailwind-css-hd-logo.png My image description here"
                    },
                    {
                        "title": "Apply transforms to the image",
                        "code": "/image w-40 %google Lion | remove-bg"
                    },
                    {
                        "title": "Create an image with the right aspect ratio",
                        "code": "/div w-40\n\t/aspect-ratio %video\n\t\t/image Tiger size-full object-cover"
                    },
                    {
                        "title": "Generate an image via AI",
                        "code": "/image w-40 %ai/flat-illustration Calendar"
                    },
                    {
                        "title": "Apply transforms to the illustration",
                        "code": "/image w-40 %ai/flat-illustration Calendar | remove-bg | vectorize"
                    }
                ],
                "sources": []
            },
            {
                "name": "span",
                "tag": "tagLine",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "h1",
                "tag": "title",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": []
    },
    {
        "name": "Textarea",
        "tag": "textarea",
        "description": "Displays a form textarea or a component that looks like a textarea.",
        "refImplementation": "/textarea Type your message here.",
        "props": [
            {
                "name": "value",
                "type": "string | number | readonly string[]",
                "description": "The current value of the textarea."
            },
            {
                "name": "defaultValue",
                "type": "string | number | readonly string[]",
                "description": "The initial value of the textarea when the component is first rendered."
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "A short hint that describes the expected value of the textarea."
            },
            {
                "name": "onValueChange",
                "type": "(value: string, event: ChangeEvent<HTMLTextAreaElement>) => void",
                "description": "Event handler called when the textarea value changes."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that the textarea should be disabled."
            },
            {
                "name": "maxLength",
                "type": "number",
                "description": "Specifies the maximum number of characters allowed in the textarea."
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "description": "Specifies that the textarea is read-only."
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that the textarea field must be filled out before submitting the form."
            },
            {
                "name": "autoComplete",
                "type": "string",
                "description": "Specifies if the browser should provide autocompletion for the textarea."
            },
            {
                "name": "name",
                "type": "string",
                "description": "Name of the textarea element."
            },
            {
                "name": "id",
                "type": "string",
                "description": "The unique identifier for the textarea element."
            },
            {
                "name": "autoFocus",
                "type": "boolean",
                "description": "Specifies that the textarea should automatically have focus when the page loads."
            },
            {
                "name": "aria-label",
                "type": "string",
                "description": "Defines a string that labels the current element."
            },
            {
                "name": "rows",
                "type": "number",
                "description": "Specifies the visible number of lines in a textarea."
            },
            {
                "name": "cols",
                "type": "number",
                "description": "Specifies the visible width of a textarea in average character widths."
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/textarea Hello @name=\"my-text\""
            },
            {
                "title": "Props-based syntax",
                "code": "/textarea \n\t@placeholder=Hello\n\t@name=\"my-text\"\n\t@defaultValue=Bonjour"
            },
            {
                "title": "Static value",
                "code": "/textarea \n\t@placeholder=Hello\n\t@name=\"my-text\"\n\t@value=Bonjour"
            },
            {
                "title": "Bound to a variable",
                "code": "/vstack gap-4\n\t/input $myVariable\n\t/textarea $myVariable"
            }
        ],
        "sources": [
            "Shadcn"
        ]
    },
    {
        "name": "Theme",
        "tag": "theme",
        "description": "Defines the theme of the page",
        "refImplementation": "/theme\n    @colorScheme=\"light\" // Light or dark mode\n    @radius=\"0.5rem\" // Border radius for card, input, and buttons\n    @palette=\"mediterranean turquoise\" // AI-generated color-palette if needed\n    @background=\"primary-50\" // Color overrides\n    @accent=\"#00ff00\"\n    // @foreground=\"slate-900\"\n    // @muted=\"slate-100\"\n    // @mutedForeground=\"slate-800\"\n    // @card=\"white\"\n    // @cardForeground=\"slate-900\"\n    // @popover=\"white\"\n    // @popoverForeground=\"slate-900\"\n    // @border=\"slate-200\"\n    // @input=\"slate-100\"\n    // @primary=\"blue-600\"\n    // @primaryForeground=\"white\"\n    // @secondary=\"blue-200\"\n    // @secondaryForeground=\"blue-800\"\n    // @accent=\"green-800\"\n    // @accentForeground=\"white\"\n    // @destructive=\"red-600\"\n    // @destructiveForeground=\"white\"\n    // @ring=\"blue-600\"",
        "props": [
            {
                "name": "colorScheme",
                "type": "\"light\" | \"dark\"",
                "description": "Light or dark mode. Accepts 'light' or 'dark'.",
                "default": "light"
            },
            {
                "name": "radius",
                "type": "color",
                "description": "Border radius for cards, inputs, and buttons.",
                "default": "0.5rem"
            },
            {
                "name": "palette",
                "type": "color",
                "description": "AI-generated color palette based on a description."
            },
            {
                "name": "background",
                "type": "color",
                "description": "Background color for the theme.",
                "default": "primary-50"
            },
            {
                "name": "accent",
                "type": "color",
                "description": "Accent color for the theme.",
                "default": "#00ff00"
            },
            {
                "name": "foreground",
                "type": "color",
                "description": "Foreground color for the theme.",
                "default": "slate-900"
            },
            {
                "name": "muted",
                "type": "color",
                "description": "Muted color for the theme.",
                "default": "slate-100"
            },
            {
                "name": "mutedForeground",
                "type": "color",
                "description": "Foreground color for muted elements.",
                "default": "slate-800"
            },
            {
                "name": "card",
                "type": "color",
                "description": "Background color for cards.",
                "default": "white"
            },
            {
                "name": "cardForeground",
                "type": "color",
                "description": "Foreground color for cards.",
                "default": "slate-900"
            },
            {
                "name": "popover",
                "type": "color",
                "description": "Background color for popovers.",
                "default": "white"
            },
            {
                "name": "popoverForeground",
                "type": "color",
                "description": "Foreground color for popovers.",
                "default": "slate-900"
            },
            {
                "name": "border",
                "type": "color",
                "description": "Border color for elements.",
                "default": "slate-200"
            },
            {
                "name": "input",
                "type": "color",
                "description": "Background color for input fields.",
                "default": "slate-100"
            },
            {
                "name": "primary",
                "type": "color",
                "description": "Primary color for the theme.",
                "default": "blue-600"
            },
            {
                "name": "primaryForeground",
                "type": "color",
                "description": "Foreground color for primary elements.",
                "default": "white"
            },
            {
                "name": "secondary",
                "type": "color",
                "description": "Secondary color for the theme.",
                "default": "blue-200"
            },
            {
                "name": "secondaryForeground",
                "type": "color",
                "description": "Foreground color for secondary elements.",
                "default": "blue-800"
            },
            {
                "name": "accentForeground",
                "type": "color",
                "description": "Foreground color for accent elements.",
                "default": "white"
            },
            {
                "name": "destructive",
                "type": "color",
                "description": "Color for destructive actions.",
                "default": "red-600"
            },
            {
                "name": "destructiveForeground",
                "type": "color",
                "description": "Foreground color for destructive actions.",
                "default": "white"
            },
            {
                "name": "ring",
                "type": "color",
                "description": "Ring color for focused elements.",
                "default": "blue-600"
            }
        ],
        "subComponents": [
            {
                "name": "Palette",
                "tag": "palette",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Customize theme",
                "code": "/theme\n\t@colorScheme=\"light\" // Light or dark mode\n\t@radius=\"0.5rem\" // Border radius for card, input, and buttons\n\t@palette=\"mediterranean turquoise\" // AI-generated color-palette if needed\n\t@background=\"primary-50\" // Color overrides\n\t@accent=\"#00ff00\"\n\t@foreground=\"slate-900\"\n\t@muted=\"slate-100\"\n\t@mutedForeground=\"slate-800\"\n\t@card=\"white\"\n\t@cardForeground=\"slate-900\"\n\t@popover=\"white\"\n\t@popoverForeground=\"slate-900\"\n\t@border=\"slate-200\"\n\t@input=\"slate-100\"\n\t@primary=\"blue-600\"\n\t@primaryForeground=\"white\"\n\t@secondary=\"blue-200\"\n\t@secondaryForeground=\"blue-800\"\n\t@accent=\"green-800\"\n\t@accentForeground=\"white\"\n\t@destructive=\"red-600\"\n\t@destructiveForeground=\"white\"\n\t@ring=\"blue-600\""
            },
            {
                "title": "Generate a color palette with AI",
                "code": "/theme\n\t@palette=Intense Mediterranean turquoise as primary, creamy white in background"
            },
            {
                "title": "Override some palette colors",
                "code": "/theme\n\t@palette=Intense Mediterranean turquoise as primary, creamy white in background\n\t@background=\"primary-50\" // Color overrides"
            }
        ],
        "sources": []
    },
    {
        "name": "Toggle",
        "tag": "toggle",
        "description": "A two-state button that can be either on or off.",
        "refImplementation": "/toggle Bold",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "defaultPressed",
                "type": "boolean",
                "description": "The pressed state of the toggle when it is initially rendered. Use when you do not need to control its pressed state.",
                "descriptionMdx": "The pressed state of the toggle when it is initially rendered. Use when you do not need to control its pressed state."
            },
            {
                "name": "pressed",
                "type": "boolean",
                "description": "The controlled pressed state of the toggle. Must be used in conjunction with `onPressedChange`.",
                "descriptionMdx": "<span>\n          The controlled pressed state of the toggle. Must be used in\n          conjunction with <Code>onPressedChange</Code>.\n        </span>"
            },
            {
                "name": "onPressedChange",
                "type": "(pressed: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the pressed state of the toggle changes.",
                "descriptionMdx": "Event handler called when the pressed state of the toggle changes."
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "When `true`, prevents the user from interacting with the toggle.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          toggle.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/toggle Bold"
            },
            {
                "title": "Composable syntax",
                "code": "/toggle @name=\"bold\"\n\t/icon %lucide Bold"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Toggle Group",
        "tag": "toggle-group",
        "description": "A set of two-state buttons that can be toggled on or off.",
        "refImplementation": "/toggle-group %default @type=\"multiple\"\n    Bold\n    Italic\n    Underline",
        "props": [
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "type",
                "required": true,
                "type": "\"single\" | \"multiple\"",
                "typeSimple": "enum",
                "description": "Determines whether a single or multiple items can be pressed at a time.",
                "descriptionMdx": "<span>\n          Determines whether a single or multiple items can be pressed at a\n          time.\n        </span>"
            },
            {
                "name": "value",
                "required": false,
                "default": "[]",
                "type": "string[]",
                "description": "The controlled value of the pressed items when `type` is{' '} `\"multiple\"`. Must be used in conjunction with{' '} `onValueChange`.",
                "descriptionMdx": "<span>\n          The controlled value of the pressed items when <Code>type</Code> is{' '}\n          <Code>\"multiple\"</Code>. Must be used in conjunction with{' '}\n          <Code>onValueChange</Code>.\n        </span>"
            },
            {
                "name": "defaultValue",
                "required": false,
                "default": "[]",
                "type": "string[]",
                "description": "The values of the items to show as pressed when initially rendered and{' '} `type` is `\"multiple\"`. Use when you do not need to control the state of the items.",
                "descriptionMdx": "<span>\n          The values of the items to show as pressed when initially rendered and{' '}\n          <Code>type</Code> is <Code>\"multiple\"</Code>. Use when you do not need\n          to control the state of the items.\n        </span>"
            },
            {
                "name": "onValueChange",
                "required": false,
                "type": "(value: string[]) => void",
                "typeSimple": "function",
                "description": "Event handler called when the pressed state of an item changes and{' '} `type` is `\"multiple\"`.",
                "descriptionMdx": "<span>\n          Event handler called when the pressed state of an item changes and{' '}\n          <Code>type</Code> is <Code>\"multiple\"</Code>.\n        </span>"
            },
            {
                "name": "disabled",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "When `true`, prevents the user from interacting with the toggle group and all its items.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          toggle group and all its items.\n        </span>"
            },
            {
                "name": "rovingFocus",
                "required": false,
                "type": "boolean",
                "default": "true",
                "description": "When `false`, navigating through the items using arrow keys will be disabled.",
                "descriptionMdx": "<span>\n          When <Code>false</Code>, navigating through the items using arrow keys\n          will be disabled.\n        </span>"
            },
            {
                "name": "orientation",
                "required": false,
                "type": "\"horizontal\" | \"vertical\" | undefined",
                "typeSimple": "enum",
                "default": "undefined",
                "description": "The orientation of the component, which determines how focus moves:{' '} `horizontal` for left/right arrows and{' '} `vertical` for up/down arrows.",
                "descriptionMdx": "<span>\n          The orientation of the component, which determines how focus moves:{' '}\n          <Code>horizontal</Code> for left/right arrows and{' '}\n          <Code>vertical</Code> for up/down arrows.\n        </span>"
            },
            {
                "name": "dir",
                "required": false,
                "type": "\"ltr\" | \"rtl\"",
                "typeSimple": "enum",
                "description": "The reading direction of the toggle group. If omitted, inherits globally from `DirectionProvider` or assumes LTR (left-to-right) reading mode.",
                "descriptionMdx": "<span>\n          The reading direction of the toggle group. If omitted, inherits\n          globally from <Code>DirectionProvider</Code> or assumes LTR\n          (left-to-right) reading mode.\n        </span>"
            },
            {
                "name": "loop",
                "required": false,
                "type": "boolean",
                "default": "true",
                "description": "When `true` and `rovingFocus` is{' '} `true`, keyboard navigation will loop from last item to first, and vice versa.",
                "descriptionMdx": "<span>\n          When <Code>true</Code> and <Code>rovingFocus</Code> is{' '}\n          <Code>true</Code>, keyboard navigation will loop from last item to\n          first, and vice versa.\n        </span>"
            }
        ],
        "subComponents": [
            {
                "name": "ToggleGroupItem",
                "tag": "item",
                "description": "An item in the group.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "required": true,
                        "type": "string",
                        "description": "A unique value for the item.",
                        "descriptionMdx": "A unique value for the item."
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [],
                "sources": []
            },
            {
                "name": "ToggleGroupItem",
                "tag": "toggle",
                "description": "An item in the group.",
                "props": [
                    {
                        "name": "asChild",
                        "required": false,
                        "type": "boolean",
                        "default": "false",
                        "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                        "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
                    },
                    {
                        "name": "value",
                        "required": true,
                        "type": "string",
                        "description": "A unique value for the item.",
                        "descriptionMdx": "A unique value for the item."
                    },
                    {
                        "name": "disabled",
                        "type": "boolean",
                        "description": "When `true`, prevents the user from interacting with the item.",
                        "descriptionMdx": "<span>\n          When <Code>true</Code>, prevents the user from interacting with the\n          item.\n        </span>"
                    }
                ],
                "subComponents": [],
                "examples": [
                    {
                        "title": "Short syntax",
                        "code": "/toggle Bold"
                    },
                    {
                        "title": "Composable syntax",
                        "code": "/toggle @name=\"bold\"\n\t/icon %lucide Bold"
                    }
                ],
                "sources": []
            }
        ],
        "examples": [
            {
                "title": "Short syntax",
                "code": "/toggle-group %default @type=\"multiple\"\n\tBold\n\tItalic\n\tUnderline"
            },
            {
                "title": "Composable syntax",
                "code": "/toggle-group %default @type=\"multiple\"\n\t/item @value=\"bold\"\n\t\t/icon %lucide Bold\n\t/item @value=\"italic\"\n\t\t/icon %lucide Italic\n\t/item @value=\"underline\"\n\t\t/icon %lucide Underline"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Tooltip",
        "tag": "tooltip",
        "description": "A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.",
        "refImplementation": "/button Hover to reveal tooltip\n    /tooltip %right\n      Hey there!",
        "props": [
            {
                "name": "defaultOpen",
                "type": "boolean",
                "description": "The open state of the tooltip when it is initially rendered. Use when you do not need to control its open state.",
                "descriptionMdx": "<span>\n          The open state of the tooltip when it is initially rendered. Use when\n          you do not need to control its open state.\n        </span>"
            },
            {
                "name": "open",
                "type": "boolean",
                "description": "The controlled open state of the tooltip. Must be used in conjunction with `onOpenChange`.",
                "descriptionMdx": "<span>\n          The controlled open state of the tooltip. Must be used in conjunction\n          with <Code>onOpenChange</Code>.\n        </span>"
            },
            {
                "name": "onOpenChange",
                "type": "(open: boolean) => void",
                "typeSimple": "function",
                "description": "Event handler called when the open state of the tooltip changes.",
                "descriptionMdx": "<span>\n          Event handler called when the open state of the tooltip changes.\n        </span>"
            },
            {
                "name": "delayDuration",
                "type": "number",
                "default": 700,
                "description": "Override the duration given to the `Provider` to customise the open delay for a specific tooltip.",
                "descriptionMdx": "Override the duration given to the `Provider` to customise the open delay for a specific tooltip."
            },
            {
                "name": "disableHoverableContent",
                "type": "boolean",
                "default": false,
                "description": "Prevents `Tooltip.Content` from remaining open when hovering. Disabling this has accessibility consequences. Inherits from{' '} `Tooltip.Provider`.",
                "descriptionMdx": "<span>\n          Prevents <Code>Tooltip.Content</Code> from remaining open when\n          hovering. Disabling this has accessibility consequences. Inherits from{' '}\n          <Code>Tooltip.Provider</Code>.\n        </span>"
            },
            {
                "name": "asChild",
                "required": false,
                "type": "boolean",
                "default": "false",
                "description": "Change the default rendered element for the one passed as a child, merging their props and behavior. Read our guide for more details.",
                "descriptionMdx": "<>\n          Change the default rendered element for the one passed as a child,\n          merging their props and behavior.\n          <br />\n          <br />\n          Read our <a href=\"../guides/composition\">Composition</a> guide for more\n          details.\n        </>"
            },
            {
                "name": "aria-label",
                "type": "string",
                "description": "By default, screenreaders will announce the content inside the component. If this is not descriptive enough, or you have content that cannot be announced, use `aria-label` as a more descriptive label.",
                "descriptionMdx": "<span>\n          By default, screenreaders will announce the content inside the\n          component. If this is not descriptive enough, or you have content that\n          cannot be announced, use <Code>aria-label</Code> as a more descriptive\n          label.\n        </span>"
            },
            {
                "name": "onEscapeKeyDown",
                "type": "(event: KeyboardEvent) => void",
                "typeSimple": "function",
                "description": "Event handler called when the escape key is down. It can be prevented by calling `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when the escape key is down. It can be prevented\n          by calling <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "onPointerDownOutside",
                "type": "(event: PointerDownOutsideEvent) => void",
                "typeSimple": "function",
                "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling{' '} `event.preventDefault`.",
                "descriptionMdx": "<span>\n          Event handler called when a pointer event occurs outside the bounds of\n          the component. It can be prevented by calling{' '}\n          <Code>event.preventDefault</Code>.\n        </span>"
            },
            {
                "name": "forceMount",
                "type": "boolean",
                "description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from{' '} `Tooltip.Portal`.",
                "descriptionMdx": "<span>\n          Used to force mounting when more control is needed. Useful when\n          controlling animation with React animation libraries. It inherits from{' '}\n          <Code>Tooltip.Portal</Code>.\n        </span>"
            },
            {
                "name": "side",
                "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                "typeSimple": "enum",
                "default": "\"top\"",
                "description": "The preferred side of the trigger to render against when open. Will be reversed when collisions occur and `avoidCollisions` is enabled.",
                "descriptionMdx": "<span>\n          The preferred side of the trigger to render against when open. Will be\n          reversed when collisions occur and <Code>avoidCollisions</Code> is\n          enabled.\n        </span>"
            },
            {
                "name": "sideOffset",
                "type": "number",
                "default": "0",
                "description": "",
                "descriptionMdx": "<span>\n          <span>The distance in pixels from the trigger.</span>\n        </span>"
            },
            {
                "name": "align",
                "type": "\"start\" | \"center\" | \"end\"",
                "typeSimple": "enum",
                "default": "\"center\"",
                "description": "The preferred alignment against the trigger. May change when collisions occur.",
                "descriptionMdx": "<span>\n          The preferred alignment against the trigger. May change when\n          collisions occur.\n        </span>"
            },
            {
                "name": "alignOffset",
                "type": "number",
                "default": "0",
                "description": "An offset in pixels from the `\"start\"` or{' '} `\"end\"` alignment options.",
                "descriptionMdx": "<span>\n          An offset in pixels from the <Code>\"start\"</Code> or{' '}\n          <Code>\"end\"</Code> alignment options.\n        </span>"
            },
            {
                "name": "avoidCollisions",
                "type": "boolean",
                "default": "true",
                "description": "When `true`, overrides the `side` and `align` preferences to prevent collisions with boundary edges.",
                "descriptionMdx": "<span>\n          When <Code>true</Code>, overrides the <Code>side</Code> and\n          <Code>align</Code> preferences to prevent collisions with boundary edges.\n        </span>"
            },
            {
                "name": "collisionBoundary",
                "type": "Element | null | Array<Element | null>",
                "typeSimple": "Boundary",
                "default": "[]",
                "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
                "descriptionMdx": "<span>\n          The element used as the collision boundary. By default this is the\n          viewport, though you can provide additional element(s) to be included\n          in this check.\n        </span>"
            },
            {
                "name": "collisionPadding",
                "type": "number | Partial<Record<Side, number>>",
                "typeSimple": "number | Padding",
                "default": "0",
                "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: `{ top: 20, left: 20 }}`` .",
                "descriptionMdx": "<span>\n          The distance in pixels from the boundary edges where collision\n          detection should occur. Accepts a number (same for all sides), or a\n          partial padding object, for example: <Code>{`{ top: 20, left: 20 }}`</Code>\n          .\n        </span>"
            },
            {
                "name": "arrowPadding",
                "type": "number",
                "default": "0",
                "description": "The padding between the arrow and the edges of the content. If your content has `border-radius`, this will prevent it from overflowing the corners.",
                "descriptionMdx": "<span>\n          The padding between the arrow and the edges of the content. If your\n          content has <Code>border-radius</Code>, this will prevent it from\n          overflowing the corners.\n        </span>"
            },
            {
                "name": "sticky",
                "type": "\"partial\" | \"always\"",
                "typeSimple": "enum",
                "default": "\"partial\"",
                "description": "The sticky behavior on the align axis. `\"partial\"` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `\"always\"` will keep the content in the boundary regardless.",
                "descriptionMdx": "<span>\n          The sticky behavior on the align axis. <Code>\"partial\"</Code> will\n          keep the content in the boundary as long as the trigger is at least\n          partially in the boundary whilst <Code>\"always\"</Code> will keep the\n          content in the boundary regardless.\n        </span>"
            },
            {
                "name": "hideWhenDetached",
                "type": "boolean",
                "default": "false",
                "description": "Whether to hide the content when the trigger becomes fully occluded.",
                "descriptionMdx": "<span>\n          Whether to hide the content when the trigger becomes fully occluded.\n        </span>"
            }
        ],
        "subComponents": [],
        "examples": [
            {
                "title": "Change position",
                "code": "/center w-full h-52\n\t/button Positions\n\t\t/tooltip %left \n\t\t\tLeft\n\t\t/tooltip %top \n\t\t\tTop\n\t\t/tooltip %right \n\t\t\tRight\n\t\t/tooltip %bottom \n\t\t\tBottom"
            },
            {
                "title": "Change open delay",
                "code": "/button Hover me\n\t/tooltip @openDelay=10\n\t\tI pop!"
            },
            {
                "title": "Change offset from trigger bounds",
                "code": "/button Hover me\n\t/tooltip %right @sideOffset=50\n\t\tI'm far away"
            }
        ],
        "sources": [
            "Shadcn",
            "Radix"
        ]
    },
    {
        "name": "Top bar",
        "tag": "top-bar",
        "description": "Top navigation bar",
        "refImplementation": "/top-bar\n    News\n    Tags\n    Settings\n",
        "props": [],
        "subComponents": [
            {
                "name": "title",
                "tag": "title",
                "props": [],
                "subComponents": [],
                "examples": [],
                "sources": []
            }
        ],
        "examples": [],
        "sources": []
    },
    {
        "name": "VStack",
        "tag": "vstack",
        "description": "A vertical stack of elements.",
        "refImplementation": "/vstack p-2 gap-2 rounded-xl size-56 border border-slate-300\n\t/center bg-slate-200 h-16 w-full rounded-lg text-slate-700 font-bold A\n\t/center bg-slate-200 h-16 w-full rounded-lg text-slate-700 font-bold B",
        "props": [],
        "subComponents": [],
        "examples": [],
        "sources": []
    }
]