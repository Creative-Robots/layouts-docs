{
  "-10_More": {
    "name": "-10_More",
    "parsedName": "more",
    "folder": {
      "01_Help and Support.mdx": {
        "name": "01_Help and Support",
        "parsedName": "help-and-support",
        "entries": [
          {
            "entry": "Help & Support",
            "level": 1
          },
          {
            "entry": "Talk to an actual human",
            "level": 1
          },
          {
            "entry": "Contact support",
            "level": 1
          },
          {
            "entry": "Community",
            "level": 1
          },
          {
            "entry": "Contribute",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\nYou figured it out. Layouts is not a finished product polished at every angle.\r\nIt‚Äôs very raw, a bit buggy. We throwed it out into the wild to get feedback from people like you.\r\n\r\nWe‚Äôd love you to get in touch and tell us how you feel about it. \r\n\r\nHere are a few channels below on how to best reach out:\r\n\r\n## Talk to an actual human\r\n \r\n### Contact support\r\nReach out to Layouts.dev support by contacting us directly at help@creative-robots.ai or by clicking the _Contact Support_ button in app. \r\n\r\n**or**\r\n\r\nBy getting in touch with us on the dedicated _Contact Support_ link on our website.\r\n\r\nFor syntax questions, the best place to ask is the #syntax channel in our Discord community.\r\n\r\n### Community \r\nWe recommend joining the Layouts.dev Discord channel to meet other Layouts users and exchange tips/tricks. \r\nThe whole Layouts team lives in the Discord so it's a great place to ask questions. \r\n\r\nThe community is also a great place to report #bugs and share #product-feedback, ask for help while building and to get #help from the team or community.\r\n\r\n\r\n## Contribute \r\n\r\nIf you‚Äôre interested in contributing, we‚Äôd love to have you onboard!\r\nHere are a few ways:\r\n\r\n    **Giving feedback**:\r\n        - Feel free to contribute feedback on our Discord (see above for notes on where to best submit feedback).\r\n    \r\n    **Joining the team**: \r\n        - We‚Äôre a small company looking for funding, but we‚Äôll certainly be hiring very soon. We‚Äôd love to get in touch beforehand so we can contact you. Feel free to send us an email at hi@creative-robots.ai\r\n   \r\n    **Investing**: \r\n        - Money (Capital at Risk): We believe in the power of community investing. We currently have an open SAFE in place for people wanting to invest. Anybody can send funds and you‚Äôll be added to our SAFE as an investor. Works for contributions starting at $5k and beyond.\r\n        - Time: If you don‚Äôt have money (like a lot of us) but feel you could contribute time as a team member, we‚Äôre super open to talk. We can compensate you with a great pay rate in shares on our SAFE. It‚Äôs just shares, but hey, we‚Äôre aiming for the stars!",
          "MdxFrontMatter": {
            "title": "Help & Support",
            "description": "How to contact support and access additional resources"
          }
        }
      },
      "02_Cheatsheet.mdx": {
        "name": "02_Cheatsheet",
        "parsedName": "cheatsheet",
        "entries": [
          {
            "entry": "Cheatsheet",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\n# Intro \r\n**Layouts** is like a playground for Tailwind CSS. <br /> You write something on the left and it displays on the right. **That simple**. <br /> The only difference is that we use a more concise syntax than HTML to improve developer experience.\r\n\r\nFor example, instead of writing:\r\n\r\n```html\r\n<div class=\"bg-indigo-100\">\r\n  <button>\r\n    Hello\r\n  </button>\r\n</div>\r\n```\r\n\r\nYou would write:\r\n\r\n```\r\n/div bg-indigo-100\r\n  /button Hello\r\n```\r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Basic Syntax\r\n```\r\n/component %variant @property1=value @property2=value2 tailwind-class tailwind-class .css-class Text content\r\n  /child-component Text content\r\n    /grand-child-component Another text here\r\n```\r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Add a Component\r\nWrite `/` and select the component in the menu.\r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Get an example of use for your component\r\n```\r\n/button >>>\r\n```\r\nType `>>>` after your component name.  \r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Select component variants\r\n```\r\n/button %variantName\r\n```\r\nPlace your caret over the variant name and press `Shift + Up` or `Shift + Down`.\r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Style a Component with Tailwind Classes\r\n```\r\n/h1 Hello world text-6xl underline m-4\r\n```\r\nAdd the tailwind classes on the same line as the component.\r\n<br />\r\nIterate on values by placing your caret over the tailwind class and pressing `Shift + Up` or `Shift + Down`.\r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Ask AI for the Right Tailwind Classes\r\n```\r\n/h1 Hello (I'd like the text to have a gradient background clipped to it...)\r\n```\r\nDescribe what you need in the following format: `(<DESCRIPTION HERE>...)`  \r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Add an Image of an Icon\r\n```\r\n/image Tiger\r\n/icon Chevron left\r\n```\r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Add a Global Style for a Component\r\n```\r\n/style\r\n  /button bg-indigo-900\r\n```\r\n\r\n<br />\r\n---\r\n<br />\r\n\r\n# Change the Global Theme for the App\r\n\r\n```\r\n/theme \r\n  @primaryColor=indigo-800\r\n  @radius=\"2em\"\r\n```\r\n",
          "MdxFrontMatter": {
            "title": "Cheatsheet",
            "description": "Start using Layouts in minutes."
          }
        }
      }
    }
  },
  "00_Getting Started": {
    "name": "00_Getting Started",
    "parsedName": "getting-started",
    "folder": {
      "01_What is Layouts.mdx": {
        "name": "01_What is Layouts",
        "parsedName": "what-is-layouts",
        "entries": [
          {
            "entry": "What is Layouts",
            "level": 1
          },
          {
            "entry": "Why use Layouts.dev?",
            "level": 1
          },
          {
            "entry": "Concise syntax to help you focus on what matters",
            "level": 1
          },
          {
            "entry": "Live multi-screen, multi-preview of what youre building",
            "level": 1
          },
          {
            "entry": "Designed to be keyboard-first for fast iteration of Tailwind classes.",
            "level": 1
          },
          {
            "entry": "Tons of pre-made components to help you build complex UIs",
            "level": 1
          },
          {
            "entry": "Basically, less context switching all over the place",
            "level": 1
          },
          {
            "entry": "Helpful Links",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\n<img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/hero-graphic-UI.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/hero-graphic-UI.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\n    Layouts is a web editor we built for ourselves to ship interfaces and components at hyper-speed. It‚Äôs very opinionated, tailor-made for Tailwind and filled with features to make your idea to production journey way easier as a developer. We're currently in early beta, so lots of bugs, but we felt it‚Äôs important to build in public together with a community. \r\n    \r\n    We‚Äôd love to get your feedback!\r\n\r\n## Why use Layouts.dev?\r\n\r\n**A notebook experience for Tailwind+React developers**\r\n\r\nWe love the idea of being able to open up a blank page, write a few lines of code and see the results instantly. \r\nWith Layouts, every page you create gets a unique URL you can share instantly.\r\nAs fun to play with as a Tailwind playground, as shareable as a GitHub Gist.\r\nNo setup, no yarn install, no boilerplate, no deploy. Just play & share.\r\n\r\n**A new way for designers to contribute to code**\r\n\r\nWe've found that by improving the DX in Layouts.dev, it has the potential to be a designer's bridge to the world of coding UI with high-quality, accessible and customizable code. Historically we've felt that drag-and-drop visual builders can constrain creativity vs. a code-focused approach, which means your creativity can truly be limitless.\r\n\r\nLayouts.dev provides the intuitive visuals and frameworks that empower designers to directly build out front-end UI themselves vs. tossing designs over the wall for developers. We've all been there üòÆ‚Äçüí®. For designers familiar with CSS frameworks like Tailwind, Layouts can open up new levels of accessibility to the code layer.\r\n\r\nMatter a fact, we've even used this internally to help speed up the development process by iterating quickly between our designer and developer for UI across Layouts. \r\n\r\n### Concise syntax to help you focus on what matters\r\n<img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/Syntax_graphic.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/Syntax_graphic.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\nAt first glance, we admit this may look like a bad idea (alert! new programming language!), but we felt we needed something more readable and also way more permissive to ship UIs faster. So we built a DSL (Domain Specific Language) focused on assembling a UI with React+Tailwind.\r\n\r\nIt enables us to generate state-of-the-art React code from a more natural, very approximate input. This allows both for a short syntax using beautiful defaults and a composable syntax giving you very accurate control on the output React code, all while making the code up to 10x smaller and more readable.\r\n\r\n>**Fun fact:** we created this language back in 2021 when trying to make apps using OpenAI's GPT-3. At that time, GPT-3 was so bad at React that we felt building a language for a lower intelligence was necessary. Then we figured out it actually contributed to a nicer DX for humans too, while drastically reducing both generation time and error rates of modern AI LLMs like GPT-4.\r\n\r\n### Live multi-screen, multi-preview of what you're building\r\n\r\nAnybody with a Layouts link can display your preview and see updates as you type.\r\n\r\nSuper useful for building responsive pages.\r\n\r\n### Designed to be keyboard-first for fast iteration of Tailwind classes.\r\n\r\nWe designed Layouts in a way that leans into developer ergonomics, so you can use the keyboard to build quickly. \r\n\r\n### Tons of pre-made components to help you build complex UIs\r\n\r\nEverything from accessible Dialog Boxes, Toggles and Buttons to Auto-Completes. We are huge fans of shadcn/ui, so we wanted to offer the full-library during Private Beta.\r\n\r\nMore component libraries coming soon! üéâ\r\n\r\n### Basically, less context switching all over the place\r\n\r\nLayouts displays contextual documentation when you click into any component, class, prop or attribute. It also fetches icons, illustrations and other image assets for you.\r\n\r\nAnd you don‚Äôt need to setup a repository to make it work. **Voil√°**\r\n\r\n---\r\n## Helpful Links\r\n\r\n<CardGroup cols={2}>\r\n  <Card title=\"Quickstart\" icon=\"rocket\" href=\"/essentials/introduction\">\r\n    Start building right away.\r\n  </Card>\r\n  <Card title=\"The UI\" icon=\"display\" href=\"/essentials/editor\">\r\n    An orientation of the Layouts UI.\r\n  </Card>\r\n  <Card title=\"The syntax\" icon=\"code\" href=\"/essentials/The syntax\">\r\n    How programming works in Layouts.\r\n  </Card>\r\n  <Card title=\"Help & support\" icon=\"question\" href=\"/essentials/help\">\r\n    Best ways to get in touch.\r\n  </Card>\r\n</CardGroup>\r\n",
          "MdxFrontMatter": {
            "title": "What is Layouts",
            "description": "A new approach to building UI"
          }
        }
      },
      "02_Quickstart.mdx": {
        "name": "02_Quickstart",
        "parsedName": "quickstart",
        "entries": [
          {
            "entry": "Quickstart",
            "level": 1
          },
          {
            "entry": "How to start",
            "level": 1
          },
          {
            "entry": "Start coding",
            "level": 1
          },
          {
            "entry": "Start styling",
            "level": 1
          },
          {
            "entry": "Prompt-to-TailwindCSS",
            "level": 1
          },
          {
            "entry": "Adding images",
            "level": 1
          },
          {
            "entry": "Using components",
            "level": 1
          },
          {
            "entry": "See code output",
            "level": 1
          },
          {
            "entry": "Helpful Links",
            "level": 1
          },
          {
            "entry": "You did it!",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\n<img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/minimal_layouts.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/minimal_layouts.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\n## How to start\r\n\r\n### Start coding\r\n  <img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/mx52yve3bydx9isfufif6/start-coding_QS_Layoutsdocs.gif?rlkey=5fa0sq6h7dlp56elu7lvtn6r8&st=lki3eq7i&dl=0\" />\r\n\r\n    - Open a new page\r\n    - Write \"Hello\". _You should see \"Hello\" in preview_.\r\n    - Open the Layouts preview on your mobile device using the QR code that appears when hovering over the **Preview** panel in navigation.\r\n    - Write \"again\". You should now see \"Hello again\" in your mobile preview window.\r\n\r\n### Start styling\r\n  <img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/zhvpmfmche12o1zppygy5/start-styling_QS_LayoutsDocs.gif?rlkey=mof2bk8dlvjha3k7i50685643&st=8eqstsox&dl=0\" />\r\n   - Now add `/div` and nest your text under it.\r\n   - Add `text-xl` before or after it. This class will change the text size. Add some padding, a border, round corners, set a width that fits your text and a drop shadow to give your `/div` some space. \r\n  \r\n  **ex.**\r\n   ```syntax Layouts\r\n    /div text-xl p-4 border rounded-xl shadow-md\r\n      hello\r\n   ```\r\n  <img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/55z1wimuvfv5oq3wfsfwu/ShiftUpDown_QS_Layoutsdocs.gif?rlkey=f4qw6dcrkdezh5ozdosbst6wx&st=hgq2ri4z&dl=0\" />\r\n   - Take your cursor and click on the Tailwind class `text-xl`. Using your keyboard press `Shift+Up` or `Shift+Down` to change the text size.\r\n   \r\n### Prompt-to-TailwindCSS \r\n   If you don't know all of the right Tailwind classes, AI can help with that.\r\n\r\n   <img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/9vw1pudqrxx9aqogszzw5/PromptoClass_QS_Layoutsdocs.gif?rlkey=zc3z577o5v82s877xg5jemsk0&st=i9s2xq76&dl=0\" />\r\n   \r\n   Prompt by typing `(your prompt goes here...)`\r\n      - **ex.** `(I'd like my text to have a beautiful gradient clipped to it, from pink to purple...)`\r\n   - The AI will generate and add all the necessary Tailwind classes to style your element.\r\n\r\n### Adding images\r\n<img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/x2xq8q7jim6t1a2gmrzdf/Image_QS_Layoutsdocs.gif?rlkey=e48b7eb6bppove3ffzal00enj&st=vx2kn9df&dl=0\" />\r\n  - Erase all the content from your page and write `/image Tiger`. You'll see an image of a Tiger populate in your preview.\r\n  - Change the asset library your image comes from by using a variant. \r\n    - **ex.** `/image size-48 %google Tiger`.\r\n         <Note>The default variant is `%unsplash`</Note>\r\n  - You can also generate images with AI using variants. \r\n    - **ex.** `/image %ai/night-portrait handsome 22yo new york pizza delivery guy size-48`.\r\n\r\n### Using components\r\n<img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/apknne24w4qw0ridhilyd/Components_QS_Layoutsdocs.gif?rlkey=nmil3mb4uu5dl7bwjp4qh2nyi&st=ooimzy69&dl=0\" />\r\n  - Type `/`. \r\n  - Select any component from the slash menu. \r\n  - After the component name, type `>>>` to generate the component's reference implementation. \r\n  - To see different implementations for a component, click on the `/component` in the editor and open the Docs panel in navigation.  \r\n\r\n### See code output\r\n  - Open your code panel. \r\n  - Click on the 'Copy' button to copy-paste your code. \r\n  -  If your code has dependencies, the output code will contain comments to help you setup those dependencies easily. \r\n\r\n## Helpful Links\r\n\r\n<CardGroup cols={2}>\r\n  <Card title=\"Quickstart\" icon=\"rocket\" href=\"/essentials/introduction\">\r\n    Start building right away.\r\n  </Card>\r\n  <Card title=\"The UI\" icon=\"display\" href=\"/essentials/editor\">\r\n    An orientation of the Layouts UI.\r\n  </Card>\r\n  <Card title=\"The syntax\" icon=\"code\" href=\"/essentials/The syntax\">\r\n    How programming works in Layouts.\r\n  </Card>\r\n  <Card title=\"Help & support\" icon=\"question\" href=\"/essentials/help\">\r\n    Best ways to get in touch.\r\n  </Card>\r\n</CardGroup>\r\n\r\n## You did it!\r\n\r\nCongrats! You‚Äôre ready to start building in Layouts! Need support or want to give some feedback? You can join our [community](https://discord.com) or drop us an email at help@creative-robots.ai\r\n\r\n",
          "MdxFrontMatter": {
            "title": "Quickstart",
            "description": "Everything you need to start using Layouts."
          }
        }
      },
      "03_The UI.mdx": {
        "name": "03_The UI",
        "parsedName": "the-ui",
        "entries": [
          {
            "entry": "The UI",
            "level": 1
          },
          {
            "entry": "The Editor",
            "level": 1
          },
          {
            "entry": "Slash Menu",
            "level": 1
          },
          {
            "entry": "Explainer",
            "level": 1
          },
          {
            "entry": "Reference Implementation",
            "level": 1
          },
          {
            "entry": "Documentation Panel",
            "level": 1
          },
          {
            "entry": "Preview",
            "level": 1
          },
          {
            "entry": "Project URLs",
            "level": 1
          },
          {
            "entry": "Code export",
            "level": 1
          },
          {
            "entry": "NextJS Sync",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "<img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/hero-graphic-UI.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/hero-graphic-UI.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\n\r\n## The Editor \r\n\r\n <img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/editor_graphic.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/editor_graphic.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\n  The editor is the core programming workspace in Layouts. It is where you'll be primarily living when making code changes. Start programming here to watch your design come to life. We've also built in some ergonomics here via keyboard shortcuts to help speed up your workflow.  \r\n\r\n### Slash Menu\r\n <img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/slash_graphic.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/slash_graphic.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\nBy pressing `/` while in the editor, you can access all shadcn/UI components as well as HTML components which you can use to build your project.\r\n\r\n### Explainer\r\n <video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/g57eqj5g1ml0rgxtmbcyx/expaliner-video.mp4?rlkey=khuub1sw254ndy20i1bnwr602&st=klt62cew&dl=0\"\r\n></video>\r\n\r\nWhen focused on any Tailwind class, use `Shift + Up` or `Shift + Down` to cycle thru corresponding Tailwind classes.\r\n\r\n### Reference Implementation\r\n<video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/m3s1rr10ynx4mqjenz2qu/ref-implementation_docs.mp4?rlkey=q1ov1qkmqg67kddzp8p6lfyqs&st=04qg5m1z&raw=1\"\r\n></video>\r\n\r\nTo build even faster in your project, or get quick insight on how to best structure components, type `>>>` after a component tag to paste it‚Äôs reference implementation. \r\n\r\n\r\n## Documentation Panel\r\n<img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/docspanel-graphic.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/docspanel-graphic.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\nIncluded in Layouts is a documentation panel that‚Äôs context-aware, meaning if you click on any component or Tailwind class in the editor, the relevant documentation will populate in your docs panel.\r\nThis includes native Layouts, TailwindCSS and HTML docs.\r\n\r\n## Preview\r\n<video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/rpqo6t83zd9kcbor8bb6z/Preview_Docs.mp4?rlkey=c85l8w7qe518dbbeqb769py1j&st=9bg0n9ir&raw=1\"\r\n></video>\r\n\r\nAny changes you make within the editor will render real-time in the Preview panel in Layouts. Users can scan the QR code in each panel's tooltip in order to open the window across other devices (mobile, tablet, etc). \r\n\r\nQuite useful to ensure:\r\n- Responsiveness across breakpoints when building your projects\r\n- Check your design on larger screens\r\n- Or keep your preview on a separate monitor.\r\n\r\n### Project URLs\r\n\r\nYou can also access each panel from anywhere by it‚Äôs URL:\r\n\r\n      - `https://layouts.dev/<pageId>`: Open the preview \r\n      - `https://layouts.dev/<pageId>/edit`: Open the editor\r\n      - `https://layouts.dev/<pageId>/doc`: Open the contextual doc\r\n      - `https://layouts.dev/<pageId>/code`: See the code output (HTML or React)\r\n\r\n### Code export\r\n\r\n<img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/code_export.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/code_export.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\nWhenever you‚Äôre ready to export your page, by clicking on the Code panel in navigation, you‚Äôll have the ability to copy and paste well-engineered React code into your project. \r\n\r\n### NextJS Sync\r\n\r\n<img\r\n  className=\"block dark:hidden\"\r\n  src=\"/images/code_export.svg\"\r\n  alt=\"Hero Light\"\r\n/>\r\n<img\r\n  className=\"hidden dark:block\"\r\n  src=\"/images/code_export.svg\"\r\n  alt=\"Hero Dark\"\r\n/>\r\n\r\nIf on the **Frontend Plan** user's have access to one of our most powerful features, NextJS Sync. With it, users have access to our CLI and are able to sync their Layouts project with a NextJS project locally.\r\n\r\n**Benefits include:**\r\n- Automatic updates with your local project \r\n- Maintain design consistency from prototype to production\r\n- Accelerate your React workflow. Quickly build your interface, than add backend functions in your IDE. \r\n\r\n",
          "MdxFrontMatter": {
            "title": "The UI",
            "description": "A quick overview of Layouts UI"
          }
        }
      },
      "04_The syntax.mdx": {
        "name": "04_The syntax",
        "parsedName": "the-syntax",
        "entries": [
          {
            "entry": "The syntax",
            "level": 1
          },
          {
            "entry": "Intro",
            "level": 1
          },
          {
            "entry": "Tabs and `/` instead of XML components.",
            "level": 1
          },
          {
            "entry": "Works with (included) React components or any HTML component.",
            "level": 1
          },
          {
            "entry": "Tailwind classes are first-class citizens",
            "level": 1
          },
          {
            "entry": "Props with `@`",
            "level": 1
          },
          {
            "entry": "Variables",
            "level": 1
          },
          {
            "entry": "Short vs. Composable Syntax",
            "level": 1
          },
          {
            "entry": "Custom classes",
            "level": 1
          },
          {
            "entry": "Variants",
            "level": 1
          },
          {
            "entry": "Summary",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\n## Intro\r\n\r\nThe syntax we use in Layouts is different from HTML or JSX. See why [here](essentials/What%20is%20Layouts#concise-syntax-to-help-you-focus-on-what-matters).\r\nFear not! We decided to keep as close to the original, so it works just the same. üòé\r\n\r\nHere‚Äôs what you need to know:\r\n\r\n### Tabs and `/` instead of XML components.\r\n\r\n  Instead of writing: \r\n  ``` HTML HTML\r\n  <div class=\"bg-indigo-100\" >\r\n\t<button>\r\n\t\tHello\r\n\t</button>\r\n</div>\r\n```\r\nYou write: \r\n```syntax Layouts\r\n/div bg-indigo-100\r\n\t/button Hello\r\n```\r\n### Works with (included) React components or any HTML component.\r\n\r\nAny HTML component like `/div` or `/section` will work like: \r\n\r\n```syntax Layouts\r\n/div Hello!\r\n```\r\n### Tailwind classes are first-class citizens\r\n\r\nAny Tailwind class you input will be detected and used as a class name for the component on the same line: \r\n```syntax Layouts\r\n/button bg-indigo-100\r\n```\r\nIs the same as: \r\n```HTML HTML\r\n<button className=\"bg-indigo-100\" />\r\n```\r\n<Info>Tailwind classes can live on the same line as the `/component` or as a child of the component, on a line \r\nwith only Tailwind classes.</Info>\r\n\r\n**Here's an example:**\r\n```syntax Layouts\r\n/button \r\n   bg-indigo-100 font-medium text-xl \r\n   This works too\r\n```\r\n\r\n### Props with `@`\r\n\r\nUse:\r\n```syntax Layouts\r\n/button @onClick={() => alert ('Haha!')}\r\n```\r\nInstead of:\r\n```HTML HTML\r\n<button onClick={()  => alert('Haha!')} />\r\n```\r\n<Info>Props can live either on the same line as the `/component`, or nested as a child with one prop per line.</Info>\r\n\r\n**Here's an example:**\r\n```syntax Layouts\r\n  /button \r\n  @onClick={()  => alert('Haha!')}\r\n  This works too\r\n  ```\r\n\r\n### Variables\r\n  \r\nLayouts uses a simplified syntax for using variables with components.\r\n- All variable names are prefixed with `$`\r\n- Adding a variable name on a component line binds the variable to the component\r\n- Adding the variable name in props or as content uses the variable value there\r\n\r\n**Here's an example:**\r\n```\r\n  /input $name What‚Äôs your name?  \r\n  /h1 Hello $name !\r\n```\r\n\r\nYou can also load data from external sources into variables\r\nSee the specific section about data sources [here](essentials/datasources)\r\n\r\n  **ex. Data Source**\r\n    ```syntax Layouts\r\n    /data $movies = mock://movies with title and poster\r\n    /div w-full overflow-x-scroll\r\n    \t/hstack bg-slate-950 gap-5 p-4 text-white items-start w-fit\r\n    \t\t/foreach $movies\r\n    \t\t\t/vstack gap-3 %center justify-start\r\n    \t\t\t\t/div w-32\r\n    \t\t\t\t\t/aspect-ratio %video-portrait overflow-hidden\r\n    \t\t\t\t\t\t/image $item.poster size-full object-cover rounded hover:scale-105 cursor-pointer\r\n    \t\t\t\t/center $item.title w-full text-center text-sm\r\n    ```\r\n\r\n### Short vs. Composable Syntax\r\nOn one hand, a great developer experience should enable you to build something at the speed of light.\r\nOn the other hand, it should give you unobstructed control over the tiniest details of each component.\r\nTo give you both, most components built in Layouts are usable with two types of syntax.\r\n\r\nThe short syntax is what you will use when you need great default and little customization.\r\nIt‚Äôs the syntax we use most of the time in reference implementations.\r\nIt‚Äôs made to be as easy to use as MDX and super intuitive _(hopefully...feedback welcome!)_\r\n    \r\n    **ex. Context Menu**\r\n    ```syntax Short Syntax\r\n    /context-menu\r\n     Menu item 1 <Alt 1>\r\n     Menu item 2\r\n          # Label\r\n          Sub-menu item 1 <Shift P>\r\n          ---\r\n          Sub-menu item 2 <Cmd S>\r\n    ```\r\n\r\n**Composable syntax** is what you‚Äôll need when defaults don‚Äôt suit you, or if you need to surgically  \r\nchange the style of a specific element within your components.\r\n\r\n    **ex. Context Menu**\r\n    ```syntax Composable\r\n/div Right click here flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\r\n\t/context-menu w-64 \r\n\t\t/item Back\r\n\t\t/shortcut \r\n\t\t\t‚åò\r\n\t/item Forward\r\n\t\t/shortcut ‚åò]\r\n\t\t/item Reload\r\n\t\t/shortcut ‚åòR\r\n    ``` \r\n\r\n### Custom classes\r\n\r\nWhen you find yourself having to break away from the design system to get your design right, consistent with TailwindCSS, you can use arbitrary values in your `/theme`, `/style` and across individal components.\r\n\r\nFor example, you can add some top-margin to a `/div` by using Tailwind‚Äôs square bracket notation to generate a class on any arbitrary value.\r\n\r\nThis works for everything, including things like text colors, font styles, pseudo-elements, and more.\r\n\r\n**ex.**\r\n```syntax Layouts\r\n/div flex flex-row items-center mt-[200px]\r\n  /h1 My avatar\r\n  /avatar https://github.com/shadcn.png\r\n\t\t\t@fallback=\"CN\"\r\n```\r\n\r\n### Variants\r\n\r\n<video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/ldp5j91ws0nadfobg63la/Variants_Syntax_Layoutsdocs.mp4?rlkey=9t8pjjaf4f28dedk5p1uh55ts&st=6k2bvzg1&dl=0\"\r\n></video>\r\n\r\nMany components in Layouts have an alternative version which can share many of the same visual and behavioral differences. \r\n\r\nFor instance, if you're working with the `/alert` component in Layouts, you can quickly reference it's implementation (using `>>>`) and notice it's variant is set automatically set to `%default`.\r\nTo change a component's variant, you can either type it in manually, or (for ease of use), cycle thru available variants using your `Shift+Up, Shift+down` on your keyboard.\r\n\r\nTo look up a component's available variants, you can reference Layouts documentation via the Docs panel in navigation. \r\n\r\n\r\n### Summary \r\n\r\nAfter the `/component`, you can apply a number of different properties including:\r\n    - Type any Tailwind classes and they‚Äôll be recognized as such. For example, write `bg-indigo-900`\r\n    - Type any other CSS class using the format `.customClassName`\r\n    - Specify variants for components using `%variantName` syntax\r\n    - Use custom classes across your `/theme`, `/style`, or individual components in Layouts like `/p-[24px]`.\r\n    - Add props like `@type=button` or `@title=‚ÄùTitle with spaces‚Äù` which will be equivalent to HTML attributes like `<div type=‚Äùbutton‚Äù ></div>`\r\n    - Bind a variable to a component by using `$variableName`\r\n    - Any plain text will be recognized as a text-string and placed as a child of the component\r\n\r\n  To summarize, type any valid HTML component and you can use any Tailwind class on it. Style away!",
          "MdxFrontMatter": {
            "title": "The syntax",
            "description": "How programming works in Layouts.dev"
          }
        }
      }
    }
  },
  "01_Going further": {
    "name": "01_Going further",
    "parsedName": "going-further",
    "folder": {
      "-02_Components": {
        "name": "-02_Components",
        "parsedName": "components",
        "folder": {
          "nothing": {
            "name": "nothing",
            "parsedName": "nothing",
            "entries": [],
            "content": {
              "MdxContent": "",
              "MdxFrontMatter": {}
            }
          }
        }
      },
      "01_Theming.mdx": {
        "name": "01_Theming",
        "parsedName": "theming",
        "entries": [
          {
            "entry": "Theming",
            "level": 1
          },
          {
            "entry": "Theme variables",
            "level": 1
          },
          {
            "entry": "AI-generated palette",
            "level": 1
          },
          {
            "entry": "Styling",
            "level": 1
          },
          {
            "entry": "Fonts",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\nAll pre-made components in Layouts are built around a central design system.\r\nThis makes the design of your page easily customizable to your brand needs, and your code resilient to eventual future design system changes.\r\n\r\nChanging the theme of your page is as easy as adding a `/theme` component.\r\nIt enables you to change the radius of elements, the colors and we hope a few more things in the future. \r\n\r\n\r\n### Theme variables\r\n<img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/88djayi834ru8f90csz8q/Darkmode_QS_Layoutsdocs.gif?rlkey=2801228goxj4gemi1tnet45hk&st=ttlui5y7&dl=0\" />\r\n\r\nHere is an example with all theme variables you can set:\r\n```syntax Layouts\r\n/theme\r\n  @colorScheme=\"light\" // Light or dark mode\r\n    @radius=\"0.5rem\" // Border radius for card, input, and buttons\r\n    @background=\"primary-50\" // Color overrides\r\n    @accent=\"#00ff00\"\r\n    @foreground=\"slate-900\"\r\n    @muted=\"slate-100\"\r\n    @mutedForeground=\"slate-800\"\r\n    @card=\"white\"\r\n    @cardForeground=\"slate-900\"\r\n    @popover=\"white\"\r\n    @popoverForeground=\"slate-900\"\r\n    @border=\"slate-200\"\r\n    @input=\"slate-100\"\r\n    @primary=\"blue-600\"\r\n    @primaryForeground=\"white\"\r\n    @secondary=\"blue-200\"\r\n    @secondaryForeground=\"blue-800\"\r\n    @accent=\"green-800\"\r\n    @accentForeground=\"white\"\r\n    @destructive=\"red-600\"\r\n    @destructiveForeground=\"white\"\r\n    @ring=\"blue-600\"\r\n```\r\n\r\n### AI-generated palette\r\n<img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/ycud3jbwtiq0qf2plhh8u/AIPalette_Themeing_Layoutsdocs.gif?rlkey=lppgtvz1yx4elprodjg5vu7p3&st=1zzlmk67&dl=0\" />\r\n\r\nTo use a color palette generated by AI in your project's theme, you'll include the `@palette` prop in your `/theme`: \r\n\r\n```syntax Layouts\r\n/theme\r\n  @palette=Intense Mediterranean turquoise as primary, creamy white in background\r\n```\r\n\r\nTo override palette colors provided by the AI: \r\n```syntax Layouts\r\n/theme\r\n    @palette=Intense Mediterranean turquoise as primary, creamy white in background\r\n    @background=\"primary-50\" // Color overrides\r\n```\r\n### Styling \r\n<video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/lysj8lygvw7tsl4qai0mz/Style_Themeing_Layoutsdocs.mp4?rlkey=n7ot08wxof09mp84fmvlww1j9&st=j256304s&dl=0\"\r\n></video>\r\n\r\nSometimes, you need to change the default style of a component, either on a full website/app or within a specific section.\r\nYou can use `/style` for that. `/style` is a component that applies Tailwind classes to its parent's descendants. Use this component to customize font, colors and more across your project.\r\n\r\n**ex:**\r\n```syntax Layouts\r\n/style\r\n    /h1 font-['Jersey_10'] text-8xl\r\n\r\n/h1 Hello, styles!\r\n```\r\n\r\n### Fonts \r\nNeed custom fonts? In Layouts, users can leverage fonts via [Google Fonts](https://fonts.google.com/) as well as any fonts hosted locally on your machine. \r\n\r\n**ex.**\r\n``` syntax Layouts\r\n/div flex flex-col p-2 items-center border border-gray-200 rounded-lg shadow-sm\r\n    /p This is a card font-['Roboto'] text-xl font-semibold\r\n```\r\n\r\n<Info> Heads up! You‚Äôll sometimes be tempted to use your local fonts not available in Google Fonts, because they‚Äôll seem to work on your machine. \r\nBear in mind that they won‚Äôt display correctly on other people‚Äôs navigators.</Info>\r\n\r\n",
          "MdxFrontMatter": {
            "title": "Theming",
            "description": "A short guide to using theming and styling elements in Layouts"
          }
        }
      },
      "02_Data sources.mdx": {
        "name": "02_Data sources",
        "parsedName": "data-sources",
        "entries": [
          {
            "entry": "Data sources",
            "level": 1
          },
          {
            "entry": "Detailed usage",
            "level": 1
          },
          {
            "entry": "Coming soon",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\nIn Layouts you can add external or JSON data to any project via the `/data` component.\r\n\r\n**ex:**\r\n```syntax Data \r\n/data $movies = mock://movies with title and poster\r\n/div w-full overflow-x-scroll\r\n\t/hstack bg-slate-950 gap-5 p-4 text-white items-start w-fit\r\n\t\t/foreach $movies\r\n\t\t\t/vstack gap-3 %center justify-start\r\n\t\t\t\t/div w-32\r\n\t\t\t\t\t/aspect-ratio %video-portrait overflow-hidden\r\n\t\t\t\t\t\t/image $item.poster size-full object-cover rounded hover:scale-105 cursor-pointer\r\n\t\t\t\t/center $item.title w-full text-center text-sm\r\n```\r\n\r\n### Detailed usage \r\n\r\nFetch data via from our AI-based mockup API.\r\n\r\n**ex:**\r\n```syntax Mockup API\r\n/data $movies = mock://A list of movies with title and poster\r\n```\r\n### Coming soon \r\n\r\n<Warning>Below `/data` functions not yet available. Coming soon!</Warning>\r\n\r\nFetch data from Airtable\r\n\r\n**ex:**\r\n```syntax Airtable\r\n/data $users = airtable://my-airtable-account/my-database-name/my-table-name\r\n```\r\n\r\nFetch data from Stripe\r\n\r\n**ex:**\r\n```syntax Stripe\r\n/data $customers = stripe://my-stripe-account/customers\r\n```\r\n\r\nFetch data from MongoDB\r\n\r\n**ex:**\r\n```syntax MongoDB\r\n/data $customers = mongo://my-mongodb-account/my-database-name/my-collection-name\r\n```\r\n",
          "MdxFrontMatter": {
            "title": "Data sources",
            "description": "How to manage and use data sources in Layouts"
          }
        }
      },
      "03_Programming with variables.mdx": {
        "name": "03_Programming with variables",
        "parsedName": "programming-with-variables",
        "entries": [
          {
            "entry": "Programming with variables",
            "level": 1
          },
          {
            "entry": "Detailed usage",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "\r\nIn Layouts, the `/foreach` component, allows for you to iterate over a list of items using variables:\r\n\r\n**ex.**\r\n```syntax Layouts\r\n/hstack gap-3\r\n\t/foreach [1...10]\r\n\t\t/center bg-slate-200 size-11 text-slate-700 rounded-lg $item\r\n```\r\n### Detailed usage\r\n\r\nWith a static array: \r\n```syntax Layouts\r\n/grid gap-2\r\n\t/foreach [apple, orange, pineapple]\r\n\t\t/center p-6 bg-slate-200 $item\r\n```\r\n\r\nWith a static array of objects:\r\n```syntax Layouts\r\n/grid gap-2\r\n\t/foreach [{ name: apple }, { name:orange }, { name: pineapple }]\r\n\t\t/center p-6 bg-slate-200 $item.name\r\n```\r\n\r\nWith static number series:\r\n```syntax Layouts\r\n/grid gap-2\r\n\t/foreach [3...8]\r\n\t\t/center p-6 bg-slate-200 $item\r\n```\r\n\r\nWith dynamic data:\r\n```syntax Layouts\r\n/data $movies = mock://A list of movies with title and poster\r\n/grid gap-2\r\n\t/foreach $movies\r\n\t\t/center p-6 bg-slate-200 $item.title\r\n```",
          "MdxFrontMatter": {
            "title": "Programming with variables",
            "description": "How to use variables and loops in Layouts"
          }
        }
      },
      "04_Working with images.mdx": {
        "name": "04_Working with images",
        "parsedName": "working-with-images",
        "entries": [
          {
            "entry": "Working with images",
            "level": 1
          },
          {
            "entry": "Images",
            "level": 1
          },
          {
            "entry": "Using image variants",
            "level": 1
          },
          {
            "entry": "Icons",
            "level": 1
          },
          {
            "entry": "Illustrations",
            "level": 1
          },
          {
            "entry": "More detailed variant usage",
            "level": 1
          }
        ],
        "content": {
          "MdxContent": "<img height=\"full\" src=\"https://dl.dropbox.com/scl/fi/x2xq8q7jim6t1a2gmrzdf/Image_QS_Layoutsdocs.gif?rlkey=e48b7eb6bppove3ffzal00enj&st=vx2kn9df&dl=0\" />\r\nIn Layouts, users can leverage AI or access various asset libraries to generate various types of images, modify them on the fly with modifiers, and change an image's aspect ratio, radius etc.\r\n\r\n### Images\r\n\r\nThe `/image` component in Layouts fetches an image from the internet or from your favorite asset libraries.\r\n\r\n**ex:**\r\n```syntax Layouts\r\n/image %unsplash spaceship size-48 rounded-lg\r\n```\r\n\r\n### Using image variants \r\n\r\n<video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/zu4ob8vqqely3shyuoijn/Variants_Images_Layoutsdocs.mp4?rlkey=7io4n0hw8ra4hybrwap56fep1&st=2xh4po5l&dl=0\"\r\n></video>\r\n\r\n\r\nIf you'd like to set more constraints on where the image is sourced and how you'd like it to be generated, use the `%variant` to set constraints.\r\n\r\nFor instance, if you'd like to find an image of a tiger from Google images, use the `/image` component followed by `%google` on the same line.\r\n\r\n**ex.**\r\n``` syntax Layouts\r\n/image %google tiger\r\n```\r\n\r\nAvailable image variants include:\r\n\r\n| %variant | Description                           |\r\n| -------- | ------------------------------------- |\r\n| %unsplash    | Source from Unsplash              |\r\n| %google      | Source from Google Images |\r\n| %lexica      | Generate an image with Lexica AI |\r\n| %lexica-aperture | Generate a photorealistic image with Lexica AI |\r\n| %dall-e  | Generate an image with OpenAI's Dall-e |\r\n| %sdxl    | Generate an image from Stable Diffusion |\r\n| %ai/3D-clay-icon | Generate a 3D clay icon using AI |\r\n| %ai/children-book | Generate a children's book style image using AI |\r\n| %ai/clear-style | Generate a clear illustration using AI |\r\n| %ai/comics | Generate a comic-style image using AI |\r\n| %ai/flat-illustration | Generate a flat illustration using AI |\r\n| %ai/interior-design | Generate images of various interior styles using AI |\r\n| %ai/night-portrait | Generate an night scene portrait using AI |\r\n| %ai/outline-icon | Generate an outline style icon using AI |\r\n| %ai/poly-clay-icon | Generate a geometric clay icon using AI |\r\n| %ai/portrait | Generate a portrait-style image using AI |\r\n| %ai/undraw | Generate an image from unDraw's open source library |\r\n| %ai/vector-art | Generate vector art using AI |\r\n\r\n\r\n\r\n### Icons\r\n\r\n<video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/dryivajxo6j677avz429r/Icon_Images_Layoutsdocs.mp4?rlkey=qn7vy42dzwbh5bpwob2us63wq&st=g42gh59s&dl=0\"\r\n></video>\r\n\r\nUse the `/icon` component in Layouts whenever you need to use a icon in your design. All icons in Layouts are made available via [Lucide](https://lucide.dev/).\r\n\r\nFor example, if your looking for a rocket icon for your primary `/button` on a landing page, nest the `/icon` component as a child under the button. On the same line as your `/icon` component, type in what you need and we'll find the icon most relevant based on your description. \r\n\r\n**ex.**\r\n```\r\n/button %default\r\n\t/icon rocket \r\n\t/p Get started \r\n```\r\n\r\n### Illustrations\r\n\r\n<video\r\n  autoPlay\r\n  muted\r\n  loop\r\n  playsInline\r\n  className=\"w-full aspect-video\"\r\n  src=\"https://dl.dropbox.com/scl/fi/mbq3oz2w1ylu86z75rcp3/Illustrations_Images_Layoutsdocs.mp4?rlkey=ppzivyw1igpk4wklxwfpaavmh&st=fccbs0dy&dl=0\"\r\n></video>\r\n\r\n\r\nUse the `/illustration` component if you need to use an illustration in your design. \r\nFor instance, if you've ever needed a minimalist illustration for a landing page, you can use the `/illustration` component and `%minimalistic` variant. On that same line, type in what you need and we‚Äôll find the most relevant illustration based on your description.\r\n\r\n**ex.**\r\n``` syntax Layouts\r\n/div flex flex-col items-center p-12\r\n\t/illustration %minimalistic video call\r\n```\r\nOther available variants for illustrations include: \r\n| Illustration variants  |\r\n| -------- |\r\n| %kukla-angle\r\n| %kukla-face\r\n| %flatline\r\n| %isometric \r\n| %monochromatic\r\n| %outline\r\n| %two-color \r\n| %minimalistic \r\n\r\n\r\n### More detailed variant usage\r\n\r\nGet an image from Unsplash:\r\n```syntax Layouts\r\n/image w-40 %unsplash Tiger w-40\r\n```\r\n\r\nGet an image from Google:\r\n```syntax Layouts\r\n/image w-40 %google Tiger w-40\r\n```\r\n\r\nGet an image by url:\r\n```syntax Layouts\r\n/image w-40 https://w7.pngwing.com/pngs/293/485/png-transparent-tailwind-css-hd-logo.png My image description here\r\n```\r\n\r\nApply transforms to an image:\r\n```syntax Layouts\r\n/image w-40 %google Lion | remove-bg\r\n```\r\n\r\nCreate an image with the right aspect-ratio:\r\n```syntax Layouts\r\n/div w-40\r\n\t/aspect-ratio %video\r\n\t\t/image Tiger size-full object-cover\r\n```\r\n\r\nGenerate an image with AI:\r\n```syntax Layouts\r\n/image w-40 %ai/flat-illustration Calendar\r\n```\r\n\r\nApply transforms to an illustration:\r\n```syntax Layouts\r\n/image w-40 %ai/flat-illustration Calendar | remove-bg | vectorize\r\n```\r\n\r\n",
          "MdxFrontMatter": {
            "title": "Working with images",
            "description": "How to create and manage images in Layouts"
          }
        }
      }
    }
  }
}