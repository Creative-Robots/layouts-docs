[
  {
    "name": "a",
    "parsedName": "a",
    "content": {
      "tag": "a",
      "allowedAttributes": [
        {
          "name": "href",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "target",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            }
          ]
        },
        {
          "name": "download",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "rel",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "HTML <a> Tag",
      "shortDescriptionOfTheTag": "The <a> tag defines a hyperlink, which is used to link from one page to another. The most important attribute of the <a> element is the href attribute, which indicates the link's destination.",
      "usageExamples": [
        {
          "title": "Simple usage",
          "description": "A simple example of using the <a> tag to link to another webpage.",
          "code": "<a href='https://www.example.com'>Visit Example.com</a>"
        },
        {
          "title": "With target attribute",
          "description": "An example of using the <a> tag with the target attribute to open a link in a new tab.",
          "code": "<a href='https://www.example.com' target='_blank'>Open Example.com in new tab</a>"
        },
        {
          "title": "With download attribute",
          "description": "An example of using the <a> tag with the download attribute to download a file.",
          "code": "<a href='path/to/file.pdf' download>Download the file</a>"
        }
      ]
    }
  },
  {
    "name": "abbr",
    "parsedName": "abbr",
    "content": {
      "tag": "abbr",
      "allowedAttributes": [
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": []
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": []
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": []
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": []
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "HTML Abbreviation Tag",
      "shortDescriptionOfTheTag": "The HTML 'abbr' tag is used to denote an abbreviation or acronym. The 'title' attribute can be used to present the full version of the abbreviation/acronym when the user hovers their mouse over the text.",
      "usageExamples": [
        {
          "title": "Simple Use Of 'abbr' Tag",
          "description": "This example shows how to use the 'abbr' tag to denote an abbreviation.",
          "code": "<p>The <abbr title='World Health Organization'>WHO</abbr> was founded in 1948.</p>"
        },
        {
          "title": "Using 'abbr' With CSS",
          "description": "This example shows how to use CSS with the 'abbr' tag to provide a visual cue that the text is an abbreviation.",
          "code": "<style>abbr[title] { border-bottom: 1px dotted; }</style><p>The <abbr title='World Health Organization'>WHO</abbr> was founded in 1948.</p>"
        }
      ]
    }
  },
  {
    "name": "address",
    "parsedName": "address",
    "content": {
      "tag": "address",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "HTML <address> Tag",
      "shortDescriptionOfTheTag": "The HTML <address> tag represents the contact information for the author/owner of a document/article or the parent <article> or <body> element, depending on its context. It can include physical address, URL, email address, phone number etc. The addresses inside <address> tag are usually in an italic typeface (browser default style). HTML5 does not support the align attribute in the address tag.",
      "usageExamples": [
        {
          "title": "Example of the <address> tag",
          "description": "This example uses the <address> tag to specify the contact information for the author of the document",
          "code": "<address>\n  Written by <a href='mailto:example@example.com'>John Doe</a>.\n  Visit us at:\n  Example.com\n  Box 564, Disneyland\n  USA\n</address>"
        }
      ]
    }
  },
  {
    "name": "animate",
    "parsedName": "animate",
    "content": {
      "tag": "animate",
      "allowedAttributes": [
        {
          "name": "attributeName",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "attributeType",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "auto",
                "CSS",
                "isolate",
                "local",
                "none"
              ]
            }
          ]
        },
        {
          "name": "from",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "to",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "dur",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "animate",
      "shortDescriptionOfTheTag": "The animate tag is used to define animations in SVG images.",
      "usageExamples": [
        {
          "title": "Basic animate example",
          "description": "This example shows how to use the animate tag to create a simple animation.",
          "code": "<svg>\n  <circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\">\n    <animate attributeName=\"r\" attributeType=\"XML\" from=\"40\" to=\"10\" dur=\"5s\"/>\n  </circle>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "area",
    "parsedName": "area",
    "content": {
      "tag": "area",
      "allowedAttributes": [
        {
          "name": "alt",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "coords",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "shape",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "default",
                "rect",
                "circle",
                "poly"
              ]
            }
          ]
        },
        {
          "name": "href",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "target",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            }
          ]
        },
        {
          "name": "rel",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "media",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "hreflang",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "referrerPolicy",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "no-referrer",
                "no-referrer-when-downgrade",
                "origin",
                "origin-when-cross-origin",
                "same-origin",
                "strict-origin",
                "strict-origin-when-cross-origin",
                "unsafe-url"
              ]
            }
          ]
        },
        {
          "name": "download",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "<area> Tag",
      "shortDescriptionOfTheTag": "Defines an area inside an image map that has predefined clickable areas.",
      "usageExamples": [
        {
          "title": "Creating a clickable area",
          "description": "This example demonstrates the usage of the <area> tag to create a clickable region within an image map. The image map is marked with the usemap attribute and points to the map's ID.",
          "code": "<img src='workplace.jpg' usemap='#workmap' alt='Workplace'><map name='workmap'><area shape='rect' coords='34,44,270,350' alt='Computer' href='computer.html'></map>"
        }
      ]
    }
  },
  {
    "name": "article",
    "parsedName": "article",
    "content": {
      "tag": "article",
      "allowedAttributes": [
        {
          "name": "global attributes",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "<article>",
      "shortDescriptionOfTheTag": "The <article> HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry.",
      "usageExamples": [
        {
          "title": "Basic usage of <article>",
          "description": "This example shows how to mark up a simple article, including a header with a title and publication date, and paragraphs of content.",
          "code": "<article>\n  <header>\n    <h1>Article Title</h1>\n    <p>Published on: <time datetime=\"2023-01-27\">January 27, 2023</time></p>\n  </header>\n  <p>This is a paragraph of content in the article...</p>\n  <p>Another paragraph of article content...</p>\n</article>"
        },
        {
          "title": "Article with sections",
          "description": "The article element can also be used to enclose sections of content that should be treated as a single, independent item. This example includes multiple sections within the article.",
          "code": "<article>\n  <header>\n    <h1>Main Article Title</h1>\n  </header>\n  <section>\n    <h2>Section 1 Title</h2>\n    <p>Content of the first section...</p>\n  </section>\n  <section>\n    <h2>Section 2 Title</h2>\n    <p>Content of the second section...</p>\n  </section>\n</article>"
        }
      ]
    }
  },
  {
    "name": "aside",
    "parsedName": "aside",
    "content": {
      "tag": "aside",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "right",
                "center",
                "justify"
              ]
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Aside",
      "shortDescriptionOfTheTag": "The <aside> tag defines some content aside from the content it is placed in.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "An example of using the <aside> tag.",
          "code": "<aside>\n   <h2>Related Links</h2>\n   <a href=\"#\">Link 1</a>\n   <a href=\"#\">Link 2</a>\n</aside>"
        },
        {
          "title": "Example with Alignment and Styling",
          "description": "An example of using alignment and styling with the <aside> tag.",
          "code": "<aside align=\"left\" style=\"background-color: lightgray;\">\n   <h2>Important Note</h2>\n   <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n</aside>"
        }
      ]
    }
  },
  {
    "name": "audio",
    "parsedName": "audio",
    "content": {
      "tag": "audio",
      "allowedAttributes": [
        {
          "name": "autoplay",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "controls",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "loop",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "muted",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Audio",
      "shortDescriptionOfTheTag": "The <audio> tag is used to embed sound content in a document, such as music or other audio streams.",
      "usageExamples": [
        {
          "title": "Basic Audio Element",
          "description": "Embedding audio with controls.",
          "code": "<audio controls>\n  <source src=\"audioFile.mp3\" type=\"audio/mpeg\">\n  Your browser does not support the audio tag.\n</audio>"
        },
        {
          "title": "Autoplay Audio",
          "description": "Embedding audio that automatically plays when loaded.",
          "code": "<audio autoplay>\n  <source src=\"audioFile.mp3\" type=\"audio/mpeg\">\n  Your browser does not support the audio tag.\n</audio>"
        }
      ]
    }
  },
  {
    "name": "b",
    "parsedName": "b",
    "content": {
      "tag": "b",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "b",
      "shortDescriptionOfTheTag": "The <b> HTML element is used to draw the reader's attention to the enclosed text by making it bold.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "This example shows how to use the <b> tag to make text bold:",
          "code": "<p>This is <b>bold</b> text.</p>"
        },
        {
          "title": "Example 2",
          "description": "Another example of using the <b> tag within a heading:",
          "code": "<h1>This is a <b>bold</b> heading</h1>"
        }
      ]
    }
  },
  {
    "name": "base",
    "parsedName": "base",
    "content": {
      "tag": "base",
      "allowedAttributes": [
        {
          "name": "href",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "target",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "_self",
                "_blank",
                "_parent",
                "_top"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Base",
      "shortDescriptionOfTheTag": "The `<base>` tag specifies the base URL/target for all relative URLs in a document.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Set the base URL for all relative URLs",
          "code": "<base href=\"https://www.example.com/\">"
        },
        {
          "title": "Example 2",
          "description": "Set the base URL and specify the target attribute",
          "code": "<base href=\"https://www.example.com/\" target=\"_blank\">"
        }
      ]
    }
  },
  {
    "name": "bdi",
    "parsedName": "bdi",
    "content": {
      "tag": "bdi",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "bdi",
      "shortDescriptionOfTheTag": "The HTML <bdi> element isolates a span of text that might be formatted in a different direction from other text outside it.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using <bdi> tag in HTML",
          "code": "<p>Here is some text in English <bdi dir=\"rtl\">العربية</bdi> and more text in English.</p>"
        },
        {
          "title": "Example 2",
          "description": "HTML snippet with <bdi> tag",
          "code": "<main>\n  <h1>Partners</h1>\n  <ul>\n    <li><bdi>Gandalf</bdi></li>\n    <li><bdi>Bilbo</bdi></li>\n  </ul>\n</main>"
        }
      ]
    }
  },
  {
    "name": "bdo",
    "parsedName": "bdo",
    "content": {
      "tag": "bdo",
      "allowedAttributes": [
        {
          "name": "dir",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "ltr",
                "rtl"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "bdo",
      "shortDescriptionOfTheTag": "The bdo element overrides the current text direction.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Setting text direction to right-to-left",
          "code": "<bdo dir=\"rtl\">Text content goes here</bdo>"
        },
        {
          "title": "Example 2",
          "description": "Setting text direction to left-to-right",
          "code": "<bdo dir=\"ltr\">Text content goes here</bdo>"
        }
      ]
    }
  },
  {
    "name": "big",
    "parsedName": "big",
    "content": {
      "tag": "big",
      "allowedAttributes": [
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Big",
      "shortDescriptionOfTheTag": "Defines a big text",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using big tag to display large text",
          "code": "<big>This is a big text</big>"
        },
        {
          "title": "Example 2",
          "description": "Applying style attribute to big tag",
          "code": "<big style=\"font-size: 24px;\">This is a big text with custom style</big>"
        }
      ]
    }
  },
  {
    "name": "blockquote",
    "parsedName": "blockquote",
    "content": {
      "tag": "blockquote",
      "allowedAttributes": [
        {
          "name": "cite",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "URL"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "blockquote",
      "shortDescriptionOfTheTag": "The <blockquote> tag specifies a section that is quoted from another source.",
      "usageExamples": [
        {
          "title": "Basic blockquote",
          "description": "Create a simple blockquote with attribution",
          "code": "<blockquote>\n  <p>Some quote goes here.</p>\n  <footer>Author Name</footer>\n</blockquote>"
        }
      ]
    }
  },
  {
    "name": "body",
    "parsedName": "body",
    "content": {
      "tag": "body",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Body",
      "shortDescriptionOfTheTag": "Defines the main content of an HTML document",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "This example shows a simple usage of the body tag.",
          "code": "<body>\n  <h1>Hello World!</h1>\n</body>"
        },
        {
          "title": "Body with Background Color",
          "description": "This example sets the background color of the body element.",
          "code": "<body style=\"background-color: lightblue;\">\n  <h1>Welcome!</h1>\n</body>"
        }
      ]
    }
  },
  {
    "name": "br",
    "parsedName": "br",
    "content": {
      "tag": "br",
      "allowedAttributes": [],
      "canHaveChildren": false,
      "title": "br",
      "shortDescriptionOfTheTag": "The br tag defines a line break.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Insert a line break between two lines of text.",
          "code": "<p>This is line one<br>This is line two</p>"
        },
        {
          "title": "Example 2",
          "description": "Create space between elements.",
          "code": "<p>Paragraph 1</p><br><p>Paragraph 2</p>"
        }
      ]
    }
  },
  {
    "name": "button",
    "parsedName": "button",
    "content": {
      "tag": "button",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "button",
                "submit",
                "reset"
              ]
            }
          ]
        },
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "onclick",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Button",
      "shortDescriptionOfTheTag": "The <button> element represents a clickable button, used to submit forms or trigger JavaScript functions.",
      "usageExamples": [
        {
          "title": "Basic Button",
          "description": "Create a basic button element.",
          "code": "<button>Click Me</button>"
        },
        {
          "title": "Disabled Button",
          "description": "Create a disabled button element.",
          "code": "<button disabled>Click Me</button>"
        }
      ]
    }
  },
  {
    "name": "canvas",
    "parsedName": "canvas",
    "content": {
      "tag": "canvas",
      "allowedAttributes": [
        {
          "name": "width",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Canvas",
      "shortDescriptionOfTheTag": "Defines a rectangular area on an HTML page where graphics can be drawn with JavaScript.",
      "usageExamples": [
        {
          "title": "Basic Canvas Example",
          "description": "Creating a basic canvas element with dimensions 200px by 200px.",
          "code": "<canvas width='200' height='200'></canvas>"
        },
        {
          "title": "Canvas with Styling Example",
          "description": "Creating a canvas element with dimensions 400px by 400px and applying a custom CSS style.",
          "code": "<canvas width='400' height='400' style='border: 1px solid black;'></canvas>"
        }
      ]
    }
  },
  {
    "name": "caption",
    "parsedName": "caption",
    "content": {
      "tag": "caption",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "top",
                "bottom",
                "left",
                "right",
                "center"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "caption",
      "shortDescriptionOfTheTag": "The caption tag defines a table caption.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Adding a caption to a table",
          "code": "<table>\n  <caption align=\"bottom\">Table Caption</caption>\n  <tr>\n    <th>Header 1</th>\n    <th>Header 2</th>\n  </tr>\n  <tr>\n    <td>Data 1</td>\n    <td>Data 2</td>\n  </tr>\n</table>"
        }
      ]
    }
  },
  {
    "name": "circle",
    "parsedName": "circle",
    "content": {
      "tag": "circle",
      "allowedAttributes": [
        {
          "name": "cx",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "cy",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "r",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "fill",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "stroke",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "strokeWidth",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Circle",
      "shortDescriptionOfTheTag": "The circle tag is used to create a circle shape in SVG.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a red circle with a radius of 50 at coordinates (100, 100).",
          "code": "<svg>\n  <circle cx='100' cy='100' r='50' fill='red' />\n</svg>"
        },
        {
          "title": "Example 2",
          "description": "Creating a blue circle border with a radius of 30 at coordinates (50, 50).",
          "code": "<svg>\n  <circle cx='50' cy='50' r='30' fill='none' stroke='blue' strokeWidth='2' />\n</svg>"
        }
      ]
    }
  },
  {
    "name": "cite",
    "parsedName": "cite",
    "content": {
      "tag": "cite",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "cite",
      "shortDescriptionOfTheTag": "The HTML <cite> tag represents the title of a creative work (e.g. a book, movie, poem, song, painting, sculpture, etc.)",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using <cite> tag to mark up a title",
          "code": "<p>I read the book <cite>The Great Gatsby</cite> last week.</p>"
        },
        {
          "title": "Example 2",
          "description": "Using <cite> tag for a song title",
          "code": "<p>Have you heard the song <cite>Bohemian Rhapsody</cite> by Queen?</p>"
        }
      ]
    }
  },
  {
    "name": "clipPath",
    "parsedName": "clippath",
    "content": {
      "tag": "clipPath",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "clipPath",
      "shortDescriptionOfTheTag": "The clipPath SVG element creates a clipping path that can be used as a reference when painting the fill and/or stroke of an element.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Use clipPath to create a clipping mask for an SVG shape",
          "code": "<svg>\n  <clipPath id=\"clip\">\n    <circle cx=\"50\" cy=\"50\" r=\"40\" />\n  </clipPath>\n  <rect width=\"100\" height=\"100\" clip-path=\"url(#clip)\" />\n</svg>"
        },
        {
          "title": "Example 2",
          "description": "Use clipPath to create a complex clipping path",
          "code": "<svg>\n  <clipPath id=\"clip\">\n    <circle cx=\"50\" cy=\"50\" r=\"40\" />\n    <rect x=\"10\" y=\"10\" width=\"80\" height=\"80\" />\n  </clipPath>\n  <rect width=\"100\" height=\"100\" clip-path=\"url(#clip)\" />\n</svg>"
        }
      ]
    }
  },
  {
    "name": "code",
    "parsedName": "code",
    "content": {
      "tag": "code",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Code",
      "shortDescriptionOfTheTag": "The <code> tag is used to define a piece of computer code.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Code snippet with CSS styling.",
          "code": "<code style='color: blue;'>var x = 5;</code>"
        },
        {
          "title": "Example 2",
          "description": "Code snippet with a class specified.",
          "code": "<code class='inline-code'>function hello() { return 'world'; }</code>"
        }
      ]
    }
  },
  {
    "name": "col",
    "parsedName": "col",
    "content": {
      "tag": "col",
      "allowedAttributes": [
        {
          "name": "span",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "col",
      "shortDescriptionOfTheTag": "Defines a column within a table",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Set the width of the column to 100 pixels",
          "code": "<col width='100'>"
        },
        {
          "title": "Example 2",
          "description": "Define a column to span 2 slots",
          "code": "<col span='2'>"
        }
      ]
    }
  },
  {
    "name": "colgroup",
    "parsedName": "colgroup",
    "content": {
      "tag": "colgroup",
      "allowedAttributes": [
        {
          "name": "span",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "colgroup",
      "shortDescriptionOfTheTag": "Defines a group of columns in a table to be applied together.",
      "usageExamples": [
        {
          "title": "Basic colgroup example",
          "description": "Creating a colgroup element with specific span attribute.",
          "code": "<colgroup span=\"2\">\n  <col>\n  <col>\n</colgroup>"
        }
      ]
    }
  },
  {
    "name": "data",
    "parsedName": "data",
    "content": {
      "tag": "data",
      "allowedAttributes": [
        {
          "name": "value",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Data Component",
      "shortDescriptionOfTheTag": "HTML component for storing data values.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "This is a basic example of using the data tag.",
          "code": "<data value='123'>"
        },
        {
          "title": "Example with ID",
          "description": "An example of using the data tag with an ID attribute.",
          "code": "<data value='456' id='data1'>"
        }
      ]
    }
  },
  {
    "name": "datalist",
    "parsedName": "datalist",
    "content": {
      "tag": "datalist",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "DataList",
      "shortDescriptionOfTheTag": "The <datalist> tag specifies a list of pre-defined options for an <input> element.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Create a datalist with options for an input field",
          "code": "<input list=\"browsers\" name=\"browser\">\n<datalist id=\"browsers\">\n  <option value=\"Chrome\">\n  <option value=\"Firefox\">\n  <option value=\"Safari\">\n</datalist>"
        }
      ]
    }
  },
  {
    "name": "dd",
    "parsedName": "dd",
    "content": {
      "tag": "dd",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "dd",
      "shortDescriptionOfTheTag": "Defines the description value for a term in a description list",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using dd tag to define description for a term",
          "code": "<dl>\n  <dt>Apple</dt>\n  <dd> A fruit that is red or green in color.</dd>\n</dl>"
        },
        {
          "title": "Example 2",
          "description": "Nested dd tags within a dl",
          "code": "<dl>\n  <dt>Apple</dt>\n  <dd> A fruit that is red or green in color.</dd>\n  <dt>Orange</dt>\n  <dd> A fruit that is orange in color.</dd>\n</dl>"
        }
      ]
    }
  },
  {
    "name": "defs",
    "parsedName": "defs",
    "content": {
      "tag": "defs",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Defs",
      "shortDescriptionOfTheTag": "The <defs> tag is used to define graphical template objects that can be reused within an SVG document.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Defining a linear gradient to be used later in the SVG",
          "code": "<defs>\n  <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n    <stop offset=\"0%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" />\n    <stop offset=\"100%\" style=\"stop-color:rgb(255,0,0);stop-opacity:1\" />\n  </linearGradient>\n</defs>"
        },
        {
          "title": "Example 2",
          "description": "Defining a pattern to be used later in the SVG",
          "code": "<defs>\n  <pattern id=\"pattern1\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n    <rect width=\"50\" height=\"50\" fill=\"#0099FF\" />\n    <text x=\"5\" y=\"15\" font-size=\"12\" fill=\"white\">Pattern</text>\n  </pattern>\n</defs>"
        }
      ]
    }
  },
  {
    "name": "del",
    "parsedName": "del",
    "content": {
      "tag": "del",
      "allowedAttributes": [
        {
          "name": "cite",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "datetime",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "del",
      "shortDescriptionOfTheTag": "The del element represents a range of text that has been deleted from a document.",
      "usageExamples": [
        {
          "title": "Example",
          "description": "Usage of del tag to display deleted text",
          "code": "<del>This text is no longer valid</del>"
        }
      ]
    }
  },
  {
    "name": "desc",
    "parsedName": "desc",
    "content": {
      "tag": "desc",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Desc",
      "shortDescriptionOfTheTag": "A tag that can contain descriptive text or content.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Adding a description paragraph.",
          "code": "<desc>This is a description.</desc>"
        },
        {
          "title": "Example with formatted text",
          "description": "Using HTML tags within desc.",
          "code": "<desc>This is a <strong>bold</strong> description.</desc>"
        }
      ]
    }
  },
  {
    "name": "details",
    "parsedName": "details",
    "content": {
      "tag": "details",
      "allowedAttributes": [
        {
          "name": "open",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Details",
      "shortDescriptionOfTheTag": "The details element represents a disclosure widget from which the user can obtain additional information or controls.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "A basic example of using a details element",
          "code": "<details>\n   <summary>Click to reveal more details</summary>\n   More details here\n</details>"
        },
        {
          "title": "Example 2",
          "description": "Using the 'open' attribute to show content by default",
          "code": "<details open>\n   <summary>Click to reveal more details</summary>\n   More details here\n</details>"
        }
      ]
    }
  },
  {
    "name": "dfn",
    "parsedName": "dfn",
    "content": {
      "tag": "dfn",
      "allowedAttributes": [
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "dfn",
      "shortDescriptionOfTheTag": "The HTML <dfn> element is used to indicate the defining instance of a term.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using <dfn> to define a term",
          "code": "<p><dfn title='World Wide Web'>WWW</dfn> is an essential part of the internet.</p>"
        },
        {
          "title": "Example 2",
          "description": "Nested <dfn> elements",
          "code": "<p>This is an <dfn title='Example'><dfn title='Nested'>nested</dfn></dfn> definition.</p>"
        }
      ]
    }
  },
  {
    "name": "dialog",
    "parsedName": "dialog",
    "content": {
      "tag": "dialog",
      "allowedAttributes": [
        {
          "name": "open",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Dialog",
      "shortDescriptionOfTheTag": "Represents a dialog box or a window.",
      "usageExamples": [
        {
          "title": "Basic Dialog Example",
          "description": "A basic example of using the dialog component.",
          "code": "<dialog open>Hello World!</dialog>"
        },
        {
          "title": "Dialog with a Heading",
          "description": "An example of a dialog with a title.",
          "code": "<dialog open> <h1>Dialog Title</h1> <p>Hello World!</p> </dialog>"
        }
      ]
    }
  },
  {
    "name": "div",
    "parsedName": "div",
    "content": {
      "tag": "div",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "div",
      "shortDescriptionOfTheTag": "The div element represents a generic container that can be used to group elements together.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a basic div container.",
          "code": "<div>Hello, World!</div>"
        },
        {
          "title": "Example 2",
          "description": "Using div with class and id attributes.",
          "code": "<div class='container' id='mainContainer'>Content goes here</div>"
        }
      ]
    }
  },
  {
    "name": "dl",
    "parsedName": "dl",
    "content": {
      "tag": "dl",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "dl",
      "shortDescriptionOfTheTag": "The dl tag defines a description list.",
      "usageExamples": [
        {
          "title": "Basic dl tag example",
          "description": "This example shows how to use the dl tag to create a description list.",
          "code": "<dl>\n  <dt>Coffee</dt>\n  <dd>Black hot drink</dd>\n  <dt>Milk</dt>\n  <dd>White cold drink</dd>\n</dl>"
        }
      ]
    }
  },
  {
    "name": "dt",
    "parsedName": "dt",
    "content": {
      "tag": "dt",
      "allowedAttributes": [
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "dt",
      "shortDescriptionOfTheTag": "Defines a term/name in a description list",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Usage of <dt> tag with a term/name",
          "code": "<dl>\n  <dt>Title</dt>\n  <dd>Description</dd>\n</dl>"
        },
        {
          "title": "Example with Title Attribute",
          "description": "Usage of <dt> tag with a title attribute",
          "code": "<dl>\n  <dt title=\"Title Explanation\">Title</dt>\n  <dd>Description</dd>\n</dl>"
        }
      ]
    }
  },
  {
    "name": "ellipse",
    "parsedName": "ellipse",
    "content": {
      "tag": "ellipse",
      "allowedAttributes": [
        {
          "name": "cx",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "cy",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "rx",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "ry",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "fill",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "color"
            }
          ]
        },
        {
          "name": "stroke",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "color"
            }
          ]
        },
        {
          "name": "strokeWidth",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Ellipse",
      "shortDescriptionOfTheTag": "Draws an ellipse in SVG",
      "usageExamples": [
        {
          "title": "Example",
          "description": "Draw a red ellipse",
          "code": "<svg><ellipse cx='50' cy='50' rx='30' ry='20' fill='red' /></svg>"
        },
        {
          "title": "Example",
          "description": "Draw a blue ellipse with stroke",
          "code": "<svg><ellipse cx='100' cy='100' rx='20' ry='30' fill='blue' stroke='black' strokeWidth='2' /></svg>"
        }
      ]
    }
  },
  {
    "name": "em",
    "parsedName": "em",
    "content": {
      "tag": "em",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "em",
      "shortDescriptionOfTheTag": "The <em> HTML element represents stressed text, such as emphasizing a word or phrase.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "This example demonstrates the usage of the <em> tag with children elements.",
          "code": "<em>This is emphasized text</em>"
        },
        {
          "title": "Example 2",
          "description": "This example shows how to apply italic styling to a section of text using the <em> tag.",
          "code": "<p>This is normal text <em>This is emphasized text</em></p>"
        }
      ]
    }
  },
  {
    "name": "embed",
    "parsedName": "embed",
    "content": {
      "tag": "embed",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Embed",
      "shortDescriptionOfTheTag": "The embed tag defines a container for an external application or interactive content.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Embedding a video in a webpage.",
          "code": "<embed src='video.mp4' width='500' height='300' type='video/mp4'>"
        },
        {
          "title": "Example 2",
          "description": "Embedding a website within a webpage.",
          "code": "<embed src='http://www.example.com' width='800' height='600' type='text/html'>"
        }
      ]
    }
  },
  {
    "name": "feBlend",
    "parsedName": "feblend",
    "content": {
      "tag": "feBlend",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "in2",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "mode",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "normal",
                "multiply",
                "screen",
                "darken",
                "lighten"
              ]
            }
          ]
        },
        {
          "name": "result",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feBlend",
      "shortDescriptionOfTheTag": "The feBlend SVG filter primitive performs the combination of two input images pixel-wise in image space using one of the supported feBlend modes.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using feBlend to blend two images with 'multiply' mode",
          "code": "<svg>\n  <filter id=\"blend\">\n    <feBlend in=\"A\" in2=\"B\" mode=\"multiply\" />\n  </filter>\n</svg>"
        },
        {
          "title": "Example 2",
          "description": "Using feBlend to blend two images with 'darken' mode",
          "code": "<svg>\n  <filter id=\"blend\">\n    <feBlend in=\"A\" in2=\"B\" mode=\"darken\" />\n  </filter>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "feColorMatrix",
    "parsedName": "fecolormatrix",
    "content": {
      "tag": "feColorMatrix",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "matrix",
                "saturate",
                "hueRotate",
                "luminanceToAlpha"
              ]
            }
          ]
        },
        {
          "name": "values",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feColorMatrix",
      "shortDescriptionOfTheTag": "The feColorMatrix SVG filter primitive allows a color matrix to be applied to the input image.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying a greyscale filter using 'feColorMatrix'",
          "code": "<svg>\n  <filter id=\"greyscale\">\n    <feColorMatrix type=\"saturate\" values=\"0\"/>\n  </filter>\n  <image x=\"0\" y=\"0\" width=\"100\" height=\"100\" xlink:href=\"image.jpg\" filter=\"url(#greyscale)\"/>\n</svg>"
        },
        {
          "title": "Example 2",
          "description": "Applying a hue rotation using 'feColorMatrix'",
          "code": "<svg>\n  <filter id=\"huerotate\">\n    <feColorMatrix type=\"hueRotate\" values=\"90\"/>\n  </filter>\n  <image x=\"0\" y=\"0\" width=\"100\" height=\"100\" xlink:href=\"image.jpg\" filter=\"url(#huerotate)\"/>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "feComponentTransfer",
    "parsedName": "fecomponenttransfer",
    "content": {
      "tag": "feComponentTransfer",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "result",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "identity",
                "table",
                "discrete",
                "linear",
                "gamma"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feComponentTransfer",
      "shortDescriptionOfTheTag": "The feComponentTransfer filter primitive functions to linearly scale the input of the filter. It allows operations such as transferring, offset, and limiting channels.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying a feComponentTransfer filter to an image",
          "code": "<filter id=\"componentTransfer\">\n  <feComponentTransfer in=\"SourceGraphic\" result=\"transfered\">\n    <feFuncR type=\"gamma\" exponent=\"0.5\"/>\n    <feFuncG type=\"gamma\" exponent=\"0.5\"/>\n    <feFuncB type=\"gamma\" exponent=\"0.5\"/>\n  </feComponentTransfer>\n</filter>"
        },
        {
          "title": "Example 2",
          "description": "Using the feComponentTransfer filter with different transfer functions",
          "code": "<filter id=\"componentTransfer\">\n  <feComponentTransfer in=\"SourceGraphic\" result=\"transfered\">\n    <feFuncR type=\"linear\" slope=\"0.5\" intercept=\"0.1\"/>\n    <feFuncG type=\"discrete\" tableValues=\"0.1 0.3 0.7 1\"/>\n    <feFuncB type=\"table\" tableValues=\"0.2 0.5 0.8 1\"/>\n  </feComponentTransfer>\n</filter>"
        }
      ]
    }
  },
  {
    "name": "feComposite",
    "parsedName": "fecomposite",
    "content": {
      "tag": "feComposite",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "in2",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "operator",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "over",
                "in",
                "out",
                "atop",
                "xor",
                "arithmetic"
              ]
            }
          ]
        },
        {
          "name": "k1",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "k2",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "k3",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "k4",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feComposite",
      "shortDescriptionOfTheTag": "The feComposite SVG filter primitive performs the combination of two input images pixel-wise in image space using one of the Porter-Duff compositing operations.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Usage of feComposite with 'over' operator",
          "code": "<feComposite in='SourceGraphic' in2='SourceAlpha' operator='over' />"
        },
        {
          "title": "Example 2",
          "description": "Usage of feComposite with 'atop' and custom values for k1, k2, k3, k4",
          "code": "<feComposite in='SourceGraphic' in2='SourceAlpha' operator='atop' k1='1' k2='0' k3='0.5' k4='1' />"
        }
      ]
    }
  },
  {
    "name": "feConvolveMatrix",
    "parsedName": "feconvolvematrix",
    "content": {
      "tag": "feConvolveMatrix",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "order",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "kernelMatrix",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "divisor",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "bias",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "targetX",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "targetY",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feConvolveMatrix",
      "shortDescriptionOfTheTag": "The feConvolveMatrix SVG filter primitive performs a 2D convolution of an input image with a given kernel matrix. ",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying a feConvolveMatrix filter to an SVG image.",
          "code": "<filter id=\"convolve\">\n  <feConvolveMatrix in=\"SourceGraphic\" order=\"3\" kernelMatrix=\"1 1 1 1 -7 1 1 1 1\"/>\n</filter>\n\n<image x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" filter=\"url(#convolve)\"/>\n"
        }
      ]
    }
  },
  {
    "name": "feDiffuseLighting",
    "parsedName": "fediffuselighting",
    "content": {
      "tag": "feDiffuseLighting",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "surfaceScale",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "diffuseConstant",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "feDiffuseLighting",
      "shortDescriptionOfTheTag": "The feDiffuseLighting SVG filter primitive lights an image using the alpha channel as a bump map.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying feDiffuseLighting filter with specified surfaceScale.",
          "code": "<feDiffuseLighting in=\"SourceGraphic\" surfaceScale=\"1.5\"></feDiffuseLighting>"
        },
        {
          "title": "Example 2",
          "description": "Applying feDiffuseLighting filter without specifying optional attributes.",
          "code": "<feDiffuseLighting in=\"SourceGraphic\"></feDiffuseLighting>"
        }
      ]
    }
  },
  {
    "name": "feDisplacementMap",
    "parsedName": "fedisplacementmap",
    "content": {
      "tag": "feDisplacementMap",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "in2",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "scale",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "xChannelSelector",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "R",
                "G",
                "B",
                "A"
              ]
            }
          ]
        },
        {
          "name": "yChannelSelector",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "R",
                "G",
                "B",
                "A"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "feDisplacementMap",
      "shortDescriptionOfTheTag": "The feDisplacementMap filter primitive uses the pixel values from the image from in2 to spatially displace the image from in.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying displacement map filter to an SVG element",
          "code": "<svg width='100' height='100'><filter id='displacementFilter'><feDisplacementMap in='SourceGraphic' in2='turbulence' scale='10' xChannelSelector='G' yChannelSelector='B' /></filter></svg>"
        }
      ]
    }
  },
  {
    "name": "feDistantLight",
    "parsedName": "fedistantlight",
    "content": {
      "tag": "feDistantLight",
      "allowedAttributes": [
        {
          "name": "azimuth",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "elevation",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feDistantLight",
      "shortDescriptionOfTheTag": "The feDistantLight SVG filter primitive defines a distant light source that can be used within a lighting filter primitive to achieve a lighting effect. The lighting effect created by this light source results in a spotlight, with the light becoming weaker as the angle of incidence moves away from the spot direction.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying a feDistantLight filter to an SVG shape.",
          "code": "<svg width='100' height='100' xmlns='http://www.w3.org/2000/svg'><filter id='distant_light'><feDistantLight azimuth='45' elevation='30'/></filter><circle cx='50' cy='50' r='40' fill='green' filter='url(#distant_light)'/></svg>"
        },
        {
          "title": "Example 2",
          "description": "Using feDistantLight with other filter primitives.",
          "code": "<svg width='100' height='100' xmlns='http://www.w3.org/2000/svg'><filter id='combined_filters'><feDistantLight azimuth='135' elevation='45'/><feSpecularLighting in='SourceGraphic' surfaceScale='5'result='specOut' specularConstant='0.42' specularExponent='1.5'><fePointLight x='200' y='100' z='50'/></feSpecularLighting></filter><rect width='100' height='100' filter='url(#combined_filters)'/></svg>"
        }
      ]
    }
  },
  {
    "name": "feDropShadow",
    "parsedName": "fedropshadow",
    "content": {
      "tag": "feDropShadow",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "dx",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "dy",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "flood-color",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "color"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feDropShadow",
      "shortDescriptionOfTheTag": "The feDropShadow SVG filter primitive creates a drop shadow of the input image. A drop shadow is effectively a blurred, offset version of the input image.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying a drop shadow effect to an SVG shape.",
          "code": "<svg>\n  <defs>\n    <filter id=\"drop-shadow\">\n      <feDropShadow dx=\"4\" dy=\"4\" flood-color=\"#000000\"/>\n    </filter>\n  </defs>\n  <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"red\" filter=\"url(#drop-shadow)\"/>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "feFlood",
    "parsedName": "feflood",
    "content": {
      "tag": "feFlood",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "flood-color",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "flood-opacity",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "feFlood",
      "shortDescriptionOfTheTag": "The feFlood SVG filter primitive fills the filter subregion defined through the 'filter' property with the color and opacity defined by the 'flood-color' and 'flood-opacity' properties.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "An example of feFlood with a red flood color and opacity of 0.5",
          "code": "<feFlood flood-color='red' flood-opacity='0.5' />"
        },
        {
          "title": "Example 2",
          "description": "An example of feFlood with default values",
          "code": "<feFlood />"
        }
      ]
    }
  },
  {
    "name": "feFuncA",
    "parsedName": "fefunca",
    "content": {
      "tag": "feFuncA",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "identity",
                "table",
                "discrete",
                "linear",
                "gamma"
              ]
            }
          ]
        },
        {
          "name": "tableValues",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "slope",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "intercept",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feFuncA",
      "shortDescriptionOfTheTag": "The feFuncA SVG filter primitive defines the transfer function for the alpha component of the input graphic of its parent feComponentTransfer element.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Setting up a feFuncA element with type linear and slope 1.",
          "code": "<feFuncA type='linear' slope='1'/>"
        },
        {
          "title": "Example 2",
          "description": "An example of using the feFuncA element with type gamma and table values.",
          "code": "<feFuncA type='gamma' tableValues='0.5 0.7'/>"
        }
      ]
    }
  },
  {
    "name": "feFuncB",
    "parsedName": "fefuncb",
    "content": {
      "tag": "feFuncB",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "identity",
                "table",
                "discrete",
                "linear",
                "gamma"
              ]
            }
          ]
        },
        {
          "name": "slope",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "intercept",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feFuncB",
      "shortDescriptionOfTheTag": "The feFuncB element defines the transfer function for the blue component of the input graphic of a filter effects primitive.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Use feFuncB with identity type",
          "code": "<feFuncB type=\"identity\" />"
        },
        {
          "title": "Example 2",
          "description": "Use feFuncB with table type",
          "code": "<feFuncB type=\"table\" slope=\"1.2\" intercept=\"0.5\" />"
        }
      ]
    }
  },
  {
    "name": "feFuncG",
    "parsedName": "fefuncg",
    "content": {
      "tag": "feFuncG",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "identity",
                "table",
                "discrete",
                "linear"
              ]
            }
          ]
        },
        {
          "name": "tableValues",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "slope",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "intercept",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "amplitude",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "exponent",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "offset",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feFuncG",
      "shortDescriptionOfTheTag": "The feFuncG SVG filter primitive defines the gamma-function for green component.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Setting type attribute to identity.",
          "code": "<feFuncG type=\"identity\" />"
        },
        {
          "title": "Example 2",
          "description": "Setting type attribute to table with tableValues.",
          "code": "<feFuncG type=\"table\" tableValues=\"0 0.5 1\" />"
        }
      ]
    }
  },
  {
    "name": "feFuncR",
    "parsedName": "fefuncr",
    "content": {
      "tag": "feFuncR",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "identity",
                "table",
                "discrete",
                "linear",
                "gamma"
              ]
            }
          ]
        },
        {
          "name": "tableValues",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "slope",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feFuncR",
      "shortDescriptionOfTheTag": "The feFuncR SVG filter primitive defines a transfer function for the red channel of the input graphic.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Applying a feFuncR filter to an image",
          "code": "<feFuncR type='gamma' tableValues='0.5'></feFuncR>"
        },
        {
          "title": "Linear Function Example",
          "description": "Applying a feFuncR filter with linear function",
          "code": "<feFuncR type='linear' slope='0.5'></feFuncR>"
        }
      ]
    }
  },
  {
    "name": "feGaussianBlur",
    "parsedName": "fegaussianblur",
    "content": {
      "tag": "feGaussianBlur",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "stdDeviation",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "result",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "edgeMode",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "duplicate",
                "wrap",
                "none"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feGaussianBlur",
      "shortDescriptionOfTheTag": "The feGaussianBlur SVG filter primitive performs a Gaussian blur on the input image.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying a feGaussianBlur filter on an image with standard deviation 2.",
          "code": "<svg height='210' width='400'><defs><filter id='blur'><feGaussianBlur in='SourceGraphic' stdDeviation='2' /></filter></defs><rect width='300' height='100' style='filter:url(#blur)' /></svg>"
        },
        {
          "title": "Example 2",
          "description": "Applying a feGaussianBlur filter on an image with edge mode 'wrap'.",
          "code": "<svg height='210' width='400'><defs><filter id='blur'><feGaussianBlur in='SourceGraphic' stdDeviation='2' edgeMode='wrap' /></filter></defs><rect width='300' height='100' style='filter:url(#blur)' /></svg>"
        }
      ]
    }
  },
  {
    "name": "feImage",
    "parsedName": "feimage",
    "content": {
      "tag": "feImage",
      "allowedAttributes": [
        {
          "name": "xlink:href",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "result",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "in",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feImage",
      "shortDescriptionOfTheTag": "The 'feImage' element allows to include raster images in a filter.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using feImage with a URL",
          "code": "<feImage xlink:href=\"image.jpg\" />"
        },
        {
          "title": "Example 2",
          "description": "Using feImage with 'result' and 'in' attributes",
          "code": "<feImage xlink:href=\"image2.jpg\" result=\"resultImage\" in=\"sourceGraphic\" />"
        }
      ]
    }
  },
  {
    "name": "feMerge",
    "parsedName": "femerge",
    "content": {
      "tag": "feMerge",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "result",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "feMerge",
      "shortDescriptionOfTheTag": "The feMerge SVG filter allows a sequence of filter primitives to be processed.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "This is an example of how to use feMerge with children elements.",
          "code": "<filter id='customFilter'>\n  <feMerge>\n    <feMergeNode in='SourceGraphic' />\n    <feMergeNode in='SourceAlpha' />\n  </feMerge>\n</filter>"
        },
        {
          "title": "Example 2",
          "description": "Another example of using feMerge with different attributes.",
          "code": "<filter id='customFilter'>\n  <feMerge result='mergedImage'>\n    <feMergeNode in='SourceGraphic' />\n    <feMergeNode in='SourceAlpha' />\n  </feMerge>\n</filter>"
        }
      ]
    }
  },
  {
    "name": "feMergeNode",
    "parsedName": "femergenode",
    "content": {
      "tag": "feMergeNode",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feMergeNode",
      "shortDescriptionOfTheTag": "The feMergeNode SVG filter primitive defines the input for subsequent filter primitives.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Create a feMergeNode tag with input 'SourceGraphic'.",
          "code": "<feMergeNode in='SourceGraphic' />"
        },
        {
          "title": "Example 2",
          "description": "Create a feMergeNode tag with input 'BackgroundImage'.",
          "code": "<feMergeNode in='BackgroundImage' />"
        }
      ]
    }
  },
  {
    "name": "feMorphology",
    "parsedName": "femorphology",
    "content": {
      "tag": "feMorphology",
      "allowedAttributes": [
        {
          "name": "operator",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "dilate",
                "erode"
              ]
            }
          ]
        },
        {
          "name": "radius",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "in",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "feMorphology",
      "shortDescriptionOfTheTag": "The feMorphology component defines the morphology operation for the feConvolveMatrix element.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying dilation morphology operation to an input image.",
          "code": "<feMorphology operator=\"dilate\" in=\"SourceGraphic\" radius=\"2\"></feMorphology>"
        },
        {
          "title": "Example 2",
          "description": "Applying erosion morphology operation to an input image.",
          "code": "<feMorphology operator=\"erode\" in=\"SourceGraphic\" radius=\"1\"></feMorphology>"
        }
      ]
    }
  },
  {
    "name": "feOffset",
    "parsedName": "feoffset",
    "content": {
      "tag": "feOffset",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "dx",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "dy",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "result",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feOffset",
      "shortDescriptionOfTheTag": "The feOffset SVG filter primitive effect is used to offset an input image relative to its current position in the z-order. It results in an image that appears to be raised above the background in the z-axis.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Applying feOffset filter with dx and dy attributes set to offset the image.",
          "code": "<feOffset in=\"SourceAlpha\" dx=\"2\" dy=\"2\" result=\"offsetResult\" />"
        },
        {
          "title": "Example 2",
          "description": "Another example of feOffset in SVG filter.",
          "code": "<feOffset in=\"SourceGraphic\" dx=\"-3\" dy=\"5\" result=\"offsetResult2\" />"
        }
      ]
    }
  },
  {
    "name": "fePointLight",
    "parsedName": "fepointlight",
    "content": {
      "tag": "fePointLight",
      "allowedAttributes": [
        {
          "name": "x",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "z",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "dx",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "dy",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "dz",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "spacing",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "fePointLight",
      "shortDescriptionOfTheTag": "The <fePointLight> SVG element allows to add a point light source to the parent svg element.",
      "usageExamples": [
        {
          "title": "Example",
          "description": "Adding a fePointLight to an SVG element.",
          "code": "<svg>\n  <filter id=\"fePointLight\">\n    <fePointLight x=\"10\" y=\"10\" z=\"10\"/>\n  </filter>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "feSpecularLighting",
    "parsedName": "fespecularlighting",
    "content": {
      "tag": "feSpecularLighting",
      "allowedAttributes": [
        {
          "name": "in",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "surfaceScale",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "specularConstant",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "specularExponent",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "feSpecularLighting",
      "shortDescriptionOfTheTag": "The feSpecularLighting SVG filter primitive lights image pixels with specular highlights. This is similar to Specular lighting in OpenGL.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Apply feSpecularLighting filter to an svg image",
          "code": "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='100' height='100'>\n  <defs>\n    <filter id='specularLighting'>\n      <feSpecularLighting in='SourceGraphic' surfaceScale='3' specularConstant='0.5' specularExponent='30'></feSpecularLighting>\n    </filter>\n  </defs>\n  <circle cx='50' cy='50' r='40' fill='gold' filter='url(#specularLighting)'></circle>\n</svg>"
        },
        {
          "title": "Example 2",
          "description": "Using feSpecularLighting filter with a different image",
          "code": "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='100' height='100'>\n  <defs>\n    <filter id='specularLighting2'>\n      <feSpecularLighting in='SourceGraphic' surfaceScale='2' specularConstant='0.8' specularExponent='20'></feSpecularLighting>\n    </filter>\n  </defs>\n  <rect x='10' y='10' width='80' height='80' fill='blue' filter='url(#specularLighting2)'></rect>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "feSpotLight",
    "parsedName": "fespotlight",
    "content": {
      "tag": "feSpotLight",
      "allowedAttributes": [
        {
          "name": "x",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "z",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "pointsAtX",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "pointsAtY",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "pointsAtZ",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feSpotLight",
      "shortDescriptionOfTheTag": "The feSpotLight SVG filter primitive creates a spotlight lighting effect.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a spotlight effect with feSpotLight.",
          "code": "<svg width='400' height='200' xmlns='http://www.w3.org/2000/svg'>\n  <defs>\n    <filter id='exampleFilter' x='0' y='0' width='200%' height='200%'>\n      <feOffset result='offOut' in='SourceGraphic' dx='20' dy='20' />\n      <feBlend in='SourceGraphic' in2='offOut' mode='normal' />\n      <feSpotLight x='50' y='30' z='70' pointsAtX='20' pointsAtY='20' pointsAtZ='20' />\n    </filter>\n  </defs>\n  <rect width='90' height='90' filter='url(#exampleFilter)' />\n</svg>"
        }
      ]
    }
  },
  {
    "name": "feTile",
    "parsedName": "fetile",
    "content": {
      "tag": "feTile",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "feTile",
      "shortDescriptionOfTheTag": "The feTile tag defines an image to be used as a texture map that can be tiled, stretched, or repeated, and can be used within the <filter> element to apply image processing operations such as blurring or color adjustments.",
      "usageExamples": [
        {
          "title": "Example",
          "description": "Using feTile to create a tiled texture for an SVG shape:",
          "code": "<filter id=\"tileFilter\">\n  <feTile result=\"tiledImage\" />\n</filter>\n\n<rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"url(#tileFilter)\" />"
        }
      ]
    }
  },
  {
    "name": "feTurbulence",
    "parsedName": "feturbulence",
    "content": {
      "tag": "feTurbulence",
      "allowedAttributes": [
        {
          "name": "baseFrequency",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "numOctaves",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "seed",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "feTurbulence",
      "shortDescriptionOfTheTag": "The feTurbulence filter primitive creates an image using the Perlin turbulence function. It allows the synthesis of artificial textures like clouds or marble.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating feTurbulence with baseFrequency and numOctaves",
          "code": "<feTurbulence baseFrequency='0.02' numOctaves='3' />"
        },
        {
          "title": "Example 2",
          "description": "Creating feTurbulence with seed value",
          "code": "<feTurbulence seed='5' />"
        }
      ]
    }
  },
  {
    "name": "fieldset",
    "parsedName": "fieldset",
    "content": {
      "tag": "fieldset",
      "allowedAttributes": [
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "form",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "fieldset",
      "shortDescriptionOfTheTag": "The fieldset element is used to group related elements within a form.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Create a fieldset with a legend and input elements inside.",
          "code": "<fieldset>\n  <legend>Personal Information</legend>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n</fieldset>"
        },
        {
          "title": "With disabled attribute",
          "description": "Create a disabled fieldset.",
          "code": "<fieldset disabled>\n  <legend>Personal Information</legend>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n</fieldset>"
        }
      ]
    }
  },
  {
    "name": "figcaption",
    "parsedName": "figcaption",
    "content": {
      "tag": "figcaption",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "figcaption",
      "shortDescriptionOfTheTag": "The figcaption tag is used to provide a caption or description for a figure element.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Adding a caption to a figure element",
          "code": "<figure>\n  <img src=\"example.jpg\" alt=\"Example\">\n  <figcaption>This is an example image</figcaption>\n</figure>"
        },
        {
          "title": "Example 2",
          "description": "Using figcaption to provide context for a table",
          "code": "<figure>\n  <table>\n    <tr>\n      <th>Header 1</th>\n      <th>Header 2</th>\n    </tr>\n    <tr>\n      <td>Data 1</td>\n      <td>Data 2</td>\n    </tr>\n  </table>\n  <figcaption>This is a table showing data from a survey</figcaption>\n</figure>"
        }
      ]
    }
  },
  {
    "name": "figure",
    "parsedName": "figure",
    "content": {
      "tag": "figure",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "figure",
      "shortDescriptionOfTheTag": "The <figure> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "A simple usage of the figure tag",
          "code": "<figure>\n  <img src=\"image.jpg\" alt=\"Description\">\n  <figcaption>Description of the image</figcaption>\n</figure>"
        },
        {
          "title": "Example 2",
          "description": "Using figure with a code snippet",
          "code": "<figure>\n  <pre><code>const greeting = 'Hello World';\nconsole.log(greeting);</code></pre>\n  <figcaption>Simple code example</figcaption>\n</figure>"
        }
      ]
    }
  },
  {
    "name": "filter",
    "parsedName": "filter",
    "content": {
      "tag": "filter",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "text",
                "number",
                "date",
                "checkbox"
              ]
            }
          ]
        },
        {
          "name": "placeholder",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Filter",
      "shortDescriptionOfTheTag": "An input field used for filtering data based on user input.",
      "usageExamples": [
        {
          "title": "Basic Filter Input",
          "description": "A basic filter input field for filtering text data",
          "code": "<filter type='text' placeholder='Search by name'></filter>"
        },
        {
          "title": "Numeric Filter Input",
          "description": "A numeric filter input field for filtering number data",
          "code": "<filter type='number' placeholder='Search by age'></filter>"
        },
        {
          "title": "Date Filter Input",
          "description": "A date filter input field for filtering date data",
          "code": "<filter type='date'></filter>"
        }
      ]
    }
  },
  {
    "name": "footer",
    "parsedName": "footer",
    "content": {
      "tag": "footer",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Footer",
      "shortDescriptionOfTheTag": "Defines a footer for a document or section.",
      "usageExamples": [
        {
          "title": "Basic Usage",
          "description": "A basic example of using the footer tag.",
          "code": "<footer>\n  <p>&copy; 2021 Example Company</p>\n</footer>"
        },
        {
          "title": "Footer with Links",
          "description": "An example of footer containing links.",
          "code": "<footer>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">About</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n</footer>"
        }
      ]
    }
  },
  {
    "name": "foreignObject",
    "parsedName": "foreignobject",
    "content": {
      "tag": "foreignObject",
      "allowedAttributes": [
        {
          "name": "x",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "requiredExtensions",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "foreignObject",
      "shortDescriptionOfTheTag": "The foreignObject element allows for inclusion of a DOM subtree within an SVG graph that is handled as a foreignObject on the target environment.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a foreignObject element with x, y, width, and height attributes",
          "code": "<foreignObject x=\"10\" y=\"20\" width=\"50\" height=\"50\"><div>Foreign Content</div></foreignObject>"
        },
        {
          "title": "Example 2",
          "description": "Including a foreignObject element with a different XML namespace",
          "code": "<foreignObject x=\"10\" y=\"20\" width=\"100\" height=\"100\" requiredExtensions=\"http://www.w3.org/1999/xhtml\"><body xmlns=\"http://www.w3.org/1999/xhtml\"><div>Foreign Content inside a different namespace</div></body></foreignObject>"
        }
      ]
    }
  },
  {
    "name": "form",
    "parsedName": "form",
    "content": {
      "tag": "form",
      "allowedAttributes": [
        {
          "name": "action",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "method",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "get",
                "post"
              ]
            }
          ]
        },
        {
          "name": "enctype",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain"
              ]
            }
          ]
        },
        {
          "name": "target",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "_self",
                "_blank",
                "_parent",
                "_top"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Form Element",
      "shortDescriptionOfTheTag": "Defines an interactive form for user input",
      "usageExamples": [
        {
          "title": "Basic Form Example",
          "description": "A simple form that submits data to a specified URL",
          "code": "<form action=\"/submit\" method=\"post\">\n  <input type=\"text\" name=\"username\" />\n  <button type=\"submit\">Submit</button>\n</form>"
        },
        {
          "title": "Form with File Upload Example",
          "description": "A form that allows users to upload a file",
          "code": "<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>"
        }
      ]
    }
  },
  {
    "name": "g",
    "parsedName": "g",
    "content": {
      "tag": "g",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "g",
      "shortDescriptionOfTheTag": "The <g> SVG element is a container used to group other SVG elements.",
      "usageExamples": [
        {
          "title": "Grouping SVG Elements",
          "description": "Example of using the <g> element to group multiple SVG elements together.",
          "code": "<svg>\n  <g>\n    <circle cx='50' cy='50' r='40' fill='red' />\n    <rect x='10' y='10' width='80' height='80' fill='blue' />\n  </g>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "h1",
    "parsedName": "h1",
    "content": {
      "tag": "h1",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "center",
                "right",
                "justify"
              ]
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "h1",
      "shortDescriptionOfTheTag": "The h1 tag is used to define the most important heading in a document.",
      "usageExamples": [
        {
          "title": "Basic h1 Example",
          "description": "A simple example of using h1 tag",
          "code": "<h1>Hello World</h1>"
        },
        {
          "title": "h1 with class attribute",
          "description": "Example of using h1 tag with class attribute",
          "code": "<h1 class=\"important\">Important Heading</h1>"
        }
      ]
    }
  },
  {
    "name": "h2",
    "parsedName": "h2",
    "content": {
      "tag": "h2",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "center",
                "right",
                "justify"
              ]
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "h2",
      "shortDescriptionOfTheTag": "HTML heading level 2 tag",
      "usageExamples": [
        {
          "title": "Basic h2 Example",
          "description": "Creating a simple h2 heading",
          "code": "<h2>Hello World</h2>"
        },
        {
          "title": "h2 With Alignment",
          "description": "Using the align attribute for alignment",
          "code": "<h2 align='center'>Center Aligned Heading</h2>"
        }
      ]
    }
  },
  {
    "name": "h3",
    "parsedName": "h3",
    "content": {
      "tag": "h3",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "right",
                "center",
                "justify"
              ]
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "h3",
      "shortDescriptionOfTheTag": "Represents the third-level heading in HTML documents.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Basic usage of h3 tag",
          "code": "<h3>This is a third-level heading</h3>"
        },
        {
          "title": "Example 2",
          "description": "h3 tag with custom class and alignment",
          "code": "<h3 class=\"custom-class\" align=\"center\">Center aligned heading</h3>"
        }
      ]
    }
  },
  {
    "name": "h4",
    "parsedName": "h4",
    "content": {
      "tag": "h4",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "right",
                "center",
                "justify"
              ]
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "HTML h4 Tag",
      "shortDescriptionOfTheTag": "The h4 tag is used to define HTML heading with level 4.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Creating a simple heading using h4 tag",
          "code": "<h4>This is a heading level 4</h4>"
        },
        {
          "title": "Example with Alignment",
          "description": "Creating a heading with alignment specified",
          "code": "<h4 align='center'>Center Aligned Heading 4</h4>"
        }
      ]
    }
  },
  {
    "name": "h5",
    "parsedName": "h5",
    "content": {
      "tag": "h5",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "center",
                "right",
                "justify"
              ]
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "h5",
      "shortDescriptionOfTheTag": "The h5 element represents a heading for a section.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a simple h5 heading with alignment.",
          "code": "<h5 align=\"center\">Center Aligned Heading</h5>"
        },
        {
          "title": "Example 2",
          "description": "Creating a styled h5 heading with a class.",
          "code": "<h5 class=\"header\">Styled Heading</h5>"
        }
      ]
    }
  },
  {
    "name": "h6",
    "parsedName": "h6",
    "content": {
      "tag": "h6",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "h6",
      "shortDescriptionOfTheTag": "Defines the sixth level heading in HTML document.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Using h6 tag to create a subheading in a document",
          "code": "<h6>This is a subheading</h6>"
        },
        {
          "title": "Nested Example",
          "description": "Nesting h6 tag within a div element",
          "code": "<div><h6>This is a subheading within a div</h6></div>"
        }
      ]
    }
  },
  {
    "name": "head",
    "parsedName": "head",
    "content": {
      "tag": "head",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Head",
      "shortDescriptionOfTheTag": "The head element represents a collection of metadata for the document, including links to stylesheets, scripts, and more.",
      "usageExamples": [
        {
          "title": "Adding a Title",
          "description": "Add a title to the head section of the document.",
          "code": "<head>\n    <title>My Webpage</title>\n</head>"
        },
        {
          "title": "Linking CSS",
          "description": "Link an external CSS file to the head section.",
          "code": "<head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>"
        }
      ]
    }
  },
  {
    "name": "header",
    "parsedName": "header",
    "content": {
      "tag": "header",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "center",
                "right"
              ]
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Header",
      "shortDescriptionOfTheTag": "Defines a header for a document or section",
      "usageExamples": [
        {
          "title": "Basic header example",
          "description": "Creating a simple header element",
          "code": "<header align='center'>Welcome to my website!</header>"
        },
        {
          "title": "Header with ID example",
          "description": "Adding an ID attribute to a header element",
          "code": "<header id='main-header'>Main Header</header>"
        }
      ]
    }
  },
  {
    "name": "hgroup",
    "parsedName": "hgroup",
    "content": {
      "tag": "hgroup",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "HGroup",
      "shortDescriptionOfTheTag": "The HTML <hgroup> element represents a multi-level heading for a section of a document.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "An example of using <hgroup> with nested <h1> and <h2> headings.",
          "code": "<hgroup>\n  <h1>Main Heading</h1>\n  <h2>Subheading</h2>\n</hgroup>"
        },
        {
          "title": "Structure Example",
          "description": "An example using multiple nested <hgroup> elements for different heading levels.",
          "code": "<hgroup>\n  <h1>Main Title</h1>\n  <hgroup>\n    <h2>Sub Title</h2>\n    <hgroup>\n      <h3>Sub Sub Title</h3>\n    </hgroup>\n  </hgroup>\n</hgroup>"
        }
      ]
    }
  },
  {
    "name": "hr",
    "parsedName": "hr",
    "content": {
      "tag": "hr",
      "allowedAttributes": [],
      "canHaveChildren": false,
      "title": "hr",
      "shortDescriptionOfTheTag": "The <hr> tag represents a thematic break between paragraph-level elements (e.g., a shift of topic).",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Horizontal rule with default styling.",
          "code": "<hr>"
        },
        {
          "title": "Example 2",
          "description": "Horizontal rule with custom class 'separator'.",
          "code": "<hr class='separator'>"
        }
      ]
    }
  },
  {
    "name": "html",
    "parsedName": "html",
    "content": {
      "tag": "html",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "HTML Element",
      "shortDescriptionOfTheTag": "The <html> tag represents the root of an HTML document.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Creating a basic HTML document.",
          "code": "<html>\n  <head>\n    <title>My Webpage</title>\n  </head>\n  <body>\n    <h1>Welcome to my webpage!</h1>\n  </body>\n</html>"
        },
        {
          "title": "HTML5 Skeleton",
          "description": "The standard structure of an HTML5 document.",
          "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My HTML5 Document</title>\n</head>\n<body>\n\n</body>\n</html>"
        }
      ]
    }
  },
  {
    "name": "i",
    "parsedName": "i",
    "content": {
      "tag": "i",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "i",
      "shortDescriptionOfTheTag": "The <i> tag defines a part of text in an alternate voice or mood.",
      "usageExamples": [
        {
          "title": "Italicize text",
          "description": "Use <i> tag to italicize text:",
          "code": "<p>This is normal text. <i>This is italic text.</i></p>"
        },
        {
          "title": "Styling with CSS",
          "description": "You can style the <i> tag using CSS:",
          "code": "<style> i { font-style: italic; } </style>"
        }
      ]
    }
  },
  {
    "name": "iframe",
    "parsedName": "iframe",
    "content": {
      "tag": "iframe",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "url"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "frameborder",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "allow",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "text",
              "options": [
                "accelerometer",
                "autoplay",
                "camera",
                "encrypted-media",
                "geolocation",
                "microphone",
                "midi",
                "payment",
                "picture-in-picture"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "iframe",
      "shortDescriptionOfTheTag": "Displays a web page within a web page.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Embedding a YouTube video with iframe.",
          "code": "<iframe src=\"https://www.youtube.com/embed/VIDEO_ID\" width=\"560\" height=\"315\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"></iframe>"
        },
        {
          "title": "Example 2",
          "description": "Embedding an external website with iframe.",
          "code": "<iframe src=\"https://www.example.com\" width=\"800\" height=\"600\"></iframe>"
        }
      ]
    }
  },
  {
    "name": "image",
    "parsedName": "image",
    "content": {
      "tag": "image",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "alt",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Image",
      "shortDescriptionOfTheTag": "This tag represents an image element.",
      "usageExamples": [
        {
          "title": "Basic Image Tag",
          "description": "Add a basic image tag with source and alt attributes.",
          "code": "<image src=\"image.jpg\" alt=\"Alt Text\" />"
        },
        {
          "title": "Image Tag with Height and Width",
          "description": "An image tag with specified height and width attributes.",
          "code": "<image src=\"image.jpg\" alt=\"Alt Text\" height=\"100\" width=\"200\" />"
        }
      ]
    }
  },
  {
    "name": "img",
    "parsedName": "img",
    "content": {
      "tag": "img",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "alt",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "img",
      "shortDescriptionOfTheTag": "The img element represents an image in a document.",
      "usageExamples": [
        {
          "title": "Adding image to HTML",
          "description": "Example of using img tag to display an image.",
          "code": "<img src='image.jpg' alt='Description of the image' />"
        }
      ]
    }
  },
  {
    "name": "input",
    "parsedName": "input",
    "content": {
      "tag": "input",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "text",
                "password",
                "checkbox",
                "radio",
                "file",
                "email",
                "number",
                "date",
                "color"
              ]
            }
          ]
        },
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "value",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "placeholder",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "required",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "pattern",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Input Tag",
      "shortDescriptionOfTheTag": "The input tag is used to create an input field where users can enter data.",
      "usageExamples": [
        {
          "title": "Basic Text Input",
          "description": "Creating a basic text input field.",
          "code": "<input type=\"text\" name=\"username\" placeholder=\"Enter your username\">"
        },
        {
          "title": "Checkbox Input",
          "description": "Creating a checkbox input field.",
          "code": "<input type=\"checkbox\" name=\"subscribe\" value=\"yes\"> Subscribe to newsletter"
        }
      ]
    }
  },
  {
    "name": "ins",
    "parsedName": "ins",
    "content": {
      "tag": "ins",
      "allowedAttributes": [
        {
          "name": "cite",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "URL"
            }
          ]
        },
        {
          "name": "datetime",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "ins",
      "shortDescriptionOfTheTag": "The ins tag is used to represent inserted text that has been added to a document.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Inserting a block of text",
          "code": "<ins>This is an inserted text.</ins>"
        },
        {
          "title": "Example 2",
          "description": "Inserting text with a citation",
          "code": "<ins cite=\"https://www.example.com\">Inserted text with a citation</ins>"
        }
      ]
    }
  },
  {
    "name": "kbd",
    "parsedName": "kbd",
    "content": {
      "tag": "kbd",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "kbd",
      "shortDescriptionOfTheTag": "The kbd tag is used to define keyboard input.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Displaying keyboard input",
          "code": "<kbd>Ctrl</kbd> + <kbd>C</kbd>"
        },
        {
          "title": "Example 2",
          "description": "Displaying key combinations",
          "code": "<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Delete</kbd>"
        }
      ]
    }
  },
  {
    "name": "keygen",
    "parsedName": "keygen",
    "content": {
      "tag": "keygen",
      "allowedAttributes": [
        {
          "name": "autofocus",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "challenge",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "form",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "keytype",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "rsa",
                "ec"
              ]
            }
          ]
        },
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Keygen Element",
      "shortDescriptionOfTheTag": "The <keygen> element is used to create a key-pair and a submit button.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Basic usage of the keygen element",
          "code": "<keygen name='mykey' keytype='rsa'>"
        },
        {
          "title": "Example 2",
          "description": "Using autofocus attribute to focus on the element when the page loads",
          "code": "<keygen name='mykey' autofocus>"
        }
      ]
    }
  },
  {
    "name": "label",
    "parsedName": "label",
    "content": {
      "tag": "label",
      "allowedAttributes": [
        {
          "name": "for",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "accesskey",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Label",
      "shortDescriptionOfTheTag": "Defines a label for an input element",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Creating a label for an input field",
          "code": "<label for=\"username\">Username:</label>"
        },
        {
          "title": "Label with Accesskey",
          "description": "Adding an accesskey attribute to a label",
          "code": "<label for=\"email\" accesskey=\"e\">Email:</label>"
        }
      ]
    }
  },
  {
    "name": "legend",
    "parsedName": "legend",
    "content": {
      "tag": "legend",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Legend",
      "shortDescriptionOfTheTag": "Defines a caption for a fieldset element.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Creating a legend for a fieldset element.",
          "code": "<fieldset>\n  <legend>Personal Information</legend>\n  <!-- Other form elements go here -->\n</fieldset>"
        }
      ]
    }
  },
  {
    "name": "li",
    "parsedName": "li",
    "content": {
      "tag": "li",
      "allowedAttributes": [
        {
          "name": "value",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "li",
      "shortDescriptionOfTheTag": "Represents a list item in ordered or unordered list.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a simple list item",
          "code": "<li>Item 1</li>"
        },
        {
          "title": "Example 2",
          "description": "List item with a specific value",
          "code": "<li value='5'>Item 5</li>"
        }
      ]
    }
  },
  {
    "name": "line",
    "parsedName": "line",
    "content": {
      "tag": "line",
      "allowedAttributes": [
        {
          "name": "x1",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y1",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "x2",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y2",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "stroke",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "strokeWidth",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "line",
      "shortDescriptionOfTheTag": "The line tag is used to draw a straight line between two points on a web page.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Draw a black line from point (10,10) to point (50,50)",
          "code": "<line x1='10' y1='10' x2='50' y2='50' stroke='black' strokeWidth='2' />"
        },
        {
          "title": "Example 2",
          "description": "Draw a red line from point (30,30) to point (100,100)",
          "code": "<line x1='30' y1='30' x2='100' y2='100' stroke='red' strokeWidth='1' />"
        },
        {
          "title": "Example 3",
          "description": "Draw a blue line from point (50,10) to point (70,90)",
          "code": "<line x1='50' y1='10' x2='70' y2='90' stroke='blue' strokeWidth='3' />"
        }
      ]
    }
  },
  {
    "name": "linearGradient",
    "parsedName": "lineargradient",
    "content": {
      "tag": "linearGradient",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "x1",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y1",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "x2",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y2",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "linearGradient",
      "shortDescriptionOfTheTag": "Defines a linear gradient in SVG",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a simple linear gradient",
          "code": "<linearGradient id='grad1' x1='0%' y1='0%' x2='100%' y2='0%'>\n  <stop offset='0%' style='stop-color:rgb(255,255,255);stop-opacity:0' />\n  <stop offset='100%' style='stop-color:rgb(255,0,0);stop-opacity:1' />\n</linearGradient>"
        },
        {
          "title": "Example 2",
          "description": "Adding direction to the linear gradient",
          "code": "<linearGradient id='grad2' x1='0%' y1='0%' x2='100%' y2='100%'>\n  <stop offset='0%' style='stop-color:rgb(255,192,203);stop-opacity:1' />\n  <stop offset='100%' style='stop-color:rgb(220,20,60);stop-opacity:1' />\n</linearGradient>"
        }
      ]
    }
  },
  {
    "name": "link",
    "parsedName": "link",
    "content": {
      "tag": "link",
      "allowedAttributes": [
        {
          "name": "href",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "rel",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "stylesheet",
                "icon",
                "alternate",
                "preload"
              ]
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "media",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Link",
      "shortDescriptionOfTheTag": "Defines the relationship between the current document and an external resource.",
      "usageExamples": [
        {
          "title": "Example",
          "description": "Include a CSS stylesheet.",
          "code": "<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">"
        },
        {
          "title": "Example",
          "description": "Include a favicon icon.",
          "code": "<link rel=\"icon\" type=\"image/png\" href=\"favicon.png\">"
        }
      ]
    }
  },
  {
    "name": "main",
    "parsedName": "main",
    "content": {
      "tag": "main",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Main",
      "shortDescriptionOfTheTag": "The main tag represents the main content section of the HTML document.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "A basic example using the main tag.",
          "code": "<main>\n    <h1>Main Content</h1>\n    <p>This is the main content of the page.</p>\n</main>"
        },
        {
          "title": "Usage with Sections",
          "description": "Using the main tag with multiple sections within it.",
          "code": "<main>\n    <section>\n        <h2>Section 1</h2>\n        <p>Content of section 1.</p>\n    </section>\n    <section>\n        <h2>Section 2</h2>\n        <p>Content of section 2.</p>\n    </section>\n</main>"
        }
      ]
    }
  },
  {
    "name": "map",
    "parsedName": "map",
    "content": {
      "tag": "map",
      "allowedAttributes": [
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "hidden",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "ismap",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Map",
      "shortDescriptionOfTheTag": "Defines a client-side image-map.",
      "usageExamples": [
        {
          "title": "Basic Usage",
          "description": "Creating a simple image map with two clickable areas.",
          "code": "<map name=\"workmap\">\n  <area shape=\"rect\" coords=\"34,44,270,350\" alt=\"Computer\" href=\"computer.htm\">\n  <area shape=\"circle\" coords=\"290,172,142\" alt=\"Phone\" href=\"phone.htm\">\n</map>"
        }
      ]
    }
  },
  {
    "name": "mark",
    "parsedName": "mark",
    "content": {
      "tag": "mark",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "mark",
      "shortDescriptionOfTheTag": "The HTML <mark> element represents text which is marked or highlighted for reference or emphasis.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using <mark> to highlight text",
          "code": "<p>This is a <mark>highlighted</mark> text.</p>"
        },
        {
          "title": "Example 2",
          "description": "Using <mark> inside a heading",
          "code": "<h1>This is <mark>important</mark> heading</h1>"
        }
      ]
    }
  },
  {
    "name": "marker",
    "parsedName": "marker",
    "content": {
      "tag": "marker",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "markerHeight",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "markerWidth",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "viewBox",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "orient",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "auto",
                "auto-start-reverse"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "marker",
      "shortDescriptionOfTheTag": "The <marker> element is used to define the attributes for markers that may be associated with the given element. Markers are used to add shapes or graphics to the edge or border of a graphical element.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Defining a red square marker with an ID of 'squareMarker'",
          "code": "<marker id='squareMarker' markerHeight='10' markerWidth='10' orient='auto'>\n  <rect width='10' height='10' fill='red'/>\n</marker>"
        },
        {
          "title": "Example 2",
          "description": "Defining a blue triangle marker with an ID of 'triangleMarker'",
          "code": "<marker id='triangleMarker' markerHeight='10' markerWidth='10' orient='auto-start-reverse'>\n  <path d='M0,0L10,5L0,10z' fill='blue'/>\n</marker>"
        }
      ]
    }
  },
  {
    "name": "mask",
    "parsedName": "mask",
    "content": {
      "tag": "mask",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "text",
                "password"
              ]
            }
          ]
        },
        {
          "name": "placeholder",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Mask Input",
      "shortDescriptionOfTheTag": "A component for masking user input such as passwords.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Mask input for password with placeholder",
          "code": "<mask type='password' placeholder='Enter password'></mask>"
        },
        {
          "title": "Example 2",
          "description": "Mask input for text",
          "code": "<mask type='text'></mask>"
        }
      ]
    }
  },
  {
    "name": "menu",
    "parsedName": "menu",
    "content": {
      "tag": "menu",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Menu",
      "shortDescriptionOfTheTag": "Represents a group of commands that a user can perform.",
      "usageExamples": [
        {
          "title": "Basic Menu",
          "description": "Create a basic menu with multiple options.",
          "code": "<menu type='toolbar'>\n  <li><button>New</button></li>\n  <li><button>Open</button></li>\n</menu>"
        },
        {
          "title": "Context Menu",
          "description": "Create a context menu with right-click functionality.",
          "code": "<menu type='context'>\n  <li><button>Cut</button></li>\n  <li><button>Copy</button></li>\n</menu>"
        }
      ]
    }
  },
  {
    "name": "menuitem",
    "parsedName": "menuitem",
    "content": {
      "tag": "menuitem",
      "allowedAttributes": [
        {
          "name": "checked",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "default",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "icon",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "label",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "command",
                "checkbox",
                "radio"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "menuitem",
      "shortDescriptionOfTheTag": "Represents a command that a user can invoke from a popup menu or other context menu.",
      "usageExamples": [
        {
          "title": "Basic menuitem example",
          "description": "Create a simple menuitem.",
          "code": "<menu><menuitem label='Copy' icon='copy-icon.png'></menuitem></menu>"
        },
        {
          "title": "Menuitem with radio type",
          "description": "Create a menuitem with radio type.",
          "code": "<menu><menuitem label='Option 1' type='radio'></menuitem></menu>"
        }
      ]
    }
  },
  {
    "name": "meta",
    "parsedName": "meta",
    "content": {
      "tag": "meta",
      "allowedAttributes": [
        {
          "name": "charset",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "content",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "http-equiv",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "content-type"
              ]
            }
          ]
        },
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "keywords",
                "description",
                "robots"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Meta Tag",
      "shortDescriptionOfTheTag": "The meta tag provides metadata about the HTML document.",
      "usageExamples": [
        {
          "title": "Setting charset",
          "description": "Specify the character encoding for the HTML document.",
          "code": "<meta charset='UTF-8'>"
        },
        {
          "title": "Setting description",
          "description": "Specify a description of the HTML document for search engines.",
          "code": "<meta name='description' content='This is a description'>"
        }
      ]
    }
  },
  {
    "name": "metadata",
    "parsedName": "metadata",
    "content": {
      "tag": "metadata",
      "allowedAttributes": [
        {
          "name": "charset",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "content",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "metadata",
      "shortDescriptionOfTheTag": "The <metadata> tag provides metadata about the HTML document.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Setting the character set of the document to UTF-8.",
          "code": "<metadata charset=\"UTF-8\">"
        },
        {
          "title": "Example 2",
          "description": "Adding a description to the document.",
          "code": "<metadata name=\"description\" content=\"This is a sample description.\">"
        }
      ]
    }
  },
  {
    "name": "meter",
    "parsedName": "meter",
    "content": {
      "tag": "meter",
      "allowedAttributes": [
        {
          "name": "value",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "min",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "max",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "low",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "high",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "optimum",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Meter Element",
      "shortDescriptionOfTheTag": "The <meter> element represents a scalar measurement within a known range.",
      "usageExamples": [
        {
          "title": "Basic Usage",
          "description": "A simple example showing the usage of the <meter> element.",
          "code": "<meter value=\"50\" min=\"0\" max=\"100\">50%</meter>"
        },
        {
          "title": "Custom Styling",
          "description": "An example with custom styling applied to the <meter> element.",
          "code": "<meter value=\"75\" min=\"0\" max=\"100\" style=\"color: blue;\">75%</meter>"
        }
      ]
    }
  },
  {
    "name": "nav",
    "parsedName": "nav",
    "content": {
      "tag": "nav",
      "allowedAttributes": [
        {
          "name": "aria-label",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "role",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "<nav>",
      "shortDescriptionOfTheTag": "The <nav> tag defines a set of navigational links.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "A basic example of using the <nav> tag.",
          "code": "<nav>\n  <a href=\"/home\">Home</a> |\n  <a href=\"/about\">About</a>\n</nav>"
        },
        {
          "title": "With ARIA Label",
          "description": "Example of using the aria-label attribute with <nav> tag.",
          "code": "<nav aria-label=\"Main\">\n  <a href=\"/home\">Home</a> |\n  <a href=\"/about\">About</a>\n</nav>"
        }
      ]
    }
  },
  {
    "name": "noscript",
    "parsedName": "noscript",
    "content": {
      "tag": "noscript",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "noscript",
      "shortDescriptionOfTheTag": "Defines an alternate content for users that have disabled scripts in their browser or have a browser that doesn't support scripts.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Usage of noscript with text content inside",
          "code": "<noscript>This website requires JavaScript to run.</noscript>"
        },
        {
          "title": "Example 2",
          "description": "Usage of noscript with other HTML tags inside",
          "code": "<noscript><p>This website requires JavaScript to run.</p></noscript>"
        }
      ]
    }
  },
  {
    "name": "object",
    "parsedName": "object",
    "content": {
      "tag": "object",
      "allowedAttributes": [
        {
          "name": "data",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "image/jpeg",
                "application/pdf",
                "text/html"
              ]
            }
          ]
        },
        {
          "name": "height",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "HTML Object Tag",
      "shortDescriptionOfTheTag": "The HTML <object> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.",
      "usageExamples": [
        {
          "title": "Embedding an Image",
          "description": "Embedding an image using the object tag",
          "code": "<object data='image.jpg' type='image/jpeg' width='200' height='200'></object>"
        },
        {
          "title": "Embedding a PDF",
          "description": "Embedding a PDF file using the object tag",
          "code": "<object data='document.pdf' type='application/pdf' width='800' height='600'></object>"
        }
      ]
    }
  },
  {
    "name": "ol",
    "parsedName": "ol",
    "content": {
      "tag": "ol",
      "allowedAttributes": [
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "1",
                "A",
                "a",
                "I",
                "i"
              ]
            }
          ]
        },
        {
          "name": "start",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "reversed",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Ordered List (ol)",
      "shortDescriptionOfTheTag": "The <ol> tag defines an ordered list of items",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Basic Ordered List",
          "code": "<ol>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n</ol>"
        },
        {
          "title": "Example 2",
          "description": "Ordered list with attributes",
          "code": "<ol type='A' start='5' reversed>\n  <li>Apples</li>\n  <li>Bananas</li>\n  <li>Oranges</li>\n</ol>"
        }
      ]
    }
  },
  {
    "name": "optgroup",
    "parsedName": "optgroup",
    "content": {
      "tag": "optgroup",
      "allowedAttributes": [
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "label",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "optgroup",
      "shortDescriptionOfTheTag": "The <optgroup> tag defines a group of related options in a select dropdown list.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Create a dropdown list with two groups of options",
          "code": "<select>\n  <optgroup label='Group 1'>\n    <option value='1'>Option 1.1</option>\n    <option value='2'>Option 1.2</option>\n  </optgroup>\n  <optgroup label='Group 2'>\n    <option value='3'>Option 2.1</option>\n    <option value='4'>Option 2.2</option>\n  </optgroup>\n</select>"
        },
        {
          "title": "Example 2",
          "description": "Using disabled attribute for an optgroup",
          "code": "<select>\n  <optgroup label='Group 1' disabled='true'>\n    <option value='1'>Option 1</option>\n  </optgroup>\n</select>"
        }
      ]
    }
  },
  {
    "name": "option",
    "parsedName": "option",
    "content": {
      "tag": "option",
      "allowedAttributes": [
        {
          "name": "value",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean",
              "options": [
                "disabled"
              ]
            }
          ]
        },
        {
          "name": "selected",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean",
              "options": [
                "selected"
              ]
            }
          ]
        },
        {
          "name": "label",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Option",
      "shortDescriptionOfTheTag": "Defines an option that can be selected in a select element.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Create a simple option element with a value and label.",
          "code": "<option value='1'>Option 1</option>"
        },
        {
          "title": "Disabled Option",
          "description": "Create a disabled option element.",
          "code": "<option value='2' disabled>Option 2</option>"
        },
        {
          "title": "Selected Option",
          "description": "Create a selected option element.",
          "code": "<option value='3' selected>Option 3</option>"
        }
      ]
    }
  },
  {
    "name": "output",
    "parsedName": "output",
    "content": {
      "tag": "output",
      "allowedAttributes": [
        {
          "name": "for",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "form",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "HTML <output> Tag",
      "shortDescriptionOfTheTag": "The <output> tag represents the result of a calculation or user action.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Basic <output> tag with text content",
          "code": "<output>Result: 10</output>"
        },
        {
          "title": "Example 2",
          "description": "Using the 'for' attribute to associate the output with a form element",
          "code": "<output for='quantity'>Result: 10</output>"
        }
      ]
    }
  },
  {
    "name": "p",
    "parsedName": "p",
    "content": {
      "tag": "p",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "p",
      "shortDescriptionOfTheTag": "The 'p' tag defines a paragraph in HTML.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "A simple paragraph.",
          "code": "<p>This is a paragraph.</p>"
        },
        {
          "title": "Example 2",
          "description": "Nested elements within a paragraph.",
          "code": "<p>This is a <strong>bold</strong> paragraph.</p>"
        }
      ]
    }
  },
  {
    "name": "param",
    "parsedName": "param",
    "content": {
      "tag": "param",
      "allowedAttributes": [
        {
          "name": "name",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "value",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Param",
      "shortDescriptionOfTheTag": "Defines parameters for an object or element in a param element.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Setting a parameter name and value",
          "code": "<param name='autoplay' value='true' />"
        },
        {
          "title": "Example 2",
          "description": "Setting a parameter name without a value",
          "code": "<param name='loop' />"
        }
      ]
    }
  },
  {
    "name": "path",
    "parsedName": "path",
    "content": {
      "tag": "path",
      "allowedAttributes": [
        {
          "name": "d",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "fill",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "color"
            },
            {
              "type": "none"
            }
          ]
        },
        {
          "name": "stroke",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "color"
            }
          ]
        },
        {
          "name": "strokeWidth",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "transform",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Path",
      "shortDescriptionOfTheTag": "Defines a path to be drawn.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "A simple path with fill color",
          "code": "<path d=\"M10 10 L20 20 H20 Z\" fill=\"blue\" />"
        },
        {
          "title": "Example 2",
          "description": "A path with stroke color and width",
          "code": "<path d=\"M10 10 L20 20 H20 Z\" stroke=\"black\" strokeWidth=\"2\" />"
        }
      ]
    }
  },
  {
    "name": "pattern",
    "parsedName": "pattern",
    "content": {
      "tag": "pattern",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "alt",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Pattern",
      "shortDescriptionOfTheTag": "The pattern tag is used to specify a short hint that describes the expected value of an input field.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Adding a pattern to an input field",
          "code": "<input type='text' pattern='[A-Za-z]{3}' title='Three uppercase or lowercase letters'>"
        },
        {
          "title": "Example 2",
          "description": "Using the pattern attribute with a custom message",
          "code": "<input type='text' pattern='.{8,}' title='Must contain at least 8 characters'>"
        }
      ]
    }
  },
  {
    "name": "picture",
    "parsedName": "picture",
    "content": {
      "tag": "picture",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "alt",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Picture",
      "shortDescriptionOfTheTag": "The picture element is a semantic HTML5 element that allows developers to specify multiple image resources for different displays.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Basic usage of the picture element with source and alt attributes.",
          "code": "<picture>\n  <source srcset=\"image-large.jpg\" media=\"(min-width: 1024px)\">\n  <img src=\"image-small.jpg\" alt=\"A beautiful image\">\n</picture>"
        },
        {
          "title": "Example 2",
          "description": "Using the title attribute in a picture element.",
          "code": "<picture>\n  <source srcset=\"image-large.jpg\" media=\"(min-width: 1024px)\">\n  <img src=\"image-small.jpg\" alt=\"A beautiful image\" title=\"Description of the image\">\n</picture>"
        }
      ]
    }
  },
  {
    "name": "polygon",
    "parsedName": "polygon",
    "content": {
      "tag": "polygon",
      "allowedAttributes": [
        {
          "name": "points",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "fill",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "stroke",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "strokeWidth",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Polygon",
      "shortDescriptionOfTheTag": "Defines a closed shape consisting of a set of connected straight lines in an SVG image.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a simple triangle using polygon:",
          "code": "<svg>\n  <polygon points='100,10 40,180 190,60' fill='red'/>\n</svg>"
        },
        {
          "title": "Example 2",
          "description": "Creating a square with a stroke using polygon:",
          "code": "<svg>\n  <polygon points='10,10 10,110 110,110 110,10' fill='none' stroke='black' strokeWidth='3'/>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "polyline",
    "parsedName": "polyline",
    "content": {
      "tag": "polyline",
      "allowedAttributes": [
        {
          "name": "points",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "fill",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "stroke",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "strokeWidth",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "strokeLinecap",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "round",
                "square",
                "butt"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "polyline",
      "shortDescriptionOfTheTag": "The polyline element is used to create a series of connected straight lines.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Creating a polyline with specific points",
          "code": "<svg>\n  <polyline points='100,100 150,200 200,100' />\n</svg>"
        },
        {
          "title": "Styled Polyline Example",
          "description": "Styling a polyline with different stroke and fill colors",
          "code": "<svg>\n  <polyline points='50,50 100,100 150,50' fill='none' stroke='blue' strokeWidth='2' />\n</svg>"
        }
      ]
    }
  },
  {
    "name": "pre",
    "parsedName": "pre",
    "content": {
      "tag": "pre",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Preformatted Text",
      "shortDescriptionOfTheTag": "The <pre> tag defines preformatted text.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Display preformatted text",
          "code": "<pre>\nThis\nis\npreformatted\ntext\n</pre>"
        },
        {
          "title": "Example 2",
          "description": "Display code snippet with HTML tags",
          "code": "<pre>\n&lt;html&gt;<br>&lt;head&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></pre>"
        }
      ]
    }
  },
  {
    "name": "progress",
    "parsedName": "progress",
    "content": {
      "tag": "progress",
      "allowedAttributes": [
        {
          "name": "value",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "max",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Progress Tag",
      "shortDescriptionOfTheTag": "The progress tag represents the completion progress of a task",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "A simple progress bar showing 50% completion",
          "code": "<progress value='50' max='100'></progress>"
        },
        {
          "title": "Example 2",
          "description": "A progress bar showing 75% completion",
          "code": "<progress value='75' max='100'></progress>"
        }
      ]
    }
  },
  {
    "name": "q",
    "parsedName": "q",
    "content": {
      "tag": "q",
      "allowedAttributes": [
        {
          "name": "cite",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "q",
      "shortDescriptionOfTheTag": "The q tag defines a short quotation.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "A simple q tag with a quote",
          "code": "<q>This is a simple quote</q>"
        },
        {
          "title": "Example 2",
          "description": "A q tag with a cite attribute",
          "code": "<q cite=\"https://www.example.com\">This is a quote with a citation</q>"
        }
      ]
    }
  },
  {
    "name": "radialGradient",
    "parsedName": "radialgradient",
    "content": {
      "tag": "radialGradient",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "cx",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "cy",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "r",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "fx",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "fy",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "radialGradient",
      "shortDescriptionOfTheTag": "Defines a radial gradient that can be used to fill or stroke an element.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Create a simple radial gradient.",
          "code": "<radialGradient id=\"grad1\">\n  <stop offset=\"0%\" style=\"stop-color:rgb(255,255,255);stop-opacity:0\" />\n  <stop offset=\"100%\" style=\"stop-color:rgb(0,0,255);stop-opacity:1\" />\n</radialGradient>"
        },
        {
          "title": "With Attributes",
          "description": "Define a radial gradient with specific attributes.",
          "code": "<radialGradient id=\"grad2\" cx=\"30%\" cy=\"30%\" r=\"30%\" fx=\"50%\" fy=\"50%\">\n  <stop offset=\"0%\" style=\"stop-color:rgb(255,255,255);stop-opacity:0\" />\n  <stop offset=\"100%\" style=\"stop-color:rgb(0,0,255);stop-opacity:1\" />\n</radialGradient>"
        }
      ]
    }
  },
  {
    "name": "rect",
    "parsedName": "rect",
    "content": {
      "tag": "rect",
      "allowedAttributes": [
        {
          "name": "x",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "fill",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "rect",
      "shortDescriptionOfTheTag": "The rect element is used to create a rectangle shape in SVG.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a red rectangle with x, y, width and height attributes.",
          "code": "<rect x='10' y='10' width='100' height='50' fill='red' />"
        },
        {
          "title": "Example 2",
          "description": "Creating a blue rectangle with x, y, width and height attributes.",
          "code": "<rect x='20' y='20' width='80' height='40' fill='blue' />"
        }
      ]
    }
  },
  {
    "name": "rp",
    "parsedName": "rp",
    "content": {
      "tag": "rp",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "rp",
      "shortDescriptionOfTheTag": "The <rp> tag is used to define what to show in browsers that do not support ruby annotations.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Display ruby annotations where the browser supports it:",
          "code": "<ruby>\n  Base text <rb>base</rb>\n  <rp>(</rp><rt>ruby annotation</rt><rp>)</rp>\n</ruby>"
        }
      ]
    }
  },
  {
    "name": "rt",
    "parsedName": "rt",
    "content": {
      "tag": "rt",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "rt",
      "shortDescriptionOfTheTag": "The rt HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation and meaning information for East Asian typography.",
      "usageExamples": [
        {
          "title": "Basic rt Example",
          "description": "This example demonstrates the usage of the rt tag with ruby text inside.",
          "code": "<ruby>漢<rt>ㄏㄢˋ</rt>字<rt>～</rt></ruby>"
        },
        {
          "title": "rt with class Attribute",
          "description": "This example shows how to use the class attribute with the rt tag.",
          "code": "<ruby>テスト<rt class=\"ruby-text\">test</rt></ruby>"
        }
      ]
    }
  },
  {
    "name": "ruby",
    "parsedName": "ruby",
    "content": {
      "tag": "ruby",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "title",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "lang",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "dir",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "ltr",
                "rtl"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "<ruby> Tag",
      "shortDescriptionOfTheTag": "The <ruby> tag specifies a ruby annotation for East Asian typography, including the pronunciation of East Asian characters.",
      "usageExamples": [
        {
          "title": "Basic Usage",
          "description": "An example showing the basic usage of the <ruby> tag",
          "code": "<ruby>漢字<rt>かんじ</rt></ruby>"
        },
        {
          "title": "Ruby with CSS Styling",
          "description": "An example showing ruby text with applied CSS styles",
          "code": "<ruby style=\"color: red;\">漢字<rt>かんじ</rt></ruby>"
        }
      ]
    }
  },
  {
    "name": "s",
    "parsedName": "s",
    "content": {
      "tag": "s",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "s",
      "shortDescriptionOfTheTag": "The s element represents contents that are no longer accurate or no longer relevant.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "This is how you can use the s tag.",
          "code": "<s>This text is no longer accurate.</s>"
        },
        {
          "title": "Example 2",
          "description": "You can add a class to style the s tag.",
          "code": "<s class=\"strikethrough\">This text is no longer relevant.</s>"
        }
      ]
    }
  },
  {
    "name": "samp",
    "parsedName": "samp",
    "content": {
      "tag": "samp",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "samp",
      "shortDescriptionOfTheTag": "Defines sample output from a computer program",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Displaying sample output",
          "code": "<samp>Sample Output</samp>"
        },
        {
          "title": "Example with Class",
          "description": "Applying a custom class to the samp tag",
          "code": "<samp class='custom-style'>Custom Sample Output</samp>"
        }
      ]
    }
  },
  {
    "name": "script",
    "parsedName": "script",
    "content": {
      "tag": "script",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "module",
                "text/javascript"
              ]
            }
          ]
        },
        {
          "name": "async",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "async"
              ]
            }
          ]
        },
        {
          "name": "defer",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "defer"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Script",
      "shortDescriptionOfTheTag": "Define client-side JavaScript within an HTML document",
      "usageExamples": [
        {
          "title": "External Script",
          "description": "Include an external JavaScript file in your HTML document",
          "code": "<script src=\"example.js\"></script>"
        },
        {
          "title": "Inline Script",
          "description": "Write JavaScript directly within the HTML document",
          "code": "<script type=\"text/javascript\">\n    alert('Hello, World!');\n</script>"
        }
      ]
    }
  },
  {
    "name": "section",
    "parsedName": "section",
    "content": {
      "tag": "section",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Section",
      "shortDescriptionOfTheTag": "The <section> tag defines sections in a document, such as chapters, headers, footers, or any other section of the document.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Create a simple section element with some text content.",
          "code": "<section>\n  <h2>Section Title</h2>\n  <p>This is a section of the document.</p>\n</section>"
        },
        {
          "title": "Section with Class",
          "description": "Add a class to the section element for custom styling.",
          "code": "<section class=\"custom-section\">\n  <h2>Custom Section</h2>\n  <p>This section has a custom style applied.</p>\n</section>"
        }
      ]
    }
  },
  {
    "name": "select",
    "parsedName": "select",
    "content": {
      "tag": "select",
      "allowedAttributes": [
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "multiple",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Select",
      "shortDescriptionOfTheTag": "The select element is used to create a dropdown list.",
      "usageExamples": [
        {
          "title": "Basic Select",
          "description": "Create a basic select element with options.",
          "code": "<select>\n  <option value='option1'>Option 1</option>\n  <option value='option2'>Option 2</option>\n</select>"
        }
      ]
    }
  },
  {
    "name": "small",
    "parsedName": "small",
    "content": {
      "tag": "small",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Small",
      "shortDescriptionOfTheTag": "The small tag defines smaller text.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using the small tag to display smaller text.",
          "code": "<small>This text is smaller</small>"
        },
        {
          "title": "Example 2",
          "description": "Nesting the small tag within a paragraph.",
          "code": "<p>This is a paragraph with <small>smaller text</small></p>"
        }
      ]
    }
  },
  {
    "name": "source",
    "parsedName": "source",
    "content": {
      "tag": "source",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "media",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Source",
      "shortDescriptionOfTheTag": "The source element is used to specify multiple media resources for media elements.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Adding a source to a video element",
          "code": "<video controls>\n  <source src=\"movie.mp4\" type=\"video/mp4\">\n  <source src=\"movie.ogg\" type=\"video/ogg\">\n  Your browser does not support the video tag.\n</video>"
        },
        {
          "title": "Example 2",
          "description": "Adding a source to an audio element",
          "code": "<audio controls>\n  <source src=\"music.mp3\" type=\"audio/mp3\">\n  <source src=\"music.ogg\" type=\"audio/ogg\">\n  Your browser does not support the audio element.\n</audio>"
        }
      ]
    }
  },
  {
    "name": "span",
    "parsedName": "span",
    "content": {
      "tag": "span",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "span",
      "shortDescriptionOfTheTag": "The span tag allows grouping inline elements together.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Using a span tag to group text together.",
          "code": "<span>Hello, <strong>world</strong>!</span>"
        },
        {
          "title": "Styling Example",
          "description": "Using a span tag to apply custom styles.",
          "code": "<span style=\"color: red;\">Custom styled text</span>"
        }
      ]
    }
  },
  {
    "name": "stop",
    "parsedName": "stop",
    "content": {
      "tag": "stop",
      "allowedAttributes": [],
      "canHaveChildren": false,
      "title": "Stop Tag",
      "shortDescriptionOfTheTag": "The stop tag defines a stop in a gradient's color transition.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using the stop tag to define a stop in a gradient.",
          "code": "<stop offset='20%' style='stop-color:rgb(255,255,255);stop-opacity:0.5'></stop>"
        },
        {
          "title": "Example 2",
          "description": "Another example of using the stop tag with different attributes.",
          "code": "<stop offset='40%' style='stop-color:rgb(0,0,255);stop-opacity:0.7'></stop>"
        }
      ]
    }
  },
  {
    "name": "strong",
    "parsedName": "strong",
    "content": {
      "tag": "strong",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Strong",
      "shortDescriptionOfTheTag": "Defines text with strong importance",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Displaying strong text",
          "code": "<strong>This is a strong text</strong>"
        },
        {
          "title": "Example 2",
          "description": "Nested strong text",
          "code": "<strong>This is a <strong>strong</strong> text</strong>"
        }
      ]
    }
  },
  {
    "name": "style",
    "parsedName": "style",
    "content": {
      "tag": "style",
      "allowedAttributes": [
        {
          "name": "media",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "scoped",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean",
              "options": [
                "true",
                "false"
              ]
            }
          ]
        },
        {
          "name": "type",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Style",
      "shortDescriptionOfTheTag": "The <style> tag defines style information for a document within HTML.",
      "usageExamples": [
        {
          "title": "Internal Style Sheet",
          "description": "Define CSS styles within the HTML document.",
          "code": "<style>\n  body {\n    background-color: lightblue;\n  }\n</style>"
        },
        {
          "title": "External Style Sheet",
          "description": "Link to an external CSS file to be applied to the HTML document.",
          "code": "<style type=\"text/css\">\n  @import url('styles.css');\n</style>"
        }
      ]
    }
  },
  {
    "name": "sub",
    "parsedName": "sub",
    "content": {
      "tag": "sub",
      "allowedAttributes": [
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "sub",
      "shortDescriptionOfTheTag": "The HTML <sub> element defines subscript text. Subscript text appears half a character below the normal line, and is sometimes rendered in a smaller font.",
      "usageExamples": [
        {
          "title": "Example usage of <sub> tag",
          "description": "This example demonstrates the usage of <sub> tag to create subscript text.",
          "code": "<p>This is a sentence with <sub>subscript</sub> text.</p>"
        }
      ]
    }
  },
  {
    "name": "summary",
    "parsedName": "summary",
    "content": {
      "tag": "summary",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "summary",
      "shortDescriptionOfTheTag": "The summary element represents a summary, caption, or legend for the content of its parent details element.",
      "usageExamples": [
        {
          "title": "Example",
          "description": "Using summary tag with details tag",
          "code": "<details>\n  <summary>Click me to see more</summary>\n  <p>Additional information.</p>\n</details>"
        }
      ]
    }
  },
  {
    "name": "sup",
    "parsedName": "sup",
    "content": {
      "tag": "sup",
      "allowedAttributes": [
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "sup",
      "shortDescriptionOfTheTag": "The <sup> tag defines superscript text.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Superscript text in HTML.",
          "code": "<p>This is a <sup>superscript</sup> text.</p>"
        },
        {
          "title": "Example 2",
          "description": "Superscript text with a class in HTML.",
          "code": "<p>This is a <sup class=\"example\">superscript</sup> text.</p>"
        }
      ]
    }
  },
  {
    "name": "svg",
    "parsedName": "svg",
    "content": {
      "tag": "svg",
      "allowedAttributes": [
        {
          "name": "width",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "height",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "viewBox",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "xmlns",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "SVG",
      "shortDescriptionOfTheTag": "Defines a scalable vector graphic",
      "usageExamples": [
        {
          "title": "Basic SVG Example",
          "description": "Create a simple SVG element with a rectangle",
          "code": "<svg width='100' height='100'><rect width='100' height='100' style='fill:rgb(0,0,255);strokeWidth:1;stroke:rgb(0,0,0)'/></svg>"
        },
        {
          "title": "SVG with viewBox Example",
          "description": "Create a SVG with a different viewbox",
          "code": "<svg width='200' height='200' viewBox='0 0 200 200'><rect width='100' height='100' style='fill:rgb(255,0,0);strokeWidth:1;stroke:rgb(0,0,0)'/></svg>"
        }
      ]
    }
  },
  {
    "name": "switch",
    "parsedName": "switch",
    "content": {
      "tag": "switch",
      "allowedAttributes": [
        {
          "name": "checked",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "disabled",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Switch",
      "shortDescriptionOfTheTag": "An interactive toggle switch component.",
      "usageExamples": [
        {
          "title": "Basic Switch",
          "description": "A basic example of a switch component.",
          "code": "<switch></switch>"
        },
        {
          "title": "Disabled Switch",
          "description": "An example of a disabled switch component.",
          "code": "<switch disabled></switch>"
        }
      ]
    }
  },
  {
    "name": "symbol",
    "parsedName": "symbol",
    "content": {
      "tag": "symbol",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "viewBox",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "preserveAspectRatio",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Symbol",
      "shortDescriptionOfTheTag": "The element is used to define graphical templates which can then be referenced by other elements.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "A symbol with an ID of 'mySymbol' and a viewBox of '0 0 100 100'.",
          "code": "<symbol id='mySymbol' viewBox='0 0 100 100'>...</symbol>"
        },
        {
          "title": "Example 2",
          "description": "A symbol with an ID of 'anotherSymbol' and a preserve aspect ratio value of 'xMinYMin'.",
          "code": "<symbol id='anotherSymbol' preserveAspectRatio='xMinYMin'>...</symbol>"
        }
      ]
    }
  },
  {
    "name": "table",
    "parsedName": "table",
    "content": {
      "tag": "table",
      "allowedAttributes": [
        {
          "name": "border",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "cellpadding",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "cellspacing",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "width",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Table",
      "shortDescriptionOfTheTag": "Defines a table for organizing tabular data.",
      "usageExamples": [
        {
          "title": "Basic Table",
          "description": "Create a simple table with rows and columns.",
          "code": "<table>\n  <tr>\n    <td>Row 1, Column 1</td>\n    <td>Row 1, Column 2</td>\n  </tr>\n  <tr>\n    <td>Row 2, Column 1</td>\n    <td>Row 2, Column 2</td>\n  </tr>\n</table>"
        },
        {
          "title": "Styled Table",
          "description": "Add styling to a table using attributes.",
          "code": "<table border='1' cellpadding='5' cellspacing='0'>\n  <tr>\n    <td>Row 1, Column 1</td>\n    <td>Row 1, Column 2</td>\n  </tr>\n  <tr>\n    <td>Row 2, Column 1</td>\n    <td>Row 2, Column 2</td>\n  </tr>\n</table>"
        }
      ]
    }
  },
  {
    "name": "tbody",
    "parsedName": "tbody",
    "content": {
      "tag": "tbody",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "HTML tbody Tag",
      "shortDescriptionOfTheTag": "The HTML <tbody> tag defines a group of table rows that form the body of the table content.",
      "usageExamples": [
        {
          "title": "Basic tbody Example",
          "description": "Create a basic table body with two rows.",
          "code": "<table>\n  <tbody>\n    <tr>\n      <td>Row 1 Data 1</td>\n      <td>Row 1 Data 2</td>\n    </tr>\n    <tr>\n      <td>Row 2 Data 1</td>\n      <td>Row 2 Data 2</td>\n    </tr>\n  </tbody>\n</table>"
        },
        {
          "title": "Nested tbody Example",
          "description": "Nest tbody within a table for additional styling or structure.",
          "code": "<table>\n  <tbody>\n    <tr>\n      <td>Nested tbody Row 1 Data 1</td>\n      <td>Nested tbody Row 1 Data 2</td>\n    </tr>\n  </tbody>\n</table>"
        }
      ]
    }
  },
  {
    "name": "td",
    "parsedName": "td",
    "content": {
      "tag": "td",
      "allowedAttributes": [
        {
          "name": "colspan",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "rowspan",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "headers",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "td",
      "shortDescriptionOfTheTag": "Defines a cell in a table",
      "usageExamples": [
        {
          "title": "Basic td Example",
          "description": "Creating a simple cell in a table",
          "code": "<table>\n  <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n  </tr>\n</table>"
        },
        {
          "title": "td with colspan",
          "description": "Creating a cell that spans multiple columns in a table",
          "code": "<table>\n  <tr>\n    <td colspan=\"2\">Cell 1 and Cell 2 merged</td>\n  </tr>\n</table>"
        }
      ]
    }
  },
  {
    "name": "template",
    "parsedName": "template",
    "content": {
      "tag": "template",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Template",
      "shortDescriptionOfTheTag": "Defines a template that can be cloned and inserted into the document.",
      "usageExamples": [
        {
          "title": "Basic Template Example",
          "description": "Create a simple template that can be used multiple times.",
          "code": "<template id='myTemplate'><p>Hello World!</p></template>"
        },
        {
          "title": "Named Template Example",
          "description": "Define a template with a specific name.",
          "code": "<template id='personTemplate'><p>{{name}}, {{age}} years old</p></template>"
        }
      ]
    }
  },
  {
    "name": "text",
    "parsedName": "text",
    "content": {
      "tag": "text",
      "allowedAttributes": [
        {
          "name": "value",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "style",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Text",
      "shortDescriptionOfTheTag": "A component for displaying text.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Rendering plain text",
          "code": "<text>Hello World</text>"
        },
        {
          "title": "Example 2",
          "description": "Rendering text with custom style",
          "code": "<text style='color: blue'>Styled Text</text>"
        }
      ]
    }
  },
  {
    "name": "textarea",
    "parsedName": "textarea",
    "content": {
      "tag": "textarea",
      "allowedAttributes": [
        {
          "name": "autofocus",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "cols",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "rows",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "placeholder",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Textarea",
      "shortDescriptionOfTheTag": "Textarea element defines a multi-line input field that allows users to enter text.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "A basic example of a textarea element.",
          "code": "<textarea cols='30' rows='10'></textarea>"
        },
        {
          "title": "Example with Placeholder",
          "description": "Example of a textarea element with a placeholder text.",
          "code": "<textarea cols='30' rows='10' placeholder='Enter your text here'></textarea>"
        }
      ]
    }
  },
  {
    "name": "textPath",
    "parsedName": "textpath",
    "content": {
      "tag": "textPath",
      "allowedAttributes": [
        {
          "name": "href",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "URL"
            }
          ]
        },
        {
          "name": "startOffset",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "method",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "align",
                "stretch"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "textPath",
      "shortDescriptionOfTheTag": "The SVG <textPath> element defines a set of content for display along a <path> element which corresponds to a shape defined in the SVG's graphical layout.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "This example shows the basic usage of the textPath tag.",
          "code": "<svg>\n  <path d=\"M10 10 H 90 V 90 H 10 L 10 10\" />\n  <text>\n    <textPath href=\"#MyPath\">We go up, then we go down, then up again</textPath>\n  </text>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "tfoot",
    "parsedName": "tfoot",
    "content": {
      "tag": "tfoot",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "tfoot",
      "shortDescriptionOfTheTag": "The tfoot element defines a group of footer rows in a table.",
      "usageExamples": [
        {
          "title": "Basic tfoot Example",
          "description": "Example showing the basic usage of the tfoot element.",
          "code": "<table>\n  <thead>\n    <tr>\n      <th>Header 1</th>\n      <th>Header 2</th>\n    </tr>\n  </thead>\n  <tfoot>\n    <tr>\n      <td>Footer 1</td>\n      <td>Footer 2</td>\n    </tr>\n  </tfoot>\n  <tbody>\n    <tr>\n      <td>Data 1</td>\n      <td>Data 2</td>\n    </tr>\n  </tbody>\n</table>"
        }
      ]
    }
  },
  {
    "name": "th",
    "parsedName": "th",
    "content": {
      "tag": "th",
      "allowedAttributes": [
        {
          "name": "colspan",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "rowspan",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "headers",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "scope",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "row",
                "col",
                "rowgroup",
                "colgroup"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "th",
      "shortDescriptionOfTheTag": "HTML table header cell element",
      "usageExamples": [
        {
          "title": "Basic th Example",
          "description": "A simple example of using th tag:",
          "code": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n</table>"
        }
      ]
    }
  },
  {
    "name": "thead",
    "parsedName": "thead",
    "content": {
      "tag": "thead",
      "allowedAttributes": [
        {
          "name": "align",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "left",
                "center",
                "right",
                "justify"
              ]
            }
          ]
        },
        {
          "name": "valign",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "top",
                "middle",
                "bottom",
                "baseline"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Thead",
      "shortDescriptionOfTheTag": "Defines a group of rows for a table heading.",
      "usageExamples": [
        {
          "title": "Basic Thead Example",
          "description": "Creating a basic thead element with two rows and two cells in each row.",
          "code": "<thead>\n  <tr>\n    <th colspan='2'>Main Title</th>\n  </tr>\n  <tr>\n    <th>Header 1</th>\n    <th>Header 2</th>\n  </tr>\n</thead>"
        }
      ]
    }
  },
  {
    "name": "time",
    "parsedName": "time",
    "content": {
      "tag": "time",
      "allowedAttributes": [
        {
          "name": "datetime",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "pubdate",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean",
              "options": [
                "true",
                "false"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Time",
      "shortDescriptionOfTheTag": "Defines a specific time or datetime, or a machine-readable date.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Using the time tag to display a specific date and time.",
          "code": "<time datetime='2022-01-01T12:00:00'>January 1, 2022</time>"
        },
        {
          "title": "With pubdate Attribute",
          "description": "Using the pubdate attribute to indicate that the time element is the publication date of the surrounding text.",
          "code": "<p>Posted on <time datetime='2022-01-01' pubdate='true'>January 1, 2022</time></p>"
        }
      ]
    }
  },
  {
    "name": "title",
    "parsedName": "title",
    "content": {
      "tag": "title",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "Title",
      "shortDescriptionOfTheTag": "The title tag defines the title of the document.",
      "usageExamples": [
        {
          "title": "Basic Title Example",
          "description": "Setting a title for the document.",
          "code": "<title>Document Title</title>"
        },
        {
          "title": "Nested Title Example",
          "description": "Using a title tag within the head tag.",
          "code": "<head>\n  <title>Document Title</title>\n</head>"
        }
      ]
    }
  },
  {
    "name": "tr",
    "parsedName": "tr",
    "content": {
      "tag": "tr",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "tr",
      "shortDescriptionOfTheTag": "HTML Table Row Element",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Creating a simple table row",
          "code": "<table><tr><td>Row 1, Cell 1</td><td>Row 1, Cell 2</td></tr></table>"
        },
        {
          "title": "Nested Example",
          "description": "Creating a nested table row",
          "code": "<table><tr><td>Row 1, Cell 1</td><td>Row 1, Cell 2</td><tr><table>"
        }
      ]
    }
  },
  {
    "name": "track",
    "parsedName": "track",
    "content": {
      "tag": "track",
      "allowedAttributes": [
        {
          "name": "default",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "kind",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string",
              "options": [
                "subtitles",
                "captions",
                "descriptions",
                "chapters",
                "metadata"
              ]
            }
          ]
        },
        {
          "name": "label",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "srclang",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Track Element",
      "shortDescriptionOfTheTag": "The <track> element is used to specify text track for media elements like <audio> and <video>.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Adding a subtitles track to a video element",
          "code": "<video controls>\n  <source src='movie.mp4' type='video/mp4'>\n  <track src='subtitles_en.vtt' kind='subtitles' srclang='en' label='English'>\n</video>"
        },
        {
          "title": "Example 2",
          "description": "Adding captions to a video element",
          "code": "<video controls>\n  <source src='movie.mp4' type='video/mp4'>\n  <track src='captions_fr.vtt' kind='captions' srclang='fr' label='French'>\n</video>"
        }
      ]
    }
  },
  {
    "name": "tspan",
    "parsedName": "tspan",
    "content": {
      "tag": "tspan",
      "allowedAttributes": [
        {
          "name": "x",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "y",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "dx",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        },
        {
          "name": "dy",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "number"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "tspan",
      "shortDescriptionOfTheTag": "The tspan element allows to group a part of a text within a text element.",
      "usageExamples": [
        {
          "title": "Basic tspan Example",
          "description": "This example shows the usage of the tspan tag to style a part of a text.",
          "code": "<text x='10' y='20'>This is a <tspan fill='red'>red</tspan> word</text>"
        },
        {
          "title": "Nested tspan Example",
          "description": "This example shows nested tspan tags to apply different styles to different parts of the text.",
          "code": "<text x='10' y='20'>This is a <tspan fill='red'>red <tspan fill='blue'>blue</tspan></tspan> word</text>"
        }
      ]
    }
  },
  {
    "name": "u",
    "parsedName": "u",
    "content": {
      "tag": "u",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "u",
      "shortDescriptionOfTheTag": "The <u> tag defines underlined text.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using the u tag to underline text",
          "code": "<p>This is <u>underlined</u> text.</p>"
        },
        {
          "title": "Example 2",
          "description": "Nested underlined text",
          "code": "<p>This is <u>underlined <u>and</u> nested</u> text.</p>"
        }
      ]
    }
  },
  {
    "name": "ul",
    "parsedName": "ul",
    "content": {
      "tag": "ul",
      "allowedAttributes": [],
      "canHaveChildren": true,
      "title": "ul",
      "shortDescriptionOfTheTag": "The <ul> tag defines an unordered (bulleted) list.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Creating a simple unordered list with HTML:",
          "code": "<ul>\n  <li>Apple</li>\n  <li>Banana</li>\n  <li>Orange</li>\n</ul>"
        },
        {
          "title": "Example 2",
          "description": "Styling the list with CSS:",
          "code": "<style>\n  ul {\n    list-style-type: circle;\n  }\n</style>\n\n<ul>\n  <li>Red</li>\n  <li>Green</li>\n  <li>Blue</li>\n</ul>"
        }
      ]
    }
  },
  {
    "name": "use",
    "parsedName": "use",
    "content": {
      "tag": "use",
      "allowedAttributes": [
        {
          "name": "href",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "x",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "y",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "Use",
      "shortDescriptionOfTheTag": "The use element takes nodes from within the SVG document and duplicates them somewhere else.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Using the use tag to reference a pre-defined shape.",
          "code": "<svg width='100' height='100'>\n  <rect id='myRectangle' width='90' height='90' fill='blue' />\n  <use href='#myRectangle' x='5' y='5'/>\n</svg>"
        },
        {
          "title": "Multiple Use Elements",
          "description": "Using multiple use elements to reference the same shape.",
          "code": "<svg width='150' height='150'>\n  <rect id='myRectangle' width='70' height='70' fill='green' />\n  <use href='#myRectangle' x='5' y='5'/>\n  <use href='#myRectangle' x='75' y='75'/>\n</svg>"
        }
      ]
    }
  },
  {
    "name": "var",
    "parsedName": "var",
    "content": {
      "tag": "var",
      "allowedAttributes": [
        {
          "name": "accesskey",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "var",
      "shortDescriptionOfTheTag": "The <var> tag defines a variable in programming or an inline element in a document.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Define a variable using the <var> tag",
          "code": "<p>The value of <var>x</var> is 10.</p>"
        },
        {
          "title": "Example 2",
          "description": "Use CSS to style a <var> element",
          "code": "var { font-style: italic; color: blue; }"
        }
      ]
    }
  },
  {
    "name": "video",
    "parsedName": "video",
    "content": {
      "tag": "video",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "controls",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean",
              "options": [
                "controls"
              ]
            }
          ]
        },
        {
          "name": "autoplay",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean",
              "options": [
                "autoplay"
              ]
            }
          ]
        },
        {
          "name": "loop",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "boolean",
              "options": [
                "loop"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": false,
      "title": "HTML video Tag",
      "shortDescriptionOfTheTag": "The video tag in HTML is used to embed a video into a document.",
      "usageExamples": [
        {
          "title": "Basic video tag",
          "description": "Embedding a video with default settings",
          "code": "<video src=\"video.mp4\" controls autoplay></video>"
        },
        {
          "title": "Video without controls",
          "description": "Embedding a video without controls",
          "code": "<video src=\"video.mp4\" autoplay></video>"
        }
      ]
    }
  },
  {
    "name": "view",
    "parsedName": "view",
    "content": {
      "tag": "view",
      "allowedAttributes": [
        {
          "name": "id",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "class",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "View",
      "shortDescriptionOfTheTag": "A container for organizing content in HTML.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "A basic example of using the view tag.",
          "code": "<view>Content goes here</view>"
        },
        {
          "title": "Example with ID",
          "description": "An example of using the ID attribute with the view tag.",
          "code": "<view id=\"container\">Content goes here</view>"
        }
      ]
    }
  },
  {
    "name": "wbr",
    "parsedName": "wbr",
    "content": {
      "tag": "wbr",
      "allowedAttributes": [],
      "canHaveChildren": false,
      "title": "WBR Tag",
      "shortDescriptionOfTheTag": "The <wbr> tag specifies where in a text it would be fine to add a line-break.",
      "usageExamples": [
        {
          "title": "Example 1",
          "description": "Using <wbr> tag to specify line break.",
          "code": "<p>This is a veryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryvery long text.<wbr>With a break in the middle.</p>"
        }
      ]
    }
  },
  {
    "name": "webview",
    "parsedName": "webview",
    "content": {
      "tag": "webview",
      "allowedAttributes": [
        {
          "name": "src",
          "isRequired": true,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "name",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "sandbox",
          "isRequired": false,
          "acceptedValueTypes": [
            {
              "type": "string"
            },
            {
              "type": "boolean",
              "options": [
                "allow-forms",
                "allow-scripts",
                "allow-same-origin",
                "allow-top-navigation",
                "allow-popups"
              ]
            }
          ]
        }
      ],
      "canHaveChildren": true,
      "title": "Webview",
      "shortDescriptionOfTheTag": "An element to embed an entire web page within an HTML document.",
      "usageExamples": [
        {
          "title": "Basic Example",
          "description": "Embedding a web page inside a webview element.",
          "code": "<webview src='https://www.example.com'></webview>"
        },
        {
          "title": "Example with name and sandbox",
          "description": "Embedding a web page with custom name and sandbox options.",
          "code": "<webview src='https://www.example.com' name='exampleFrame' sandbox='allow-forms allow-scripts'></webview>"
        }
      ]
    }
  }
]